
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;


namespace CurrentDesk.Models
{

public partial class ManagedAccountProgram
{
    #region Primitive Properties
    

    public virtual int PK_ManagedAccPrgmID
    {

        get;
        set;

    }


    public virtual string ProgramName
    {

        get;
        set;

    }


    public virtual Nullable<decimal> MinimumDeposit
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_AccountCurrencyID
    {

        get { return _fK_AccountCurrencyID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_AccountCurrencyID != value)

            {

                if (AccountCurrency != null && AccountCurrency.PK_AccountCurrencyID != value)

                {

                    AccountCurrency = null;

                }

                _fK_AccountCurrencyID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_AccountCurrencyID;


    public virtual Nullable<double> MinStopOutLevel
    {

        get;
        set;

    }


    public virtual Nullable<double> PerformanceFee
    {

        get;
        set;

    }


    public virtual Nullable<int> PerformanceFeePeriod
    {

        get;
        set;

    }


    public virtual Nullable<double> ManagementFee
    {

        get;
        set;

    }


    public virtual Nullable<int> ManagementFeePeriod
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_FeeGroupID
    {

        get { return _fK_FeeGroupID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_FeeGroupID != value)

            {

                if (PartnerCommission != null && PartnerCommission.PK_PartnerCommID != value)

                {

                    PartnerCommission = null;

                }

                _fK_FeeGroupID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_FeeGroupID;


    public virtual Nullable<int> DepositAcceptance
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_PlatformID
    {

        get { return _fK_PlatformID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_PlatformID != value)

            {

                if (TradingPlatform != null && TradingPlatform.PK_TradingPlatformID != value)

                {

                    TradingPlatform = null;

                }

                _fK_PlatformID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_PlatformID;


    public virtual Nullable<int> FK_UserID
    {

        get { return _fK_UserID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_UserID != value)

            {

                if (User != null && User.PK_UserID != value)

                {

                    User = null;

                }

                _fK_UserID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_UserID;


    public virtual Nullable<bool> IsEnabled
    {

        get;
        set;

    }


    public virtual Nullable<double> IBPerformanceFeeShare
    {

        get;
        set;

    }


    public virtual Nullable<double> IBManagemantFeeShare
    {

        get;
        set;

    }


    public virtual Nullable<double> IBCommissionMarkupShare
    {

        get;
        set;

    }


    public virtual Nullable<double> IBSpreadMarkupShare
    {

        get;
        set;

    }


    public virtual Nullable<bool> IBMaskedOffering
    {

        get;
        set;

    }

        #endregion

        #region Navigation Properties
    


    public virtual AccountCurrency AccountCurrency
    {

        get { return _accountCurrency; }
        set
        {
            if (!ReferenceEquals(_accountCurrency, value))
            {
                var previousValue = _accountCurrency;
                _accountCurrency = value;
                FixupAccountCurrency(previousValue);
            }
        }
    }
    private AccountCurrency _accountCurrency;



    public virtual PartnerCommission PartnerCommission
    {

        get { return _partnerCommission; }
        set
        {
            if (!ReferenceEquals(_partnerCommission, value))
            {
                var previousValue = _partnerCommission;
                _partnerCommission = value;
                FixupPartnerCommission(previousValue);
            }
        }
    }
    private PartnerCommission _partnerCommission;



    public virtual TradingPlatform TradingPlatform
    {

        get { return _tradingPlatform; }
        set
        {
            if (!ReferenceEquals(_tradingPlatform, value))
            {
                var previousValue = _tradingPlatform;
                _tradingPlatform = value;
                FixupTradingPlatform(previousValue);
            }
        }
    }
    private TradingPlatform _tradingPlatform;



    public virtual User User
    {

        get { return _user; }
        set
        {
            if (!ReferenceEquals(_user, value))
            {
                var previousValue = _user;
                _user = value;
                FixupUser(previousValue);
            }
        }
    }
    private User _user;

        #endregion

        #region Association Fixup
    

    private bool _settingFK = false;


    private void FixupAccountCurrency(AccountCurrency previousValue)
    {

        if (previousValue != null && previousValue.ManagedAccountPrograms.Contains(this))
        {
            previousValue.ManagedAccountPrograms.Remove(this);
        }


        if (AccountCurrency != null)
        {
            if (!AccountCurrency.ManagedAccountPrograms.Contains(this))
            {
                AccountCurrency.ManagedAccountPrograms.Add(this);
            }

            if (FK_AccountCurrencyID != AccountCurrency.PK_AccountCurrencyID)

            {
                FK_AccountCurrencyID = AccountCurrency.PK_AccountCurrencyID;
            }

        }

        else if (!_settingFK)

        {

            FK_AccountCurrencyID = null;

        }

    }


    private void FixupPartnerCommission(PartnerCommission previousValue)
    {

        if (previousValue != null && previousValue.ManagedAccountPrograms.Contains(this))
        {
            previousValue.ManagedAccountPrograms.Remove(this);
        }


        if (PartnerCommission != null)
        {
            if (!PartnerCommission.ManagedAccountPrograms.Contains(this))
            {
                PartnerCommission.ManagedAccountPrograms.Add(this);
            }

            if (FK_FeeGroupID != PartnerCommission.PK_PartnerCommID)

            {
                FK_FeeGroupID = PartnerCommission.PK_PartnerCommID;
            }

        }

        else if (!_settingFK)

        {

            FK_FeeGroupID = null;

        }

    }


    private void FixupTradingPlatform(TradingPlatform previousValue)
    {

        if (previousValue != null && previousValue.ManagedAccountPrograms.Contains(this))
        {
            previousValue.ManagedAccountPrograms.Remove(this);
        }


        if (TradingPlatform != null)
        {
            if (!TradingPlatform.ManagedAccountPrograms.Contains(this))
            {
                TradingPlatform.ManagedAccountPrograms.Add(this);
            }

            if (FK_PlatformID != TradingPlatform.PK_TradingPlatformID)

            {
                FK_PlatformID = TradingPlatform.PK_TradingPlatformID;
            }

        }

        else if (!_settingFK)

        {

            FK_PlatformID = null;

        }

    }


    private void FixupUser(User previousValue)
    {

        if (previousValue != null && previousValue.ManagedAccountPrograms.Contains(this))
        {
            previousValue.ManagedAccountPrograms.Remove(this);
        }


        if (User != null)
        {
            if (!User.ManagedAccountPrograms.Contains(this))
            {
                User.ManagedAccountPrograms.Add(this);
            }

            if (FK_UserID != User.PK_UserID)

            {
                FK_UserID = User.PK_UserID;
            }

        }

        else if (!_settingFK)

        {

            FK_UserID = null;

        }

    }

        #endregion

    
}

}
