
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;


namespace CurrentDesk.Models
{

public partial class LiveLead
{
    #region Primitive Properties
    

    public virtual int PK_LeadID
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_WidenSpreadsID
    {

        get { return _fK_WidenSpreadsID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_WidenSpreadsID != value)

            {

                if (L_WidenSpreadsValue != null && L_WidenSpreadsValue.PK_WidenSpreadsID != value)

                {

                    L_WidenSpreadsValue = null;

                }

                _fK_WidenSpreadsID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_WidenSpreadsID;


    public virtual Nullable<int> FK_CommissionIncrementID
    {

        get { return _fK_CommissionIncrementID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_CommissionIncrementID != value)

            {

                if (L_CommissionIncrementValue != null && L_CommissionIncrementValue.PK_CommissionIncrementID != value)

                {

                    L_CommissionIncrementValue = null;

                }

                _fK_CommissionIncrementID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_CommissionIncrementID;


    public virtual string FirstName
    {

        get;
        set;

    }


    public virtual string LastName
    {

        get;
        set;

    }


    public virtual string EmailAddress
    {

        get;
        set;

    }


    public virtual string PhoneNo
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_AccountID
    {

        get { return _fK_AccountID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_AccountID != value)

            {

                if (L_AccountCode != null && L_AccountCode.PK_AccountID != value)

                {

                    L_AccountCode = null;

                }

                _fK_AccountID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_AccountID;


    public virtual Nullable<int> FK_ResidenceCountry
    {

        get { return _fK_ResidenceCountry; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_ResidenceCountry != value)

            {

                if (L_Country != null && L_Country.PK_CountryID != value)

                {

                    L_Country = null;

                }

                _fK_ResidenceCountry = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_ResidenceCountry;


    public virtual Nullable<int> FK_IntroducingBrokerID
    {

        get { return _fK_IntroducingBrokerID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_IntroducingBrokerID != value)

            {

                if (IntroducingBroker != null && IntroducingBroker.PK_IntroducingBrokerID != value)

                {

                    IntroducingBroker = null;

                }

                _fK_IntroducingBrokerID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_IntroducingBrokerID;


    public virtual Nullable<int> FK_AccountTypeID
    {

        get { return _fK_AccountTypeID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_AccountTypeID != value)

            {

                if (AccountType != null && AccountType.PK_AccountType != value)

                {

                    AccountType = null;

                }

                _fK_AccountTypeID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_AccountTypeID;


    public virtual Nullable<int> FK_AccountCurrencyID
    {

        get { return _fK_AccountCurrencyID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_AccountCurrencyID != value)

            {

                if (AccountCurrency != null && AccountCurrency.PK_AccountCurrencyID != value)

                {

                    AccountCurrency = null;

                }

                _fK_AccountCurrencyID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_AccountCurrencyID;


    public virtual Nullable<int> FK_PlatformID
    {

        get { return _fK_PlatformID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_PlatformID != value)

            {

                if (TradingPlatform != null && TradingPlatform.PK_TradingPlatformID != value)

                {

                    TradingPlatform = null;

                }

                _fK_PlatformID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_PlatformID;


    public virtual Nullable<int> FK_PreferedCommunicationLanguage
    {

        get { return _fK_PreferedCommunicationLanguage; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_PreferedCommunicationLanguage != value)

            {

                if (L_Languages != null && L_Languages.PK_LanguageID != value)

                {

                    L_Languages = null;

                }

                _fK_PreferedCommunicationLanguage = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_PreferedCommunicationLanguage;


    public virtual Nullable<bool> IsEnglishSpeaking
    {

        get;
        set;

    }


    public virtual string Password
    {

        get;
        set;

    }


    public virtual Nullable<double> WidenSpreadValue
    {

        get;
        set;

    }


    public virtual Nullable<double> CommissionValue
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_AgentID
    {

        get { return _fK_AgentID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_AgentID != value)

            {

                if (Agent != null && Agent.PK_AgentID != value)

                {

                    Agent = null;

                }

                _fK_AgentID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_AgentID;


    public virtual int FK_OrganizationID
    {

        get { return _fK_OrganizationID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_OrganizationID != value)

            {

                if (Organization != null && Organization.PK_OrganizationID != value)

                {

                    Organization = null;

                }

                _fK_OrganizationID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private int _fK_OrganizationID;

        #endregion

        #region Navigation Properties
    


    public virtual AccountCurrency AccountCurrency
    {

        get { return _accountCurrency; }
        set
        {
            if (!ReferenceEquals(_accountCurrency, value))
            {
                var previousValue = _accountCurrency;
                _accountCurrency = value;
                FixupAccountCurrency(previousValue);
            }
        }
    }
    private AccountCurrency _accountCurrency;



    public virtual AccountType AccountType
    {

        get { return _accountType; }
        set
        {
            if (!ReferenceEquals(_accountType, value))
            {
                var previousValue = _accountType;
                _accountType = value;
                FixupAccountType(previousValue);
            }
        }
    }
    private AccountType _accountType;



    public virtual IntroducingBroker IntroducingBroker
    {

        get { return _introducingBroker; }
        set
        {
            if (!ReferenceEquals(_introducingBroker, value))
            {
                var previousValue = _introducingBroker;
                _introducingBroker = value;
                FixupIntroducingBroker(previousValue);
            }
        }
    }
    private IntroducingBroker _introducingBroker;



    public virtual L_AccountCode L_AccountCode
    {

        get { return _l_AccountCode; }
        set
        {
            if (!ReferenceEquals(_l_AccountCode, value))
            {
                var previousValue = _l_AccountCode;
                _l_AccountCode = value;
                FixupL_AccountCode(previousValue);
            }
        }
    }
    private L_AccountCode _l_AccountCode;



    public virtual L_CommissionIncrementValue L_CommissionIncrementValue
    {

        get { return _l_CommissionIncrementValue; }
        set
        {
            if (!ReferenceEquals(_l_CommissionIncrementValue, value))
            {
                var previousValue = _l_CommissionIncrementValue;
                _l_CommissionIncrementValue = value;
                FixupL_CommissionIncrementValue(previousValue);
            }
        }
    }
    private L_CommissionIncrementValue _l_CommissionIncrementValue;



    public virtual L_Country L_Country
    {

        get { return _l_Country; }
        set
        {
            if (!ReferenceEquals(_l_Country, value))
            {
                var previousValue = _l_Country;
                _l_Country = value;
                FixupL_Country(previousValue);
            }
        }
    }
    private L_Country _l_Country;



    public virtual L_Languages L_Languages
    {

        get { return _l_Languages; }
        set
        {
            if (!ReferenceEquals(_l_Languages, value))
            {
                var previousValue = _l_Languages;
                _l_Languages = value;
                FixupL_Languages(previousValue);
            }
        }
    }
    private L_Languages _l_Languages;



    public virtual L_WidenSpreadsValue L_WidenSpreadsValue
    {

        get { return _l_WidenSpreadsValue; }
        set
        {
            if (!ReferenceEquals(_l_WidenSpreadsValue, value))
            {
                var previousValue = _l_WidenSpreadsValue;
                _l_WidenSpreadsValue = value;
                FixupL_WidenSpreadsValue(previousValue);
            }
        }
    }
    private L_WidenSpreadsValue _l_WidenSpreadsValue;



    public virtual TradingPlatform TradingPlatform
    {

        get { return _tradingPlatform; }
        set
        {
            if (!ReferenceEquals(_tradingPlatform, value))
            {
                var previousValue = _tradingPlatform;
                _tradingPlatform = value;
                FixupTradingPlatform(previousValue);
            }
        }
    }
    private TradingPlatform _tradingPlatform;



    public virtual Agent Agent
    {

        get { return _agent; }
        set
        {
            if (!ReferenceEquals(_agent, value))
            {
                var previousValue = _agent;
                _agent = value;
                FixupAgent(previousValue);
            }
        }
    }
    private Agent _agent;



    public virtual Organization Organization
    {

        get { return _organization; }
        set
        {
            if (!ReferenceEquals(_organization, value))
            {
                var previousValue = _organization;
                _organization = value;
                FixupOrganization(previousValue);
            }
        }
    }
    private Organization _organization;

        #endregion

        #region Association Fixup
    

    private bool _settingFK = false;


    private void FixupAccountCurrency(AccountCurrency previousValue)
    {

        if (previousValue != null && previousValue.LiveLeads.Contains(this))
        {
            previousValue.LiveLeads.Remove(this);
        }


        if (AccountCurrency != null)
        {
            if (!AccountCurrency.LiveLeads.Contains(this))
            {
                AccountCurrency.LiveLeads.Add(this);
            }

            if (FK_AccountCurrencyID != AccountCurrency.PK_AccountCurrencyID)

            {
                FK_AccountCurrencyID = AccountCurrency.PK_AccountCurrencyID;
            }

        }

        else if (!_settingFK)

        {

            FK_AccountCurrencyID = null;

        }

    }


    private void FixupAccountType(AccountType previousValue)
    {

        if (previousValue != null && previousValue.LiveLeads.Contains(this))
        {
            previousValue.LiveLeads.Remove(this);
        }


        if (AccountType != null)
        {
            if (!AccountType.LiveLeads.Contains(this))
            {
                AccountType.LiveLeads.Add(this);
            }

            if (FK_AccountTypeID != AccountType.PK_AccountType)

            {
                FK_AccountTypeID = AccountType.PK_AccountType;
            }

        }

        else if (!_settingFK)

        {

            FK_AccountTypeID = null;

        }

    }


    private void FixupIntroducingBroker(IntroducingBroker previousValue)
    {

        if (previousValue != null && previousValue.LiveLeads.Contains(this))
        {
            previousValue.LiveLeads.Remove(this);
        }


        if (IntroducingBroker != null)
        {
            if (!IntroducingBroker.LiveLeads.Contains(this))
            {
                IntroducingBroker.LiveLeads.Add(this);
            }

            if (FK_IntroducingBrokerID != IntroducingBroker.PK_IntroducingBrokerID)

            {
                FK_IntroducingBrokerID = IntroducingBroker.PK_IntroducingBrokerID;
            }

        }

        else if (!_settingFK)

        {

            FK_IntroducingBrokerID = null;

        }

    }


    private void FixupL_AccountCode(L_AccountCode previousValue)
    {

        if (previousValue != null && previousValue.LiveLeads.Contains(this))
        {
            previousValue.LiveLeads.Remove(this);
        }


        if (L_AccountCode != null)
        {
            if (!L_AccountCode.LiveLeads.Contains(this))
            {
                L_AccountCode.LiveLeads.Add(this);
            }

            if (FK_AccountID != L_AccountCode.PK_AccountID)

            {
                FK_AccountID = L_AccountCode.PK_AccountID;
            }

        }

        else if (!_settingFK)

        {

            FK_AccountID = null;

        }

    }


    private void FixupL_CommissionIncrementValue(L_CommissionIncrementValue previousValue)
    {

        if (previousValue != null && previousValue.LiveLeads.Contains(this))
        {
            previousValue.LiveLeads.Remove(this);
        }


        if (L_CommissionIncrementValue != null)
        {
            if (!L_CommissionIncrementValue.LiveLeads.Contains(this))
            {
                L_CommissionIncrementValue.LiveLeads.Add(this);
            }

            if (FK_CommissionIncrementID != L_CommissionIncrementValue.PK_CommissionIncrementID)

            {
                FK_CommissionIncrementID = L_CommissionIncrementValue.PK_CommissionIncrementID;
            }

        }

        else if (!_settingFK)

        {

            FK_CommissionIncrementID = null;

        }

    }


    private void FixupL_Country(L_Country previousValue)
    {

        if (previousValue != null && previousValue.LiveLeads.Contains(this))
        {
            previousValue.LiveLeads.Remove(this);
        }


        if (L_Country != null)
        {
            if (!L_Country.LiveLeads.Contains(this))
            {
                L_Country.LiveLeads.Add(this);
            }

            if (FK_ResidenceCountry != L_Country.PK_CountryID)

            {
                FK_ResidenceCountry = L_Country.PK_CountryID;
            }

        }

        else if (!_settingFK)

        {

            FK_ResidenceCountry = null;

        }

    }


    private void FixupL_Languages(L_Languages previousValue)
    {

        if (previousValue != null && previousValue.LiveLeads.Contains(this))
        {
            previousValue.LiveLeads.Remove(this);
        }


        if (L_Languages != null)
        {
            if (!L_Languages.LiveLeads.Contains(this))
            {
                L_Languages.LiveLeads.Add(this);
            }

            if (FK_PreferedCommunicationLanguage != L_Languages.PK_LanguageID)

            {
                FK_PreferedCommunicationLanguage = L_Languages.PK_LanguageID;
            }

        }

        else if (!_settingFK)

        {

            FK_PreferedCommunicationLanguage = null;

        }

    }


    private void FixupL_WidenSpreadsValue(L_WidenSpreadsValue previousValue)
    {

        if (previousValue != null && previousValue.LiveLeads.Contains(this))
        {
            previousValue.LiveLeads.Remove(this);
        }


        if (L_WidenSpreadsValue != null)
        {
            if (!L_WidenSpreadsValue.LiveLeads.Contains(this))
            {
                L_WidenSpreadsValue.LiveLeads.Add(this);
            }

            if (FK_WidenSpreadsID != L_WidenSpreadsValue.PK_WidenSpreadsID)

            {
                FK_WidenSpreadsID = L_WidenSpreadsValue.PK_WidenSpreadsID;
            }

        }

        else if (!_settingFK)

        {

            FK_WidenSpreadsID = null;

        }

    }


    private void FixupTradingPlatform(TradingPlatform previousValue)
    {

        if (previousValue != null && previousValue.LiveLeads.Contains(this))
        {
            previousValue.LiveLeads.Remove(this);
        }


        if (TradingPlatform != null)
        {
            if (!TradingPlatform.LiveLeads.Contains(this))
            {
                TradingPlatform.LiveLeads.Add(this);
            }

            if (FK_PlatformID != TradingPlatform.PK_TradingPlatformID)

            {
                FK_PlatformID = TradingPlatform.PK_TradingPlatformID;
            }

        }

        else if (!_settingFK)

        {

            FK_PlatformID = null;

        }

    }


    private void FixupAgent(Agent previousValue)
    {

        if (previousValue != null && previousValue.LiveLeads.Contains(this))
        {
            previousValue.LiveLeads.Remove(this);
        }


        if (Agent != null)
        {
            if (!Agent.LiveLeads.Contains(this))
            {
                Agent.LiveLeads.Add(this);
            }

            if (FK_AgentID != Agent.PK_AgentID)

            {
                FK_AgentID = Agent.PK_AgentID;
            }

        }

        else if (!_settingFK)

        {

            FK_AgentID = null;

        }

    }


    private void FixupOrganization(Organization previousValue)
    {

        if (previousValue != null && previousValue.LiveLeads.Contains(this))
        {
            previousValue.LiveLeads.Remove(this);
        }


        if (Organization != null)
        {
            if (!Organization.LiveLeads.Contains(this))
            {
                Organization.LiveLeads.Add(this);
            }

            if (FK_OrganizationID != Organization.PK_OrganizationID)

            {
                FK_OrganizationID = Organization.PK_OrganizationID;
            }

        }

    }

        #endregion

    
}

}
