
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;


namespace CurrentDesk.Models
{

public partial class L_CommissionIncrementValue
{
    #region Primitive Properties
    

    public virtual int PK_CommissionIncrementID
    {

        get;
        set;

    }


    public virtual string CommissionIncrementValue
    {

        get;
        set;

    }

        #endregion

        #region Navigation Properties
    


    public virtual ICollection<AssetManager> AssetManagers
    {
        get
        {
            if (_assetManagers == null)
            {

                var newCollection = new FixupCollection<AssetManager>();
                newCollection.CollectionChanged += FixupAssetManagers;
                _assetManagers = newCollection;

            }
            return _assetManagers;
        }
        set
        {

            if (!ReferenceEquals(_assetManagers, value))
            {
                var previousValue = _assetManagers as FixupCollection<AssetManager>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupAssetManagers;
                }
                _assetManagers = value;
                var newValue = value as FixupCollection<AssetManager>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupAssetManagers;
                }
            }

        }
    }
    private ICollection<AssetManager> _assetManagers;



    public virtual ICollection<IntroducingBroker> IntroducingBrokers
    {
        get
        {
            if (_introducingBrokers == null)
            {

                var newCollection = new FixupCollection<IntroducingBroker>();
                newCollection.CollectionChanged += FixupIntroducingBrokers;
                _introducingBrokers = newCollection;

            }
            return _introducingBrokers;
        }
        set
        {

            if (!ReferenceEquals(_introducingBrokers, value))
            {
                var previousValue = _introducingBrokers as FixupCollection<IntroducingBroker>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupIntroducingBrokers;
                }
                _introducingBrokers = value;
                var newValue = value as FixupCollection<IntroducingBroker>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupIntroducingBrokers;
                }
            }

        }
    }
    private ICollection<IntroducingBroker> _introducingBrokers;



    public virtual ICollection<LiveLead> LiveLeads
    {
        get
        {
            if (_liveLeads == null)
            {

                var newCollection = new FixupCollection<LiveLead>();
                newCollection.CollectionChanged += FixupLiveLeads;
                _liveLeads = newCollection;

            }
            return _liveLeads;
        }
        set
        {

            if (!ReferenceEquals(_liveLeads, value))
            {
                var previousValue = _liveLeads as FixupCollection<LiveLead>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupLiveLeads;
                }
                _liveLeads = value;
                var newValue = value as FixupCollection<LiveLead>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupLiveLeads;
                }
            }

        }
    }
    private ICollection<LiveLead> _liveLeads;



    public virtual ICollection<PartnerCommission> PartnerCommissions
    {
        get
        {
            if (_partnerCommissions == null)
            {

                var newCollection = new FixupCollection<PartnerCommission>();
                newCollection.CollectionChanged += FixupPartnerCommissions;
                _partnerCommissions = newCollection;

            }
            return _partnerCommissions;
        }
        set
        {

            if (!ReferenceEquals(_partnerCommissions, value))
            {
                var previousValue = _partnerCommissions as FixupCollection<PartnerCommission>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupPartnerCommissions;
                }
                _partnerCommissions = value;
                var newValue = value as FixupCollection<PartnerCommission>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupPartnerCommissions;
                }
            }

        }
    }
    private ICollection<PartnerCommission> _partnerCommissions;

        #endregion

        #region Association Fixup
    

    private void FixupAssetManagers(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (AssetManager item in e.NewItems)
            {

                item.L_CommissionIncrementValue = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (AssetManager item in e.OldItems)
            {

                if (ReferenceEquals(item.L_CommissionIncrementValue, this))
                {
                    item.L_CommissionIncrementValue = null;
                }

            }
        }
    }


    private void FixupIntroducingBrokers(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (IntroducingBroker item in e.NewItems)
            {

                item.L_CommissionIncrementValue = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (IntroducingBroker item in e.OldItems)
            {

                if (ReferenceEquals(item.L_CommissionIncrementValue, this))
                {
                    item.L_CommissionIncrementValue = null;
                }

            }
        }
    }


    private void FixupLiveLeads(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (LiveLead item in e.NewItems)
            {

                item.L_CommissionIncrementValue = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (LiveLead item in e.OldItems)
            {

                if (ReferenceEquals(item.L_CommissionIncrementValue, this))
                {
                    item.L_CommissionIncrementValue = null;
                }

            }
        }
    }


    private void FixupPartnerCommissions(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (PartnerCommission item in e.NewItems)
            {

                item.L_CommissionIncrementValue = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (PartnerCommission item in e.OldItems)
            {

                if (ReferenceEquals(item.L_CommissionIncrementValue, this))
                {
                    item.L_CommissionIncrementValue = null;
                }

            }
        }
    }

        #endregion

    
}

}
