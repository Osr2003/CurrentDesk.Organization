
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;


namespace CurrentDesk.Models
{

public partial class Organization
{
    #region Primitive Properties
    

    public virtual int PK_OrganizationID
    {

        get;
        set;

    }


    public virtual string OrganizationName
    {

        get;
        set;

    }


    public virtual string OrganizationKey
    {

        get;
        set;

    }

        #endregion

        #region Navigation Properties
    


    public virtual ICollection<AccountCurrency> AccountCurrencies
    {
        get
        {
            if (_accountCurrencies == null)
            {

                var newCollection = new FixupCollection<AccountCurrency>();
                newCollection.CollectionChanged += FixupAccountCurrencies;
                _accountCurrencies = newCollection;

            }
            return _accountCurrencies;
        }
        set
        {

            if (!ReferenceEquals(_accountCurrencies, value))
            {
                var previousValue = _accountCurrencies as FixupCollection<AccountCurrency>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupAccountCurrencies;
                }
                _accountCurrencies = value;
                var newValue = value as FixupCollection<AccountCurrency>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupAccountCurrencies;
                }
            }

        }
    }
    private ICollection<AccountCurrency> _accountCurrencies;



    public virtual ICollection<AccountType> AccountTypes
    {
        get
        {
            if (_accountTypes == null)
            {

                var newCollection = new FixupCollection<AccountType>();
                newCollection.CollectionChanged += FixupAccountTypes;
                _accountTypes = newCollection;

            }
            return _accountTypes;
        }
        set
        {

            if (!ReferenceEquals(_accountTypes, value))
            {
                var previousValue = _accountTypes as FixupCollection<AccountType>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupAccountTypes;
                }
                _accountTypes = value;
                var newValue = value as FixupCollection<AccountType>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupAccountTypes;
                }
            }

        }
    }
    private ICollection<AccountType> _accountTypes;



    public virtual ICollection<TradingPlatform> TradingPlatforms
    {
        get
        {
            if (_tradingPlatforms == null)
            {

                var newCollection = new FixupCollection<TradingPlatform>();
                newCollection.CollectionChanged += FixupTradingPlatforms;
                _tradingPlatforms = newCollection;

            }
            return _tradingPlatforms;
        }
        set
        {

            if (!ReferenceEquals(_tradingPlatforms, value))
            {
                var previousValue = _tradingPlatforms as FixupCollection<TradingPlatform>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupTradingPlatforms;
                }
                _tradingPlatforms = value;
                var newValue = value as FixupCollection<TradingPlatform>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupTradingPlatforms;
                }
            }

        }
    }
    private ICollection<TradingPlatform> _tradingPlatforms;



    public virtual ICollection<DemoLead> DemoLeads
    {
        get
        {
            if (_demoLeads == null)
            {

                var newCollection = new FixupCollection<DemoLead>();
                newCollection.CollectionChanged += FixupDemoLeads;
                _demoLeads = newCollection;

            }
            return _demoLeads;
        }
        set
        {

            if (!ReferenceEquals(_demoLeads, value))
            {
                var previousValue = _demoLeads as FixupCollection<DemoLead>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupDemoLeads;
                }
                _demoLeads = value;
                var newValue = value as FixupCollection<DemoLead>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupDemoLeads;
                }
            }

        }
    }
    private ICollection<DemoLead> _demoLeads;



    public virtual ICollection<Client> Clients
    {
        get
        {
            if (_clients == null)
            {

                var newCollection = new FixupCollection<Client>();
                newCollection.CollectionChanged += FixupClients;
                _clients = newCollection;

            }
            return _clients;
        }
        set
        {

            if (!ReferenceEquals(_clients, value))
            {
                var previousValue = _clients as FixupCollection<Client>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupClients;
                }
                _clients = value;
                var newValue = value as FixupCollection<Client>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupClients;
                }
            }

        }
    }
    private ICollection<Client> _clients;



    public virtual ICollection<LiveLead> LiveLeads
    {
        get
        {
            if (_liveLeads == null)
            {

                var newCollection = new FixupCollection<LiveLead>();
                newCollection.CollectionChanged += FixupLiveLeads;
                _liveLeads = newCollection;

            }
            return _liveLeads;
        }
        set
        {

            if (!ReferenceEquals(_liveLeads, value))
            {
                var previousValue = _liveLeads as FixupCollection<LiveLead>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupLiveLeads;
                }
                _liveLeads = value;
                var newValue = value as FixupCollection<LiveLead>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupLiveLeads;
                }
            }

        }
    }
    private ICollection<LiveLead> _liveLeads;



    public virtual ICollection<L_IDInformationType> L_IDInformationType
    {
        get
        {
            if (_l_IDInformationType == null)
            {

                var newCollection = new FixupCollection<L_IDInformationType>();
                newCollection.CollectionChanged += FixupL_IDInformationType;
                _l_IDInformationType = newCollection;

            }
            return _l_IDInformationType;
        }
        set
        {

            if (!ReferenceEquals(_l_IDInformationType, value))
            {
                var previousValue = _l_IDInformationType as FixupCollection<L_IDInformationType>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupL_IDInformationType;
                }
                _l_IDInformationType = value;
                var newValue = value as FixupCollection<L_IDInformationType>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupL_IDInformationType;
                }
            }

        }
    }
    private ICollection<L_IDInformationType> _l_IDInformationType;



    public virtual ICollection<L_RecievingBank> L_RecievingBank
    {
        get
        {
            if (_l_RecievingBank == null)
            {

                var newCollection = new FixupCollection<L_RecievingBank>();
                newCollection.CollectionChanged += FixupL_RecievingBank;
                _l_RecievingBank = newCollection;

            }
            return _l_RecievingBank;
        }
        set
        {

            if (!ReferenceEquals(_l_RecievingBank, value))
            {
                var previousValue = _l_RecievingBank as FixupCollection<L_RecievingBank>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupL_RecievingBank;
                }
                _l_RecievingBank = value;
                var newValue = value as FixupCollection<L_RecievingBank>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupL_RecievingBank;
                }
            }

        }
    }
    private ICollection<L_RecievingBank> _l_RecievingBank;



    public virtual ICollection<IntroducingBroker> IntroducingBrokers
    {
        get
        {
            if (_introducingBrokers == null)
            {

                var newCollection = new FixupCollection<IntroducingBroker>();
                newCollection.CollectionChanged += FixupIntroducingBrokers;
                _introducingBrokers = newCollection;

            }
            return _introducingBrokers;
        }
        set
        {

            if (!ReferenceEquals(_introducingBrokers, value))
            {
                var previousValue = _introducingBrokers as FixupCollection<IntroducingBroker>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupIntroducingBrokers;
                }
                _introducingBrokers = value;
                var newValue = value as FixupCollection<IntroducingBroker>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupIntroducingBrokers;
                }
            }

        }
    }
    private ICollection<IntroducingBroker> _introducingBrokers;



    public virtual ICollection<Client_Account> Client_Account
    {
        get
        {
            if (_client_Account == null)
            {

                var newCollection = new FixupCollection<Client_Account>();
                newCollection.CollectionChanged += FixupClient_Account;
                _client_Account = newCollection;

            }
            return _client_Account;
        }
        set
        {

            if (!ReferenceEquals(_client_Account, value))
            {
                var previousValue = _client_Account as FixupCollection<Client_Account>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupClient_Account;
                }
                _client_Account = value;
                var newValue = value as FixupCollection<Client_Account>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupClient_Account;
                }
            }

        }
    }
    private ICollection<Client_Account> _client_Account;



    public virtual ICollection<AccountCreationRule> AccountCreationRules
    {
        get
        {
            if (_accountCreationRules == null)
            {

                var newCollection = new FixupCollection<AccountCreationRule>();
                newCollection.CollectionChanged += FixupAccountCreationRules;
                _accountCreationRules = newCollection;

            }
            return _accountCreationRules;
        }
        set
        {

            if (!ReferenceEquals(_accountCreationRules, value))
            {
                var previousValue = _accountCreationRules as FixupCollection<AccountCreationRule>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupAccountCreationRules;
                }
                _accountCreationRules = value;
                var newValue = value as FixupCollection<AccountCreationRule>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupAccountCreationRules;
                }
            }

        }
    }
    private ICollection<AccountCreationRule> _accountCreationRules;



    public virtual ICollection<User> Users
    {
        get
        {
            if (_users == null)
            {

                var newCollection = new FixupCollection<User>();
                newCollection.CollectionChanged += FixupUsers;
                _users = newCollection;

            }
            return _users;
        }
        set
        {

            if (!ReferenceEquals(_users, value))
            {
                var previousValue = _users as FixupCollection<User>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupUsers;
                }
                _users = value;
                var newValue = value as FixupCollection<User>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupUsers;
                }
            }

        }
    }
    private ICollection<User> _users;



    public virtual ICollection<TransactionSetting> TransactionSettings
    {
        get
        {
            if (_transactionSettings == null)
            {

                var newCollection = new FixupCollection<TransactionSetting>();
                newCollection.CollectionChanged += FixupTransactionSettings;
                _transactionSettings = newCollection;

            }
            return _transactionSettings;
        }
        set
        {

            if (!ReferenceEquals(_transactionSettings, value))
            {
                var previousValue = _transactionSettings as FixupCollection<TransactionSetting>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupTransactionSettings;
                }
                _transactionSettings = value;
                var newValue = value as FixupCollection<TransactionSetting>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupTransactionSettings;
                }
            }

        }
    }
    private ICollection<TransactionSetting> _transactionSettings;



    public virtual ICollection<FundingSource> FundingSources
    {
        get
        {
            if (_fundingSources == null)
            {

                var newCollection = new FixupCollection<FundingSource>();
                newCollection.CollectionChanged += FixupFundingSources;
                _fundingSources = newCollection;

            }
            return _fundingSources;
        }
        set
        {

            if (!ReferenceEquals(_fundingSources, value))
            {
                var previousValue = _fundingSources as FixupCollection<FundingSource>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupFundingSources;
                }
                _fundingSources = value;
                var newValue = value as FixupCollection<FundingSource>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupFundingSources;
                }
            }

        }
    }
    private ICollection<FundingSource> _fundingSources;



    public virtual ICollection<AdminTransaction> AdminTransactions
    {
        get
        {
            if (_adminTransactions == null)
            {

                var newCollection = new FixupCollection<AdminTransaction>();
                newCollection.CollectionChanged += FixupAdminTransactions;
                _adminTransactions = newCollection;

            }
            return _adminTransactions;
        }
        set
        {

            if (!ReferenceEquals(_adminTransactions, value))
            {
                var previousValue = _adminTransactions as FixupCollection<AdminTransaction>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupAdminTransactions;
                }
                _adminTransactions = value;
                var newValue = value as FixupCollection<AdminTransaction>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupAdminTransactions;
                }
            }

        }
    }
    private ICollection<AdminTransaction> _adminTransactions;



    public virtual ICollection<Transaction> Transactions
    {
        get
        {
            if (_transactions == null)
            {

                var newCollection = new FixupCollection<Transaction>();
                newCollection.CollectionChanged += FixupTransactions;
                _transactions = newCollection;

            }
            return _transactions;
        }
        set
        {

            if (!ReferenceEquals(_transactions, value))
            {
                var previousValue = _transactions as FixupCollection<Transaction>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupTransactions;
                }
                _transactions = value;
                var newValue = value as FixupCollection<Transaction>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupTransactions;
                }
            }

        }
    }
    private ICollection<Transaction> _transactions;



    public virtual ICollection<TransferLog> TransferLogs
    {
        get
        {
            if (_transferLogs == null)
            {

                var newCollection = new FixupCollection<TransferLog>();
                newCollection.CollectionChanged += FixupTransferLogs;
                _transferLogs = newCollection;

            }
            return _transferLogs;
        }
        set
        {

            if (!ReferenceEquals(_transferLogs, value))
            {
                var previousValue = _transferLogs as FixupCollection<TransferLog>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupTransferLogs;
                }
                _transferLogs = value;
                var newValue = value as FixupCollection<TransferLog>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupTransferLogs;
                }
            }

        }
    }
    private ICollection<TransferLog> _transferLogs;

        #endregion

        #region Association Fixup
    

    private void FixupAccountCurrencies(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (AccountCurrency item in e.NewItems)
            {

                item.Organization = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (AccountCurrency item in e.OldItems)
            {

                if (ReferenceEquals(item.Organization, this))
                {
                    item.Organization = null;
                }

            }
        }
    }


    private void FixupAccountTypes(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (AccountType item in e.NewItems)
            {

                item.Organization = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (AccountType item in e.OldItems)
            {

                if (ReferenceEquals(item.Organization, this))
                {
                    item.Organization = null;
                }

            }
        }
    }


    private void FixupTradingPlatforms(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (TradingPlatform item in e.NewItems)
            {

                item.Organization = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (TradingPlatform item in e.OldItems)
            {

                if (ReferenceEquals(item.Organization, this))
                {
                    item.Organization = null;
                }

            }
        }
    }


    private void FixupDemoLeads(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (DemoLead item in e.NewItems)
            {

                item.Organization = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (DemoLead item in e.OldItems)
            {

                if (ReferenceEquals(item.Organization, this))
                {
                    item.Organization = null;
                }

            }
        }
    }


    private void FixupClients(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Client item in e.NewItems)
            {

                item.Organization = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (Client item in e.OldItems)
            {

                if (ReferenceEquals(item.Organization, this))
                {
                    item.Organization = null;
                }

            }
        }
    }


    private void FixupLiveLeads(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (LiveLead item in e.NewItems)
            {

                item.Organization = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (LiveLead item in e.OldItems)
            {

                if (ReferenceEquals(item.Organization, this))
                {
                    item.Organization = null;
                }

            }
        }
    }


    private void FixupL_IDInformationType(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (L_IDInformationType item in e.NewItems)
            {

                item.Organization = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (L_IDInformationType item in e.OldItems)
            {

                if (ReferenceEquals(item.Organization, this))
                {
                    item.Organization = null;
                }

            }
        }
    }


    private void FixupL_RecievingBank(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (L_RecievingBank item in e.NewItems)
            {

                item.Organization = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (L_RecievingBank item in e.OldItems)
            {

                if (ReferenceEquals(item.Organization, this))
                {
                    item.Organization = null;
                }

            }
        }
    }


    private void FixupIntroducingBrokers(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (IntroducingBroker item in e.NewItems)
            {

                item.Organization = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (IntroducingBroker item in e.OldItems)
            {

                if (ReferenceEquals(item.Organization, this))
                {
                    item.Organization = null;
                }

            }
        }
    }


    private void FixupClient_Account(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Client_Account item in e.NewItems)
            {

                item.Organization = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (Client_Account item in e.OldItems)
            {

                if (ReferenceEquals(item.Organization, this))
                {
                    item.Organization = null;
                }

            }
        }
    }


    private void FixupAccountCreationRules(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (AccountCreationRule item in e.NewItems)
            {

                item.Organization = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (AccountCreationRule item in e.OldItems)
            {

                if (ReferenceEquals(item.Organization, this))
                {
                    item.Organization = null;
                }

            }
        }
    }


    private void FixupUsers(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (User item in e.NewItems)
            {

                item.Organization = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (User item in e.OldItems)
            {

                if (ReferenceEquals(item.Organization, this))
                {
                    item.Organization = null;
                }

            }
        }
    }


    private void FixupTransactionSettings(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (TransactionSetting item in e.NewItems)
            {

                item.Organization = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (TransactionSetting item in e.OldItems)
            {

                if (ReferenceEquals(item.Organization, this))
                {
                    item.Organization = null;
                }

            }
        }
    }


    private void FixupFundingSources(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (FundingSource item in e.NewItems)
            {

                item.Organization = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (FundingSource item in e.OldItems)
            {

                if (ReferenceEquals(item.Organization, this))
                {
                    item.Organization = null;
                }

            }
        }
    }


    private void FixupAdminTransactions(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (AdminTransaction item in e.NewItems)
            {

                item.Organization = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (AdminTransaction item in e.OldItems)
            {

                if (ReferenceEquals(item.Organization, this))
                {
                    item.Organization = null;
                }

            }
        }
    }


    private void FixupTransactions(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Transaction item in e.NewItems)
            {

                item.Organization = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (Transaction item in e.OldItems)
            {

                if (ReferenceEquals(item.Organization, this))
                {
                    item.Organization = null;
                }

            }
        }
    }


    private void FixupTransferLogs(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (TransferLog item in e.NewItems)
            {

                item.Organization = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (TransferLog item in e.OldItems)
            {

                if (ReferenceEquals(item.Organization, this))
                {
                    item.Organization = null;
                }

            }
        }
    }

        #endregion

    
}

}
