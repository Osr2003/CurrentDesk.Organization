
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;


namespace CurrentDesk.Models
{

public partial class L_AccountCode
{
    #region Primitive Properties
    

    public virtual int PK_AccountID
    {

        get { return _pK_AccountID; }
        set
        {

            if (_pK_AccountID != value)

            {

                if (L_AccountCode2 != null && L_AccountCode2.PK_AccountID != value)

                {

                    L_AccountCode2 = null;

                }

                _pK_AccountID = value;
            }

        }

    }

    private int _pK_AccountID;


    public virtual int FK_AccountFormTypeID
    {

        get { return _fK_AccountFormTypeID; }
        set
        {

            if (_fK_AccountFormTypeID != value)

            {

                if (L_AccountFormType != null && L_AccountFormType.PK_AccountFormID != value)

                {

                    L_AccountFormType = null;

                }

                _fK_AccountFormTypeID = value;
            }

        }

    }

    private int _fK_AccountFormTypeID;


    public virtual string AccountName
    {

        get;
        set;

    }

        #endregion

        #region Navigation Properties
    


    public virtual ICollection<AssetManager> AssetManagers
    {
        get
        {
            if (_assetManagers == null)
            {

                var newCollection = new FixupCollection<AssetManager>();
                newCollection.CollectionChanged += FixupAssetManagers;
                _assetManagers = newCollection;

            }
            return _assetManagers;
        }
        set
        {

            if (!ReferenceEquals(_assetManagers, value))
            {
                var previousValue = _assetManagers as FixupCollection<AssetManager>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupAssetManagers;
                }
                _assetManagers = value;
                var newValue = value as FixupCollection<AssetManager>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupAssetManagers;
                }
            }

        }
    }
    private ICollection<AssetManager> _assetManagers;



    public virtual ICollection<IntroducingBroker> IntroducingBrokers
    {
        get
        {
            if (_introducingBrokers == null)
            {

                var newCollection = new FixupCollection<IntroducingBroker>();
                newCollection.CollectionChanged += FixupIntroducingBrokers;
                _introducingBrokers = newCollection;

            }
            return _introducingBrokers;
        }
        set
        {

            if (!ReferenceEquals(_introducingBrokers, value))
            {
                var previousValue = _introducingBrokers as FixupCollection<IntroducingBroker>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupIntroducingBrokers;
                }
                _introducingBrokers = value;
                var newValue = value as FixupCollection<IntroducingBroker>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupIntroducingBrokers;
                }
            }

        }
    }
    private ICollection<IntroducingBroker> _introducingBrokers;



    public virtual L_AccountFormType L_AccountFormType
    {

        get { return _l_AccountFormType; }
        set
        {
            if (!ReferenceEquals(_l_AccountFormType, value))
            {
                var previousValue = _l_AccountFormType;
                _l_AccountFormType = value;
                FixupL_AccountFormType(previousValue);
            }
        }
    }
    private L_AccountFormType _l_AccountFormType;



    public virtual ICollection<LiveLead> LiveLeads
    {
        get
        {
            if (_liveLeads == null)
            {

                var newCollection = new FixupCollection<LiveLead>();
                newCollection.CollectionChanged += FixupLiveLeads;
                _liveLeads = newCollection;

            }
            return _liveLeads;
        }
        set
        {

            if (!ReferenceEquals(_liveLeads, value))
            {
                var previousValue = _liveLeads as FixupCollection<LiveLead>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupLiveLeads;
                }
                _liveLeads = value;
                var newValue = value as FixupCollection<LiveLead>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupLiveLeads;
                }
            }

        }
    }
    private ICollection<LiveLead> _liveLeads;



    public virtual ICollection<Client> Clients
    {
        get
        {
            if (_clients == null)
            {

                var newCollection = new FixupCollection<Client>();
                newCollection.CollectionChanged += FixupClients;
                _clients = newCollection;

            }
            return _clients;
        }
        set
        {

            if (!ReferenceEquals(_clients, value))
            {
                var previousValue = _clients as FixupCollection<Client>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupClients;
                }
                _clients = value;
                var newValue = value as FixupCollection<Client>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupClients;
                }
            }

        }
    }
    private ICollection<Client> _clients;



    public virtual ICollection<DemoLead> DemoLeads
    {
        get
        {
            if (_demoLeads == null)
            {

                var newCollection = new FixupCollection<DemoLead>();
                newCollection.CollectionChanged += FixupDemoLeads;
                _demoLeads = newCollection;

            }
            return _demoLeads;
        }
        set
        {

            if (!ReferenceEquals(_demoLeads, value))
            {
                var previousValue = _demoLeads as FixupCollection<DemoLead>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupDemoLeads;
                }
                _demoLeads = value;
                var newValue = value as FixupCollection<DemoLead>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupDemoLeads;
                }
            }

        }
    }
    private ICollection<DemoLead> _demoLeads;



    public virtual L_AccountCode L_AccountCode1
    {

        get { return _l_AccountCode1; }
        set
        {
            if (!ReferenceEquals(_l_AccountCode1, value))
            {
                var previousValue = _l_AccountCode1;
                _l_AccountCode1 = value;
                FixupL_AccountCode1(previousValue);
            }
        }
    }
    private L_AccountCode _l_AccountCode1;



    public virtual L_AccountCode L_AccountCode2
    {

        get { return _l_AccountCode2; }
        set
        {
            if (!ReferenceEquals(_l_AccountCode2, value))
            {
                var previousValue = _l_AccountCode2;
                _l_AccountCode2 = value;
                FixupL_AccountCode2(previousValue);
            }
        }
    }
    private L_AccountCode _l_AccountCode2;

        #endregion

        #region Association Fixup
    

    private void FixupL_AccountFormType(L_AccountFormType previousValue)
    {

        if (previousValue != null && previousValue.L_AccountCode.Contains(this))
        {
            previousValue.L_AccountCode.Remove(this);
        }


        if (L_AccountFormType != null)
        {
            if (!L_AccountFormType.L_AccountCode.Contains(this))
            {
                L_AccountFormType.L_AccountCode.Add(this);
            }

            if (FK_AccountFormTypeID != L_AccountFormType.PK_AccountFormID)

            {
                FK_AccountFormTypeID = L_AccountFormType.PK_AccountFormID;
            }

        }

    }


    private void FixupL_AccountCode1(L_AccountCode previousValue)
    {

        if (previousValue != null && ReferenceEquals(previousValue.L_AccountCode2, this))
        {
            previousValue.L_AccountCode2 = null;
        }


        if (L_AccountCode1 != null)
        {
            L_AccountCode1.L_AccountCode2 = this;

        }

    }


    private void FixupL_AccountCode2(L_AccountCode previousValue)
    {

        if (previousValue != null && ReferenceEquals(previousValue.L_AccountCode1, this))
        {
            previousValue.L_AccountCode1 = null;
        }


        if (L_AccountCode2 != null)
        {
            L_AccountCode2.L_AccountCode1 = this;

            if (PK_AccountID != L_AccountCode2.PK_AccountID)

            {
                PK_AccountID = L_AccountCode2.PK_AccountID;
            }

        }

    }


    private void FixupAssetManagers(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (AssetManager item in e.NewItems)
            {

                item.L_AccountCode = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (AssetManager item in e.OldItems)
            {

                if (ReferenceEquals(item.L_AccountCode, this))
                {
                    item.L_AccountCode = null;
                }

            }
        }
    }


    private void FixupIntroducingBrokers(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (IntroducingBroker item in e.NewItems)
            {

                item.L_AccountCode = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (IntroducingBroker item in e.OldItems)
            {

                if (ReferenceEquals(item.L_AccountCode, this))
                {
                    item.L_AccountCode = null;
                }

            }
        }
    }


    private void FixupLiveLeads(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (LiveLead item in e.NewItems)
            {

                item.L_AccountCode = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (LiveLead item in e.OldItems)
            {

                if (ReferenceEquals(item.L_AccountCode, this))
                {
                    item.L_AccountCode = null;
                }

            }
        }
    }


    private void FixupClients(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Client item in e.NewItems)
            {

                item.L_AccountCode = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (Client item in e.OldItems)
            {

                if (ReferenceEquals(item.L_AccountCode, this))
                {
                    item.L_AccountCode = null;
                }

            }
        }
    }


    private void FixupDemoLeads(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (DemoLead item in e.NewItems)
            {

                item.L_AccountCode = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (DemoLead item in e.OldItems)
            {

                if (ReferenceEquals(item.L_AccountCode, this))
                {
                    item.L_AccountCode = null;
                }

            }
        }
    }

        #endregion

    
}

}
