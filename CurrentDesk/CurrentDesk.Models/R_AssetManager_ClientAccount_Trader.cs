
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;


namespace CurrentDesk.Models
{

public partial class R_AssetManager_ClientAccount_Trader
{
    #region Primitive Properties
    

    public virtual int PK_AMTraderClientRelnID
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_AssetManagerID
    {

        get { return _fK_AssetManagerID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_AssetManagerID != value)

            {

                if (AssetManager != null && AssetManager.PK_AssetManagerID != value)

                {

                    AssetManager = null;

                }

                _fK_AssetManagerID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_AssetManagerID;


    public virtual Nullable<int> FK_ClientAccountID
    {

        get { return _fK_ClientAccountID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_ClientAccountID != value)

            {

                if (Client_Account1 != null && Client_Account1.PK_ClientAccountID != value)

                {

                    Client_Account1 = null;

                }

                _fK_ClientAccountID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_ClientAccountID;


    public virtual Nullable<int> FK_ClientID
    {

        get { return _fK_ClientID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_ClientID != value)

            {

                if (Trader != null && Trader.PK_TraderID != value)

                {

                    Trader = null;

                }

                _fK_ClientID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_ClientID;


    public virtual Nullable<int> FK_AssetManagerAccID
    {

        get { return _fK_AssetManagerAccID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_AssetManagerAccID != value)

            {

                if (Client_Account != null && Client_Account.PK_ClientAccountID != value)

                {

                    Client_Account = null;

                }

                _fK_AssetManagerAccID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_AssetManagerAccID;

        #endregion

        #region Navigation Properties
    


    public virtual AssetManager AssetManager
    {

        get { return _assetManager; }
        set
        {
            if (!ReferenceEquals(_assetManager, value))
            {
                var previousValue = _assetManager;
                _assetManager = value;
                FixupAssetManager(previousValue);
            }
        }
    }
    private AssetManager _assetManager;



    public virtual Trader Trader
    {

        get { return _trader; }
        set
        {
            if (!ReferenceEquals(_trader, value))
            {
                var previousValue = _trader;
                _trader = value;
                FixupTrader(previousValue);
            }
        }
    }
    private Trader _trader;



    public virtual Client_Account Client_Account
    {

        get { return _client_Account; }
        set
        {
            if (!ReferenceEquals(_client_Account, value))
            {
                var previousValue = _client_Account;
                _client_Account = value;
                FixupClient_Account(previousValue);
            }
        }
    }
    private Client_Account _client_Account;



    public virtual Client_Account Client_Account1
    {

        get { return _client_Account1; }
        set
        {
            if (!ReferenceEquals(_client_Account1, value))
            {
                var previousValue = _client_Account1;
                _client_Account1 = value;
                FixupClient_Account1(previousValue);
            }
        }
    }
    private Client_Account _client_Account1;

        #endregion

        #region Association Fixup
    

    private bool _settingFK = false;


    private void FixupAssetManager(AssetManager previousValue)
    {

        if (previousValue != null && previousValue.R_AssetManager_ClientAccount_Trader.Contains(this))
        {
            previousValue.R_AssetManager_ClientAccount_Trader.Remove(this);
        }


        if (AssetManager != null)
        {
            if (!AssetManager.R_AssetManager_ClientAccount_Trader.Contains(this))
            {
                AssetManager.R_AssetManager_ClientAccount_Trader.Add(this);
            }

            if (FK_AssetManagerID != AssetManager.PK_AssetManagerID)

            {
                FK_AssetManagerID = AssetManager.PK_AssetManagerID;
            }

        }

        else if (!_settingFK)

        {

            FK_AssetManagerID = null;

        }

    }


    private void FixupTrader(Trader previousValue)
    {

        if (previousValue != null && previousValue.R_AssetManager_ClientAccount_Trader.Contains(this))
        {
            previousValue.R_AssetManager_ClientAccount_Trader.Remove(this);
        }


        if (Trader != null)
        {
            if (!Trader.R_AssetManager_ClientAccount_Trader.Contains(this))
            {
                Trader.R_AssetManager_ClientAccount_Trader.Add(this);
            }

            if (FK_ClientID != Trader.PK_TraderID)

            {
                FK_ClientID = Trader.PK_TraderID;
            }

        }

        else if (!_settingFK)

        {

            FK_ClientID = null;

        }

    }


    private void FixupClient_Account(Client_Account previousValue)
    {

        if (previousValue != null && previousValue.R_AssetManager_ClientAccount_Trader.Contains(this))
        {
            previousValue.R_AssetManager_ClientAccount_Trader.Remove(this);
        }


        if (Client_Account != null)
        {
            if (!Client_Account.R_AssetManager_ClientAccount_Trader.Contains(this))
            {
                Client_Account.R_AssetManager_ClientAccount_Trader.Add(this);
            }

            if (FK_AssetManagerAccID != Client_Account.PK_ClientAccountID)

            {
                FK_AssetManagerAccID = Client_Account.PK_ClientAccountID;
            }

        }

        else if (!_settingFK)

        {

            FK_AssetManagerAccID = null;

        }

    }


    private void FixupClient_Account1(Client_Account previousValue)
    {

        if (previousValue != null && previousValue.R_AssetManager_ClientAccount_Trader1.Contains(this))
        {
            previousValue.R_AssetManager_ClientAccount_Trader1.Remove(this);
        }


        if (Client_Account1 != null)
        {
            if (!Client_Account1.R_AssetManager_ClientAccount_Trader1.Contains(this))
            {
                Client_Account1.R_AssetManager_ClientAccount_Trader1.Add(this);
            }

            if (FK_ClientAccountID != Client_Account1.PK_ClientAccountID)

            {
                FK_ClientAccountID = Client_Account1.PK_ClientAccountID;
            }

        }

        else if (!_settingFK)

        {

            FK_ClientAccountID = null;

        }

    }

        #endregion

    
}

}
