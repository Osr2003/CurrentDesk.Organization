
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;


namespace CurrentDesk.Models
{

public partial class AccountActivity
{
    #region Primitive Properties
    

    public virtual int PK_AccountActivityID
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_AccActivityTypeID
    {

        get { return _fK_AccActivityTypeID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_AccActivityTypeID != value)

            {

                if (L_AccountActivityType != null && L_AccountActivityType.PK_AccActivityTypeID != value)

                {

                    L_AccountActivityType = null;

                }

                _fK_AccActivityTypeID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_AccActivityTypeID;


    public virtual Nullable<int> Currency
    {

        get { return _currency; }
        set
        {

            try
            {
                _settingFK = true;

            if (_currency != value)

            {

                if (L_CurrencyValue != null && L_CurrencyValue.PK_CurrencyValueID != value)

                {

                    L_CurrencyValue = null;

                }

                _currency = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _currency;


    public virtual string AccountType
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_UserActivityID
    {

        get { return _fK_UserActivityID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_UserActivityID != value)

            {

                if (UserActivity != null && UserActivity.PK_UserActivityID != value)

                {

                    UserActivity = null;

                }

                _fK_UserActivityID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_UserActivityID;


    public virtual Nullable<int> FK_ClientAccountID
    {

        get { return _fK_ClientAccountID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_ClientAccountID != value)

            {

                if (Client_Account != null && Client_Account.PK_ClientAccountID != value)

                {

                    Client_Account = null;

                }

                _fK_ClientAccountID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_ClientAccountID;

        #endregion

        #region Navigation Properties
    


    public virtual L_CurrencyValue L_CurrencyValue
    {

        get { return _l_CurrencyValue; }
        set
        {
            if (!ReferenceEquals(_l_CurrencyValue, value))
            {
                var previousValue = _l_CurrencyValue;
                _l_CurrencyValue = value;
                FixupL_CurrencyValue(previousValue);
            }
        }
    }
    private L_CurrencyValue _l_CurrencyValue;



    public virtual L_AccountActivityType L_AccountActivityType
    {

        get { return _l_AccountActivityType; }
        set
        {
            if (!ReferenceEquals(_l_AccountActivityType, value))
            {
                var previousValue = _l_AccountActivityType;
                _l_AccountActivityType = value;
                FixupL_AccountActivityType(previousValue);
            }
        }
    }
    private L_AccountActivityType _l_AccountActivityType;



    public virtual UserActivity UserActivity
    {

        get { return _userActivity; }
        set
        {
            if (!ReferenceEquals(_userActivity, value))
            {
                var previousValue = _userActivity;
                _userActivity = value;
                FixupUserActivity(previousValue);
            }
        }
    }
    private UserActivity _userActivity;



    public virtual Client_Account Client_Account
    {

        get { return _client_Account; }
        set
        {
            if (!ReferenceEquals(_client_Account, value))
            {
                var previousValue = _client_Account;
                _client_Account = value;
                FixupClient_Account(previousValue);
            }
        }
    }
    private Client_Account _client_Account;

        #endregion

        #region Association Fixup
    

    private bool _settingFK = false;


    private void FixupL_CurrencyValue(L_CurrencyValue previousValue)
    {

        if (previousValue != null && previousValue.AccountActivities.Contains(this))
        {
            previousValue.AccountActivities.Remove(this);
        }


        if (L_CurrencyValue != null)
        {
            if (!L_CurrencyValue.AccountActivities.Contains(this))
            {
                L_CurrencyValue.AccountActivities.Add(this);
            }

            if (Currency != L_CurrencyValue.PK_CurrencyValueID)

            {
                Currency = L_CurrencyValue.PK_CurrencyValueID;
            }

        }

        else if (!_settingFK)

        {

            Currency = null;

        }

    }


    private void FixupL_AccountActivityType(L_AccountActivityType previousValue)
    {

        if (previousValue != null && previousValue.AccountActivities.Contains(this))
        {
            previousValue.AccountActivities.Remove(this);
        }


        if (L_AccountActivityType != null)
        {
            if (!L_AccountActivityType.AccountActivities.Contains(this))
            {
                L_AccountActivityType.AccountActivities.Add(this);
            }

            if (FK_AccActivityTypeID != L_AccountActivityType.PK_AccActivityTypeID)

            {
                FK_AccActivityTypeID = L_AccountActivityType.PK_AccActivityTypeID;
            }

        }

        else if (!_settingFK)

        {

            FK_AccActivityTypeID = null;

        }

    }


    private void FixupUserActivity(UserActivity previousValue)
    {

        if (previousValue != null && previousValue.AccountActivities.Contains(this))
        {
            previousValue.AccountActivities.Remove(this);
        }


        if (UserActivity != null)
        {
            if (!UserActivity.AccountActivities.Contains(this))
            {
                UserActivity.AccountActivities.Add(this);
            }

            if (FK_UserActivityID != UserActivity.PK_UserActivityID)

            {
                FK_UserActivityID = UserActivity.PK_UserActivityID;
            }

        }

        else if (!_settingFK)

        {

            FK_UserActivityID = null;

        }

    }


    private void FixupClient_Account(Client_Account previousValue)
    {

        if (previousValue != null && previousValue.AccountActivities.Contains(this))
        {
            previousValue.AccountActivities.Remove(this);
        }


        if (Client_Account != null)
        {
            if (!Client_Account.AccountActivities.Contains(this))
            {
                Client_Account.AccountActivities.Add(this);
            }

            if (FK_ClientAccountID != Client_Account.PK_ClientAccountID)

            {
                FK_ClientAccountID = Client_Account.PK_ClientAccountID;
            }

        }

        else if (!_settingFK)

        {

            FK_ClientAccountID = null;

        }

    }

        #endregion

    
}

}
