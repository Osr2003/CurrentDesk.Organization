
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;


namespace CurrentDesk.Models
{

public partial class AssetManager
{
    #region Primitive Properties
    

    public virtual int PK_AssetManagerID
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_AccountID
    {

        get { return _fK_AccountID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_AccountID != value)

            {

                if (L_AccountCode != null && L_AccountCode.PK_AccountID != value)

                {

                    L_AccountCode = null;

                }

                _fK_AccountID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_AccountID;


    public virtual Nullable<int> FK_AccountTypeID
    {

        get { return _fK_AccountTypeID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_AccountTypeID != value)

            {

                if (AccountType != null && AccountType.PK_AccountType != value)

                {

                    AccountType = null;

                }

                _fK_AccountTypeID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_AccountTypeID;


    public virtual Nullable<int> FK_TradingPlatformID
    {

        get { return _fK_TradingPlatformID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_TradingPlatformID != value)

            {

                if (TradingPlatform != null && TradingPlatform.PK_TradingPlatformID != value)

                {

                    TradingPlatform = null;

                }

                _fK_TradingPlatformID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_TradingPlatformID;


    public virtual Nullable<int> FK_WidenSpreadsID
    {

        get { return _fK_WidenSpreadsID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_WidenSpreadsID != value)

            {

                if (L_WidenSpreadsValue != null && L_WidenSpreadsValue.PK_WidenSpreadsID != value)

                {

                    L_WidenSpreadsValue = null;

                }

                _fK_WidenSpreadsID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_WidenSpreadsID;


    public virtual Nullable<int> FK_CommissionIncrementID
    {

        get { return _fK_CommissionIncrementID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_CommissionIncrementID != value)

            {

                if (L_CommissionIncrementValue != null && L_CommissionIncrementValue.PK_CommissionIncrementID != value)

                {

                    L_CommissionIncrementValue = null;

                }

                _fK_CommissionIncrementID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_CommissionIncrementID;


    public virtual string BankName
    {

        get;
        set;

    }


    public virtual string AccountNumber
    {

        get;
        set;

    }


    public virtual string BicNumberOrSwiftCode
    {

        get;
        set;

    }


    public virtual string BankingAddress
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_ReceivingBankInformationID
    {

        get { return _fK_ReceivingBankInformationID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_ReceivingBankInformationID != value)

            {

                if (L_RecievingBank != null && L_RecievingBank.PK_RecievingBankID != value)

                {

                    L_RecievingBank = null;

                }

                _fK_ReceivingBankInformationID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_ReceivingBankInformationID;


    public virtual string City
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_CountryID
    {

        get { return _fK_CountryID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_CountryID != value)

            {

                if (L_Country != null && L_Country.PK_CountryID != value)

                {

                    L_Country = null;

                }

                _fK_CountryID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_CountryID;


    public virtual string PostalCode
    {

        get;
        set;

    }


    public virtual string EstimatedAnnualIncome
    {

        get;
        set;

    }


    public virtual string LiquidAssets
    {

        get;
        set;

    }


    public virtual string NetWorthInEuros
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_TradingSecurityExperienceID
    {

        get { return _fK_TradingSecurityExperienceID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_TradingSecurityExperienceID != value)

            {

                if (L_TradingExperience2 != null && L_TradingExperience2.PK_ExperienceID != value)

                {

                    L_TradingExperience2 = null;

                }

                _fK_TradingSecurityExperienceID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_TradingSecurityExperienceID;


    public virtual Nullable<int> FK_TradingOptionExperienceID
    {

        get { return _fK_TradingOptionExperienceID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_TradingOptionExperienceID != value)

            {

                if (L_TradingExperience1 != null && L_TradingExperience1.PK_ExperienceID != value)

                {

                    L_TradingExperience1 = null;

                }

                _fK_TradingOptionExperienceID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_TradingOptionExperienceID;


    public virtual Nullable<int> FK_TradingForeignExchangeExperienceID
    {

        get { return _fK_TradingForeignExchangeExperienceID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_TradingForeignExchangeExperienceID != value)

            {

                if (L_TradingExperience != null && L_TradingExperience.PK_ExperienceID != value)

                {

                    L_TradingExperience = null;

                }

                _fK_TradingForeignExchangeExperienceID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_TradingForeignExchangeExperienceID;


    public virtual Nullable<bool> IsHavingAccount
    {

        get;
        set;

    }


    public virtual Nullable<bool> IsRegisterdWithEntity
    {

        get;
        set;

    }


    public virtual Nullable<bool> IsRegisteredWithRegulator
    {

        get;
        set;

    }


    public virtual Nullable<bool> IsEmployeeOfExchangeOrRegulator
    {

        get;
        set;

    }


    public virtual Nullable<bool> IsDeclaredBankruptcy
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_IntroducingBrokerID
    {

        get { return _fK_IntroducingBrokerID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_IntroducingBrokerID != value)

            {

                if (IntroducingBroker != null && IntroducingBroker.PK_IntroducingBrokerID != value)

                {

                    IntroducingBroker = null;

                }

                _fK_IntroducingBrokerID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_IntroducingBrokerID;


    public virtual Nullable<double> DefaultManagementFee
    {

        get;
        set;

    }


    public virtual Nullable<double> DefaultComissionFee
    {

        get;
        set;

    }


    public virtual Nullable<double> DefaultPerformanceFee
    {

        get;
        set;

    }


    public virtual string UserEmail
    {

        get;
        set;

    }


    public virtual string Password
    {

        get;
        set;

    }


    public virtual Nullable<bool> IsEnglishSpeaking
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_PreferredLanguage
    {

        get { return _fK_PreferredLanguage; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_PreferredLanguage != value)

            {

                if (L_Languages != null && L_Languages.PK_LanguageID != value)

                {

                    L_Languages = null;

                }

                _fK_PreferredLanguage = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_PreferredLanguage;


    public virtual string ReceivingBankInfo
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_AccountCurrencyID
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_UserID
    {

        get { return _fK_UserID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_UserID != value)

            {

                if (User != null && User.PK_UserID != value)

                {

                    User = null;

                }

                _fK_UserID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_UserID;

        #endregion

        #region Navigation Properties
    


    public virtual AccountType AccountType
    {

        get { return _accountType; }
        set
        {
            if (!ReferenceEquals(_accountType, value))
            {
                var previousValue = _accountType;
                _accountType = value;
                FixupAccountType(previousValue);
            }
        }
    }
    private AccountType _accountType;



    public virtual L_AccountCode L_AccountCode
    {

        get { return _l_AccountCode; }
        set
        {
            if (!ReferenceEquals(_l_AccountCode, value))
            {
                var previousValue = _l_AccountCode;
                _l_AccountCode = value;
                FixupL_AccountCode(previousValue);
            }
        }
    }
    private L_AccountCode _l_AccountCode;



    public virtual L_CommissionIncrementValue L_CommissionIncrementValue
    {

        get { return _l_CommissionIncrementValue; }
        set
        {
            if (!ReferenceEquals(_l_CommissionIncrementValue, value))
            {
                var previousValue = _l_CommissionIncrementValue;
                _l_CommissionIncrementValue = value;
                FixupL_CommissionIncrementValue(previousValue);
            }
        }
    }
    private L_CommissionIncrementValue _l_CommissionIncrementValue;



    public virtual L_Country L_Country
    {

        get { return _l_Country; }
        set
        {
            if (!ReferenceEquals(_l_Country, value))
            {
                var previousValue = _l_Country;
                _l_Country = value;
                FixupL_Country(previousValue);
            }
        }
    }
    private L_Country _l_Country;



    public virtual IntroducingBroker IntroducingBroker
    {

        get { return _introducingBroker; }
        set
        {
            if (!ReferenceEquals(_introducingBroker, value))
            {
                var previousValue = _introducingBroker;
                _introducingBroker = value;
                FixupIntroducingBroker(previousValue);
            }
        }
    }
    private IntroducingBroker _introducingBroker;



    public virtual L_RecievingBank L_RecievingBank
    {

        get { return _l_RecievingBank; }
        set
        {
            if (!ReferenceEquals(_l_RecievingBank, value))
            {
                var previousValue = _l_RecievingBank;
                _l_RecievingBank = value;
                FixupL_RecievingBank(previousValue);
            }
        }
    }
    private L_RecievingBank _l_RecievingBank;



    public virtual L_TradingExperience L_TradingExperience
    {

        get { return _l_TradingExperience; }
        set
        {
            if (!ReferenceEquals(_l_TradingExperience, value))
            {
                var previousValue = _l_TradingExperience;
                _l_TradingExperience = value;
                FixupL_TradingExperience(previousValue);
            }
        }
    }
    private L_TradingExperience _l_TradingExperience;



    public virtual L_TradingExperience L_TradingExperience1
    {

        get { return _l_TradingExperience1; }
        set
        {
            if (!ReferenceEquals(_l_TradingExperience1, value))
            {
                var previousValue = _l_TradingExperience1;
                _l_TradingExperience1 = value;
                FixupL_TradingExperience1(previousValue);
            }
        }
    }
    private L_TradingExperience _l_TradingExperience1;



    public virtual TradingPlatform TradingPlatform
    {

        get { return _tradingPlatform; }
        set
        {
            if (!ReferenceEquals(_tradingPlatform, value))
            {
                var previousValue = _tradingPlatform;
                _tradingPlatform = value;
                FixupTradingPlatform(previousValue);
            }
        }
    }
    private TradingPlatform _tradingPlatform;



    public virtual L_TradingExperience L_TradingExperience2
    {

        get { return _l_TradingExperience2; }
        set
        {
            if (!ReferenceEquals(_l_TradingExperience2, value))
            {
                var previousValue = _l_TradingExperience2;
                _l_TradingExperience2 = value;
                FixupL_TradingExperience2(previousValue);
            }
        }
    }
    private L_TradingExperience _l_TradingExperience2;



    public virtual L_WidenSpreadsValue L_WidenSpreadsValue
    {

        get { return _l_WidenSpreadsValue; }
        set
        {
            if (!ReferenceEquals(_l_WidenSpreadsValue, value))
            {
                var previousValue = _l_WidenSpreadsValue;
                _l_WidenSpreadsValue = value;
                FixupL_WidenSpreadsValue(previousValue);
            }
        }
    }
    private L_WidenSpreadsValue _l_WidenSpreadsValue;



    public virtual L_Languages L_Languages
    {

        get { return _l_Languages; }
        set
        {
            if (!ReferenceEquals(_l_Languages, value))
            {
                var previousValue = _l_Languages;
                _l_Languages = value;
                FixupL_Languages(previousValue);
            }
        }
    }
    private L_Languages _l_Languages;



    public virtual User User
    {

        get { return _user; }
        set
        {
            if (!ReferenceEquals(_user, value))
            {
                var previousValue = _user;
                _user = value;
                FixupUser(previousValue);
            }
        }
    }
    private User _user;



    public virtual ICollection<R_AssetManager_ClientAccount_Trader> R_AssetManager_ClientAccount_Trader
    {
        get
        {
            if (_r_AssetManager_ClientAccount_Trader == null)
            {

                var newCollection = new FixupCollection<R_AssetManager_ClientAccount_Trader>();
                newCollection.CollectionChanged += FixupR_AssetManager_ClientAccount_Trader;
                _r_AssetManager_ClientAccount_Trader = newCollection;

            }
            return _r_AssetManager_ClientAccount_Trader;
        }
        set
        {

            if (!ReferenceEquals(_r_AssetManager_ClientAccount_Trader, value))
            {
                var previousValue = _r_AssetManager_ClientAccount_Trader as FixupCollection<R_AssetManager_ClientAccount_Trader>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupR_AssetManager_ClientAccount_Trader;
                }
                _r_AssetManager_ClientAccount_Trader = value;
                var newValue = value as FixupCollection<R_AssetManager_ClientAccount_Trader>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupR_AssetManager_ClientAccount_Trader;
                }
            }

        }
    }
    private ICollection<R_AssetManager_ClientAccount_Trader> _r_AssetManager_ClientAccount_Trader;

        #endregion

        #region Association Fixup
    

    private bool _settingFK = false;


    private void FixupAccountType(AccountType previousValue)
    {

        if (previousValue != null && previousValue.AssetManagers.Contains(this))
        {
            previousValue.AssetManagers.Remove(this);
        }


        if (AccountType != null)
        {
            if (!AccountType.AssetManagers.Contains(this))
            {
                AccountType.AssetManagers.Add(this);
            }

            if (FK_AccountTypeID != AccountType.PK_AccountType)

            {
                FK_AccountTypeID = AccountType.PK_AccountType;
            }

        }

        else if (!_settingFK)

        {

            FK_AccountTypeID = null;

        }

    }


    private void FixupL_AccountCode(L_AccountCode previousValue)
    {

        if (previousValue != null && previousValue.AssetManagers.Contains(this))
        {
            previousValue.AssetManagers.Remove(this);
        }


        if (L_AccountCode != null)
        {
            if (!L_AccountCode.AssetManagers.Contains(this))
            {
                L_AccountCode.AssetManagers.Add(this);
            }

            if (FK_AccountID != L_AccountCode.PK_AccountID)

            {
                FK_AccountID = L_AccountCode.PK_AccountID;
            }

        }

        else if (!_settingFK)

        {

            FK_AccountID = null;

        }

    }


    private void FixupL_CommissionIncrementValue(L_CommissionIncrementValue previousValue)
    {

        if (previousValue != null && previousValue.AssetManagers.Contains(this))
        {
            previousValue.AssetManagers.Remove(this);
        }


        if (L_CommissionIncrementValue != null)
        {
            if (!L_CommissionIncrementValue.AssetManagers.Contains(this))
            {
                L_CommissionIncrementValue.AssetManagers.Add(this);
            }

            if (FK_CommissionIncrementID != L_CommissionIncrementValue.PK_CommissionIncrementID)

            {
                FK_CommissionIncrementID = L_CommissionIncrementValue.PK_CommissionIncrementID;
            }

        }

        else if (!_settingFK)

        {

            FK_CommissionIncrementID = null;

        }

    }


    private void FixupL_Country(L_Country previousValue)
    {

        if (previousValue != null && previousValue.AssetManagers.Contains(this))
        {
            previousValue.AssetManagers.Remove(this);
        }


        if (L_Country != null)
        {
            if (!L_Country.AssetManagers.Contains(this))
            {
                L_Country.AssetManagers.Add(this);
            }

            if (FK_CountryID != L_Country.PK_CountryID)

            {
                FK_CountryID = L_Country.PK_CountryID;
            }

        }

        else if (!_settingFK)

        {

            FK_CountryID = null;

        }

    }


    private void FixupIntroducingBroker(IntroducingBroker previousValue)
    {

        if (previousValue != null && previousValue.AssetManagers.Contains(this))
        {
            previousValue.AssetManagers.Remove(this);
        }


        if (IntroducingBroker != null)
        {
            if (!IntroducingBroker.AssetManagers.Contains(this))
            {
                IntroducingBroker.AssetManagers.Add(this);
            }

            if (FK_IntroducingBrokerID != IntroducingBroker.PK_IntroducingBrokerID)

            {
                FK_IntroducingBrokerID = IntroducingBroker.PK_IntroducingBrokerID;
            }

        }

        else if (!_settingFK)

        {

            FK_IntroducingBrokerID = null;

        }

    }


    private void FixupL_RecievingBank(L_RecievingBank previousValue)
    {

        if (previousValue != null && previousValue.AssetManagers.Contains(this))
        {
            previousValue.AssetManagers.Remove(this);
        }


        if (L_RecievingBank != null)
        {
            if (!L_RecievingBank.AssetManagers.Contains(this))
            {
                L_RecievingBank.AssetManagers.Add(this);
            }

            if (FK_ReceivingBankInformationID != L_RecievingBank.PK_RecievingBankID)

            {
                FK_ReceivingBankInformationID = L_RecievingBank.PK_RecievingBankID;
            }

        }

        else if (!_settingFK)

        {

            FK_ReceivingBankInformationID = null;

        }

    }


    private void FixupL_TradingExperience(L_TradingExperience previousValue)
    {

        if (previousValue != null && previousValue.AssetManagers.Contains(this))
        {
            previousValue.AssetManagers.Remove(this);
        }


        if (L_TradingExperience != null)
        {
            if (!L_TradingExperience.AssetManagers.Contains(this))
            {
                L_TradingExperience.AssetManagers.Add(this);
            }

            if (FK_TradingForeignExchangeExperienceID != L_TradingExperience.PK_ExperienceID)

            {
                FK_TradingForeignExchangeExperienceID = L_TradingExperience.PK_ExperienceID;
            }

        }

        else if (!_settingFK)

        {

            FK_TradingForeignExchangeExperienceID = null;

        }

    }


    private void FixupL_TradingExperience1(L_TradingExperience previousValue)
    {

        if (previousValue != null && previousValue.AssetManagers1.Contains(this))
        {
            previousValue.AssetManagers1.Remove(this);
        }


        if (L_TradingExperience1 != null)
        {
            if (!L_TradingExperience1.AssetManagers1.Contains(this))
            {
                L_TradingExperience1.AssetManagers1.Add(this);
            }

            if (FK_TradingOptionExperienceID != L_TradingExperience1.PK_ExperienceID)

            {
                FK_TradingOptionExperienceID = L_TradingExperience1.PK_ExperienceID;
            }

        }

        else if (!_settingFK)

        {

            FK_TradingOptionExperienceID = null;

        }

    }


    private void FixupTradingPlatform(TradingPlatform previousValue)
    {

        if (previousValue != null && previousValue.AssetManagers.Contains(this))
        {
            previousValue.AssetManagers.Remove(this);
        }


        if (TradingPlatform != null)
        {
            if (!TradingPlatform.AssetManagers.Contains(this))
            {
                TradingPlatform.AssetManagers.Add(this);
            }

            if (FK_TradingPlatformID != TradingPlatform.PK_TradingPlatformID)

            {
                FK_TradingPlatformID = TradingPlatform.PK_TradingPlatformID;
            }

        }

        else if (!_settingFK)

        {

            FK_TradingPlatformID = null;

        }

    }


    private void FixupL_TradingExperience2(L_TradingExperience previousValue)
    {

        if (previousValue != null && previousValue.AssetManagers2.Contains(this))
        {
            previousValue.AssetManagers2.Remove(this);
        }


        if (L_TradingExperience2 != null)
        {
            if (!L_TradingExperience2.AssetManagers2.Contains(this))
            {
                L_TradingExperience2.AssetManagers2.Add(this);
            }

            if (FK_TradingSecurityExperienceID != L_TradingExperience2.PK_ExperienceID)

            {
                FK_TradingSecurityExperienceID = L_TradingExperience2.PK_ExperienceID;
            }

        }

        else if (!_settingFK)

        {

            FK_TradingSecurityExperienceID = null;

        }

    }


    private void FixupL_WidenSpreadsValue(L_WidenSpreadsValue previousValue)
    {

        if (previousValue != null && previousValue.AssetManagers.Contains(this))
        {
            previousValue.AssetManagers.Remove(this);
        }


        if (L_WidenSpreadsValue != null)
        {
            if (!L_WidenSpreadsValue.AssetManagers.Contains(this))
            {
                L_WidenSpreadsValue.AssetManagers.Add(this);
            }

            if (FK_WidenSpreadsID != L_WidenSpreadsValue.PK_WidenSpreadsID)

            {
                FK_WidenSpreadsID = L_WidenSpreadsValue.PK_WidenSpreadsID;
            }

        }

        else if (!_settingFK)

        {

            FK_WidenSpreadsID = null;

        }

    }


    private void FixupL_Languages(L_Languages previousValue)
    {

        if (previousValue != null && previousValue.AssetManagers.Contains(this))
        {
            previousValue.AssetManagers.Remove(this);
        }


        if (L_Languages != null)
        {
            if (!L_Languages.AssetManagers.Contains(this))
            {
                L_Languages.AssetManagers.Add(this);
            }

            if (FK_PreferredLanguage != L_Languages.PK_LanguageID)

            {
                FK_PreferredLanguage = L_Languages.PK_LanguageID;
            }

        }

        else if (!_settingFK)

        {

            FK_PreferredLanguage = null;

        }

    }


    private void FixupUser(User previousValue)
    {

        if (previousValue != null && previousValue.AssetManagers.Contains(this))
        {
            previousValue.AssetManagers.Remove(this);
        }


        if (User != null)
        {
            if (!User.AssetManagers.Contains(this))
            {
                User.AssetManagers.Add(this);
            }

            if (FK_UserID != User.PK_UserID)

            {
                FK_UserID = User.PK_UserID;
            }

        }

        else if (!_settingFK)

        {

            FK_UserID = null;

        }

    }


    private void FixupR_AssetManager_ClientAccount_Trader(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (R_AssetManager_ClientAccount_Trader item in e.NewItems)
            {

                item.AssetManager = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (R_AssetManager_ClientAccount_Trader item in e.OldItems)
            {

                if (ReferenceEquals(item.AssetManager, this))
                {
                    item.AssetManager = null;
                }

            }
        }
    }

        #endregion

    
}

}
