
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;


namespace CurrentDesk.Models
{

public partial class L_AccountFormType
{
    #region Primitive Properties
    

    public virtual int PK_AccountFormID
    {

        get { return _pK_AccountFormID; }
        set
        {

            if (_pK_AccountFormID != value)

            {

                if (L_AccountFormType2 != null && L_AccountFormType2.PK_AccountFormID != value)

                {

                    L_AccountFormType2 = null;

                }

                _pK_AccountFormID = value;
            }

        }

    }

    private int _pK_AccountFormID;


    public virtual string AccountName
    {

        get;
        set;

    }

        #endregion

        #region Navigation Properties
    


    public virtual ICollection<AccountCurrency> AccountCurrencies
    {
        get
        {
            if (_accountCurrencies == null)
            {

                var newCollection = new FixupCollection<AccountCurrency>();
                newCollection.CollectionChanged += FixupAccountCurrencies;
                _accountCurrencies = newCollection;

            }
            return _accountCurrencies;
        }
        set
        {

            if (!ReferenceEquals(_accountCurrencies, value))
            {
                var previousValue = _accountCurrencies as FixupCollection<AccountCurrency>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupAccountCurrencies;
                }
                _accountCurrencies = value;
                var newValue = value as FixupCollection<AccountCurrency>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupAccountCurrencies;
                }
            }

        }
    }
    private ICollection<AccountCurrency> _accountCurrencies;



    public virtual ICollection<L_AccountCode> L_AccountCode
    {
        get
        {
            if (_l_AccountCode == null)
            {

                var newCollection = new FixupCollection<L_AccountCode>();
                newCollection.CollectionChanged += FixupL_AccountCode;
                _l_AccountCode = newCollection;

            }
            return _l_AccountCode;
        }
        set
        {

            if (!ReferenceEquals(_l_AccountCode, value))
            {
                var previousValue = _l_AccountCode as FixupCollection<L_AccountCode>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupL_AccountCode;
                }
                _l_AccountCode = value;
                var newValue = value as FixupCollection<L_AccountCode>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupL_AccountCode;
                }
            }

        }
    }
    private ICollection<L_AccountCode> _l_AccountCode;



    public virtual L_AccountFormType L_AccountFormType1
    {

        get { return _l_AccountFormType1; }
        set
        {
            if (!ReferenceEquals(_l_AccountFormType1, value))
            {
                var previousValue = _l_AccountFormType1;
                _l_AccountFormType1 = value;
                FixupL_AccountFormType1(previousValue);
            }
        }
    }
    private L_AccountFormType _l_AccountFormType1;



    public virtual L_AccountFormType L_AccountFormType2
    {

        get { return _l_AccountFormType2; }
        set
        {
            if (!ReferenceEquals(_l_AccountFormType2, value))
            {
                var previousValue = _l_AccountFormType2;
                _l_AccountFormType2 = value;
                FixupL_AccountFormType2(previousValue);
            }
        }
    }
    private L_AccountFormType _l_AccountFormType2;



    public virtual ICollection<TradingPlatform> TradingPlatforms
    {
        get
        {
            if (_tradingPlatforms == null)
            {

                var newCollection = new FixupCollection<TradingPlatform>();
                newCollection.CollectionChanged += FixupTradingPlatforms;
                _tradingPlatforms = newCollection;

            }
            return _tradingPlatforms;
        }
        set
        {

            if (!ReferenceEquals(_tradingPlatforms, value))
            {
                var previousValue = _tradingPlatforms as FixupCollection<TradingPlatform>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupTradingPlatforms;
                }
                _tradingPlatforms = value;
                var newValue = value as FixupCollection<TradingPlatform>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupTradingPlatforms;
                }
            }

        }
    }
    private ICollection<TradingPlatform> _tradingPlatforms;



    public virtual ICollection<User> Users
    {
        get
        {
            if (_users == null)
            {

                var newCollection = new FixupCollection<User>();
                newCollection.CollectionChanged += FixupUsers;
                _users = newCollection;

            }
            return _users;
        }
        set
        {

            if (!ReferenceEquals(_users, value))
            {
                var previousValue = _users as FixupCollection<User>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupUsers;
                }
                _users = value;
                var newValue = value as FixupCollection<User>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupUsers;
                }
            }

        }
    }
    private ICollection<User> _users;

        #endregion

        #region Association Fixup
    

    private void FixupL_AccountFormType1(L_AccountFormType previousValue)
    {

        if (previousValue != null && ReferenceEquals(previousValue.L_AccountFormType2, this))
        {
            previousValue.L_AccountFormType2 = null;
        }


        if (L_AccountFormType1 != null)
        {
            L_AccountFormType1.L_AccountFormType2 = this;

        }

    }


    private void FixupL_AccountFormType2(L_AccountFormType previousValue)
    {

        if (previousValue != null && ReferenceEquals(previousValue.L_AccountFormType1, this))
        {
            previousValue.L_AccountFormType1 = null;
        }


        if (L_AccountFormType2 != null)
        {
            L_AccountFormType2.L_AccountFormType1 = this;

            if (PK_AccountFormID != L_AccountFormType2.PK_AccountFormID)

            {
                PK_AccountFormID = L_AccountFormType2.PK_AccountFormID;
            }

        }

    }


    private void FixupAccountCurrencies(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (AccountCurrency item in e.NewItems)
            {

                item.L_AccountFormType = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (AccountCurrency item in e.OldItems)
            {

                if (ReferenceEquals(item.L_AccountFormType, this))
                {
                    item.L_AccountFormType = null;
                }

            }
        }
    }


    private void FixupL_AccountCode(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (L_AccountCode item in e.NewItems)
            {

                item.L_AccountFormType = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (L_AccountCode item in e.OldItems)
            {

                if (ReferenceEquals(item.L_AccountFormType, this))
                {
                    item.L_AccountFormType = null;
                }

            }
        }
    }


    private void FixupTradingPlatforms(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (TradingPlatform item in e.NewItems)
            {

                item.L_AccountFormType = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (TradingPlatform item in e.OldItems)
            {

                if (ReferenceEquals(item.L_AccountFormType, this))
                {
                    item.L_AccountFormType = null;
                }

            }
        }
    }


    private void FixupUsers(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (User item in e.NewItems)
            {

                item.L_AccountFormType = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (User item in e.OldItems)
            {

                if (ReferenceEquals(item.L_AccountFormType, this))
                {
                    item.L_AccountFormType = null;
                }

            }
        }
    }

        #endregion

    
}

}
