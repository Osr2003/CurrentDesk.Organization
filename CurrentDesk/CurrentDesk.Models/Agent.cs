
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;


namespace CurrentDesk.Models
{

public partial class Agent
{
    #region Primitive Properties
    

    public virtual int PK_AgentID
    {

        get;
        set;

    }


    public virtual string FirstName
    {

        get;
        set;

    }


    public virtual string LastName
    {

        get;
        set;

    }


    public virtual Nullable<System.DateTime> BirthDate
    {

        get;
        set;

    }


    public virtual string PhoneNumber
    {

        get;
        set;

    }


    public virtual string PhoneID
    {

        get;
        set;

    }


    public virtual string EmailAddress
    {

        get;
        set;

    }


    public virtual string Password
    {

        get;
        set;

    }


    public virtual string AgentAddress
    {

        get;
        set;

    }


    public virtual string City
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_CountryID
    {

        get { return _fK_CountryID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_CountryID != value)

            {

                if (L_Country1 != null && L_Country1.PK_CountryID != value)

                {

                    L_Country1 = null;

                }

                _fK_CountryID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_CountryID;


    public virtual string PostalCode
    {

        get;
        set;

    }


    public virtual string BankName
    {

        get;
        set;

    }


    public virtual string AccountNumber
    {

        get;
        set;

    }


    public virtual string BicOrSwiftCode
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_ReceivingBankInfoID
    {

        get { return _fK_ReceivingBankInfoID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_ReceivingBankInfoID != value)

            {

                if (L_RecievingBank != null && L_RecievingBank.PK_RecievingBankID != value)

                {

                    L_RecievingBank = null;

                }

                _fK_ReceivingBankInfoID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_ReceivingBankInfoID;


    public virtual string ReceivingBankInfo
    {

        get;
        set;

    }


    public virtual string BankAddress
    {

        get;
        set;

    }


    public virtual string BankCity
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_BankCountryID
    {

        get { return _fK_BankCountryID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_BankCountryID != value)

            {

                if (L_Country != null && L_Country.PK_CountryID != value)

                {

                    L_Country = null;

                }

                _fK_BankCountryID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_BankCountryID;


    public virtual string BankPostalCode
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_IntroducingBrokerUserID
    {

        get;
        set;

    }


    public virtual Nullable<int> AgentIntroducingBrokerCode
    {

        get;
        set;

    }


    public virtual Nullable<bool> IsActive
    {

        get;
        set;

    }


    public virtual Nullable<int> PerformanceFee
    {

        get;
        set;

    }


    public virtual Nullable<int> ManagementFee
    {

        get;
        set;

    }


    public virtual Nullable<int> RebatePercentage
    {

        get;
        set;

    }

        #endregion

        #region Navigation Properties
    


    public virtual L_Country L_Country
    {

        get { return _l_Country; }
        set
        {
            if (!ReferenceEquals(_l_Country, value))
            {
                var previousValue = _l_Country;
                _l_Country = value;
                FixupL_Country(previousValue);
            }
        }
    }
    private L_Country _l_Country;



    public virtual L_Country L_Country1
    {

        get { return _l_Country1; }
        set
        {
            if (!ReferenceEquals(_l_Country1, value))
            {
                var previousValue = _l_Country1;
                _l_Country1 = value;
                FixupL_Country1(previousValue);
            }
        }
    }
    private L_Country _l_Country1;



    public virtual L_RecievingBank L_RecievingBank
    {

        get { return _l_RecievingBank; }
        set
        {
            if (!ReferenceEquals(_l_RecievingBank, value))
            {
                var previousValue = _l_RecievingBank;
                _l_RecievingBank = value;
                FixupL_RecievingBank(previousValue);
            }
        }
    }
    private L_RecievingBank _l_RecievingBank;



    public virtual ICollection<Client> Clients
    {
        get
        {
            if (_clients == null)
            {

                var newCollection = new FixupCollection<Client>();
                newCollection.CollectionChanged += FixupClients;
                _clients = newCollection;

            }
            return _clients;
        }
        set
        {

            if (!ReferenceEquals(_clients, value))
            {
                var previousValue = _clients as FixupCollection<Client>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupClients;
                }
                _clients = value;
                var newValue = value as FixupCollection<Client>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupClients;
                }
            }

        }
    }
    private ICollection<Client> _clients;



    public virtual ICollection<LiveLead> LiveLeads
    {
        get
        {
            if (_liveLeads == null)
            {

                var newCollection = new FixupCollection<LiveLead>();
                newCollection.CollectionChanged += FixupLiveLeads;
                _liveLeads = newCollection;

            }
            return _liveLeads;
        }
        set
        {

            if (!ReferenceEquals(_liveLeads, value))
            {
                var previousValue = _liveLeads as FixupCollection<LiveLead>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupLiveLeads;
                }
                _liveLeads = value;
                var newValue = value as FixupCollection<LiveLead>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupLiveLeads;
                }
            }

        }
    }
    private ICollection<LiveLead> _liveLeads;

        #endregion

        #region Association Fixup
    

    private bool _settingFK = false;


    private void FixupL_Country(L_Country previousValue)
    {

        if (previousValue != null && previousValue.Agents.Contains(this))
        {
            previousValue.Agents.Remove(this);
        }


        if (L_Country != null)
        {
            if (!L_Country.Agents.Contains(this))
            {
                L_Country.Agents.Add(this);
            }

            if (FK_BankCountryID != L_Country.PK_CountryID)

            {
                FK_BankCountryID = L_Country.PK_CountryID;
            }

        }

        else if (!_settingFK)

        {

            FK_BankCountryID = null;

        }

    }


    private void FixupL_Country1(L_Country previousValue)
    {

        if (previousValue != null && previousValue.Agents1.Contains(this))
        {
            previousValue.Agents1.Remove(this);
        }


        if (L_Country1 != null)
        {
            if (!L_Country1.Agents1.Contains(this))
            {
                L_Country1.Agents1.Add(this);
            }

            if (FK_CountryID != L_Country1.PK_CountryID)

            {
                FK_CountryID = L_Country1.PK_CountryID;
            }

        }

        else if (!_settingFK)

        {

            FK_CountryID = null;

        }

    }


    private void FixupL_RecievingBank(L_RecievingBank previousValue)
    {

        if (previousValue != null && previousValue.Agents.Contains(this))
        {
            previousValue.Agents.Remove(this);
        }


        if (L_RecievingBank != null)
        {
            if (!L_RecievingBank.Agents.Contains(this))
            {
                L_RecievingBank.Agents.Add(this);
            }

            if (FK_ReceivingBankInfoID != L_RecievingBank.PK_RecievingBankID)

            {
                FK_ReceivingBankInfoID = L_RecievingBank.PK_RecievingBankID;
            }

        }

        else if (!_settingFK)

        {

            FK_ReceivingBankInfoID = null;

        }

    }


    private void FixupClients(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Client item in e.NewItems)
            {

                item.Agent = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (Client item in e.OldItems)
            {

                if (ReferenceEquals(item.Agent, this))
                {
                    item.Agent = null;
                }

            }
        }
    }


    private void FixupLiveLeads(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (LiveLead item in e.NewItems)
            {

                item.Agent = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (LiveLead item in e.OldItems)
            {

                if (ReferenceEquals(item.Agent, this))
                {
                    item.Agent = null;
                }

            }
        }
    }

        #endregion

    
}

}
