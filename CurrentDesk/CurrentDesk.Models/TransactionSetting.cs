
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;


namespace CurrentDesk.Models
{

public partial class TransactionSetting
{
    #region Primitive Properties
    

    public virtual int PK_TransactionSettingID
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_AdminTransactionTypeID
    {

        get { return _fK_AdminTransactionTypeID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_AdminTransactionTypeID != value)

            {

                if (L_AdminTransactionType != null && L_AdminTransactionType.PK_AdminTransactionType != value)

                {

                    L_AdminTransactionType = null;

                }

                _fK_AdminTransactionTypeID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_AdminTransactionTypeID;


    public virtual Nullable<int> FK_CurrencyID
    {

        get { return _fK_CurrencyID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_CurrencyID != value)

            {

                if (L_CurrencyValue != null && L_CurrencyValue.PK_CurrencyValueID != value)

                {

                    L_CurrencyValue = null;

                }

                _fK_CurrencyID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_CurrencyID;


    public virtual Nullable<decimal> MinimumDepositAmount
    {

        get;
        set;

    }


    public virtual Nullable<decimal> TransferFee
    {

        get;
        set;

    }


    public virtual Nullable<int> InternalTransferApprovalOptions
    {

        get;
        set;

    }


    public virtual Nullable<decimal> InternalTransferLimitedAmount
    {

        get;
        set;

    }


    public virtual Nullable<double> MarginRestriction
    {

        get;
        set;

    }


    public virtual Nullable<int> ConversionMarkupType
    {

        get;
        set;

    }


    public virtual Nullable<double> ConversionMarkupValue
    {

        get;
        set;

    }

        #endregion

        #region Navigation Properties
    


    public virtual L_AdminTransactionType L_AdminTransactionType
    {

        get { return _l_AdminTransactionType; }
        set
        {
            if (!ReferenceEquals(_l_AdminTransactionType, value))
            {
                var previousValue = _l_AdminTransactionType;
                _l_AdminTransactionType = value;
                FixupL_AdminTransactionType(previousValue);
            }
        }
    }
    private L_AdminTransactionType _l_AdminTransactionType;



    public virtual L_CurrencyValue L_CurrencyValue
    {

        get { return _l_CurrencyValue; }
        set
        {
            if (!ReferenceEquals(_l_CurrencyValue, value))
            {
                var previousValue = _l_CurrencyValue;
                _l_CurrencyValue = value;
                FixupL_CurrencyValue(previousValue);
            }
        }
    }
    private L_CurrencyValue _l_CurrencyValue;

        #endregion

        #region Association Fixup
    

    private bool _settingFK = false;


    private void FixupL_AdminTransactionType(L_AdminTransactionType previousValue)
    {

        if (previousValue != null && previousValue.TransactionSettings.Contains(this))
        {
            previousValue.TransactionSettings.Remove(this);
        }


        if (L_AdminTransactionType != null)
        {
            if (!L_AdminTransactionType.TransactionSettings.Contains(this))
            {
                L_AdminTransactionType.TransactionSettings.Add(this);
            }

            if (FK_AdminTransactionTypeID != L_AdminTransactionType.PK_AdminTransactionType)

            {
                FK_AdminTransactionTypeID = L_AdminTransactionType.PK_AdminTransactionType;
            }

        }

        else if (!_settingFK)

        {

            FK_AdminTransactionTypeID = null;

        }

    }


    private void FixupL_CurrencyValue(L_CurrencyValue previousValue)
    {

        if (previousValue != null && previousValue.TransactionSettings.Contains(this))
        {
            previousValue.TransactionSettings.Remove(this);
        }


        if (L_CurrencyValue != null)
        {
            if (!L_CurrencyValue.TransactionSettings.Contains(this))
            {
                L_CurrencyValue.TransactionSettings.Add(this);
            }

            if (FK_CurrencyID != L_CurrencyValue.PK_CurrencyValueID)

            {
                FK_CurrencyID = L_CurrencyValue.PK_CurrencyValueID;
            }

        }

        else if (!_settingFK)

        {

            FK_CurrencyID = null;

        }

    }

        #endregion

    
}

}
