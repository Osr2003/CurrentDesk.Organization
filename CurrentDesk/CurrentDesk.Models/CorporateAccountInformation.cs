
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;


namespace CurrentDesk.Models
{

public partial class CorporateAccountInformation
{
    #region Primitive Properties
    

    public virtual int PK_CorporateAccountID
    {

        get;
        set;

    }


    public virtual string CompanyName
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_CompanyTypeID
    {

        get { return _fK_CompanyTypeID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_CompanyTypeID != value)

            {

                if (L_CompanyTypeValue != null && L_CompanyTypeValue.PK_CompanyTypeID != value)

                {

                    L_CompanyTypeValue = null;

                }

                _fK_CompanyTypeID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_CompanyTypeID;


    public virtual string CompanyAddress
    {

        get;
        set;

    }


    public virtual string City
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_CompanyCountryID
    {

        get { return _fK_CompanyCountryID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_CompanyCountryID != value)

            {

                if (L_Country3 != null && L_Country3.PK_CountryID != value)

                {

                    L_Country3 = null;

                }

                _fK_CompanyCountryID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_CompanyCountryID;


    public virtual string CompanyPostalCode
    {

        get;
        set;

    }


    public virtual string AuthOfficerTitle
    {

        get;
        set;

    }


    public virtual string AuthOfficerFirstName
    {

        get;
        set;

    }


    public virtual string AuthOfficerLastName
    {

        get;
        set;

    }


    public virtual string AuthOfficerMiddleName
    {

        get;
        set;

    }


    public virtual Nullable<System.DateTime> AuthOfficerBirthDate
    {

        get;
        set;

    }


    public virtual Nullable<bool> AuthOfficerGender
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_AuthOfficerCitizenshipCountryID
    {

        get { return _fK_AuthOfficerCitizenshipCountryID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_AuthOfficerCitizenshipCountryID != value)

            {

                if (L_Country != null && L_Country.PK_CountryID != value)

                {

                    L_Country = null;

                }

                _fK_AuthOfficerCitizenshipCountryID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_AuthOfficerCitizenshipCountryID;


    public virtual Nullable<int> FK_AuthOfficerInformationTypeID
    {

        get { return _fK_AuthOfficerInformationTypeID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_AuthOfficerInformationTypeID != value)

            {

                if (L_IDInformationType != null && L_IDInformationType.PK_IDTypeID != value)

                {

                    L_IDInformationType = null;

                }

                _fK_AuthOfficerInformationTypeID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_AuthOfficerInformationTypeID;


    public virtual string AuthOfficerIDNumber
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_AuthOfficerResidenceCountryID
    {

        get { return _fK_AuthOfficerResidenceCountryID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_AuthOfficerResidenceCountryID != value)

            {

                if (L_Country2 != null && L_Country2.PK_CountryID != value)

                {

                    L_Country2 = null;

                }

                _fK_AuthOfficerResidenceCountryID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_AuthOfficerResidenceCountryID;


    public virtual string AuthOfficerAddress
    {

        get;
        set;

    }


    public virtual string AuthOfficerCity
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_AuthOfficerCountryID
    {

        get { return _fK_AuthOfficerCountryID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_AuthOfficerCountryID != value)

            {

                if (L_Country1 != null && L_Country1.PK_CountryID != value)

                {

                    L_Country1 = null;

                }

                _fK_AuthOfficerCountryID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_AuthOfficerCountryID;


    public virtual string AuthOfficerPostalCode
    {

        get;
        set;

    }


    public virtual string AuthOfficerTelephoneNumber
    {

        get;
        set;

    }


    public virtual string AuthOfficerMobileNumber
    {

        get;
        set;

    }


    public virtual string AuthOfficerEmailAddress
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_ClientID
    {

        get { return _fK_ClientID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_ClientID != value)

            {

                if (Client != null && Client.PK_ClientID != value)

                {

                    Client = null;

                }

                _fK_ClientID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_ClientID;


    public virtual Nullable<int> FK_IntroducingBrokerID
    {

        get { return _fK_IntroducingBrokerID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_IntroducingBrokerID != value)

            {

                if (IntroducingBroker != null && IntroducingBroker.PK_IntroducingBrokerID != value)

                {

                    IntroducingBroker = null;

                }

                _fK_IntroducingBrokerID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_IntroducingBrokerID;


    public virtual string PhoneID
    {

        get;
        set;

    }

        #endregion

        #region Navigation Properties
    


    public virtual L_Country L_Country
    {

        get { return _l_Country; }
        set
        {
            if (!ReferenceEquals(_l_Country, value))
            {
                var previousValue = _l_Country;
                _l_Country = value;
                FixupL_Country(previousValue);
            }
        }
    }
    private L_Country _l_Country;



    public virtual L_Country L_Country1
    {

        get { return _l_Country1; }
        set
        {
            if (!ReferenceEquals(_l_Country1, value))
            {
                var previousValue = _l_Country1;
                _l_Country1 = value;
                FixupL_Country1(previousValue);
            }
        }
    }
    private L_Country _l_Country1;



    public virtual L_Country L_Country2
    {

        get { return _l_Country2; }
        set
        {
            if (!ReferenceEquals(_l_Country2, value))
            {
                var previousValue = _l_Country2;
                _l_Country2 = value;
                FixupL_Country2(previousValue);
            }
        }
    }
    private L_Country _l_Country2;



    public virtual L_Country L_Country3
    {

        get { return _l_Country3; }
        set
        {
            if (!ReferenceEquals(_l_Country3, value))
            {
                var previousValue = _l_Country3;
                _l_Country3 = value;
                FixupL_Country3(previousValue);
            }
        }
    }
    private L_Country _l_Country3;



    public virtual L_CompanyTypeValue L_CompanyTypeValue
    {

        get { return _l_CompanyTypeValue; }
        set
        {
            if (!ReferenceEquals(_l_CompanyTypeValue, value))
            {
                var previousValue = _l_CompanyTypeValue;
                _l_CompanyTypeValue = value;
                FixupL_CompanyTypeValue(previousValue);
            }
        }
    }
    private L_CompanyTypeValue _l_CompanyTypeValue;



    public virtual L_IDInformationType L_IDInformationType
    {

        get { return _l_IDInformationType; }
        set
        {
            if (!ReferenceEquals(_l_IDInformationType, value))
            {
                var previousValue = _l_IDInformationType;
                _l_IDInformationType = value;
                FixupL_IDInformationType(previousValue);
            }
        }
    }
    private L_IDInformationType _l_IDInformationType;



    public virtual IntroducingBroker IntroducingBroker
    {

        get { return _introducingBroker; }
        set
        {
            if (!ReferenceEquals(_introducingBroker, value))
            {
                var previousValue = _introducingBroker;
                _introducingBroker = value;
                FixupIntroducingBroker(previousValue);
            }
        }
    }
    private IntroducingBroker _introducingBroker;



    public virtual Client Client
    {

        get { return _client; }
        set
        {
            if (!ReferenceEquals(_client, value))
            {
                var previousValue = _client;
                _client = value;
                FixupClient(previousValue);
            }
        }
    }
    private Client _client;

        #endregion

        #region Association Fixup
    

    private bool _settingFK = false;


    private void FixupL_Country(L_Country previousValue)
    {

        if (previousValue != null && previousValue.CorporateAccountInformations.Contains(this))
        {
            previousValue.CorporateAccountInformations.Remove(this);
        }


        if (L_Country != null)
        {
            if (!L_Country.CorporateAccountInformations.Contains(this))
            {
                L_Country.CorporateAccountInformations.Add(this);
            }

            if (FK_AuthOfficerCitizenshipCountryID != L_Country.PK_CountryID)

            {
                FK_AuthOfficerCitizenshipCountryID = L_Country.PK_CountryID;
            }

        }

        else if (!_settingFK)

        {

            FK_AuthOfficerCitizenshipCountryID = null;

        }

    }


    private void FixupL_Country1(L_Country previousValue)
    {

        if (previousValue != null && previousValue.CorporateAccountInformations1.Contains(this))
        {
            previousValue.CorporateAccountInformations1.Remove(this);
        }


        if (L_Country1 != null)
        {
            if (!L_Country1.CorporateAccountInformations1.Contains(this))
            {
                L_Country1.CorporateAccountInformations1.Add(this);
            }

            if (FK_AuthOfficerCountryID != L_Country1.PK_CountryID)

            {
                FK_AuthOfficerCountryID = L_Country1.PK_CountryID;
            }

        }

        else if (!_settingFK)

        {

            FK_AuthOfficerCountryID = null;

        }

    }


    private void FixupL_Country2(L_Country previousValue)
    {

        if (previousValue != null && previousValue.CorporateAccountInformations2.Contains(this))
        {
            previousValue.CorporateAccountInformations2.Remove(this);
        }


        if (L_Country2 != null)
        {
            if (!L_Country2.CorporateAccountInformations2.Contains(this))
            {
                L_Country2.CorporateAccountInformations2.Add(this);
            }

            if (FK_AuthOfficerResidenceCountryID != L_Country2.PK_CountryID)

            {
                FK_AuthOfficerResidenceCountryID = L_Country2.PK_CountryID;
            }

        }

        else if (!_settingFK)

        {

            FK_AuthOfficerResidenceCountryID = null;

        }

    }


    private void FixupL_Country3(L_Country previousValue)
    {

        if (previousValue != null && previousValue.CorporateAccountInformations3.Contains(this))
        {
            previousValue.CorporateAccountInformations3.Remove(this);
        }


        if (L_Country3 != null)
        {
            if (!L_Country3.CorporateAccountInformations3.Contains(this))
            {
                L_Country3.CorporateAccountInformations3.Add(this);
            }

            if (FK_CompanyCountryID != L_Country3.PK_CountryID)

            {
                FK_CompanyCountryID = L_Country3.PK_CountryID;
            }

        }

        else if (!_settingFK)

        {

            FK_CompanyCountryID = null;

        }

    }


    private void FixupL_CompanyTypeValue(L_CompanyTypeValue previousValue)
    {

        if (previousValue != null && previousValue.CorporateAccountInformations.Contains(this))
        {
            previousValue.CorporateAccountInformations.Remove(this);
        }


        if (L_CompanyTypeValue != null)
        {
            if (!L_CompanyTypeValue.CorporateAccountInformations.Contains(this))
            {
                L_CompanyTypeValue.CorporateAccountInformations.Add(this);
            }

            if (FK_CompanyTypeID != L_CompanyTypeValue.PK_CompanyTypeID)

            {
                FK_CompanyTypeID = L_CompanyTypeValue.PK_CompanyTypeID;
            }

        }

        else if (!_settingFK)

        {

            FK_CompanyTypeID = null;

        }

    }


    private void FixupL_IDInformationType(L_IDInformationType previousValue)
    {

        if (previousValue != null && previousValue.CorporateAccountInformations.Contains(this))
        {
            previousValue.CorporateAccountInformations.Remove(this);
        }


        if (L_IDInformationType != null)
        {
            if (!L_IDInformationType.CorporateAccountInformations.Contains(this))
            {
                L_IDInformationType.CorporateAccountInformations.Add(this);
            }

            if (FK_AuthOfficerInformationTypeID != L_IDInformationType.PK_IDTypeID)

            {
                FK_AuthOfficerInformationTypeID = L_IDInformationType.PK_IDTypeID;
            }

        }

        else if (!_settingFK)

        {

            FK_AuthOfficerInformationTypeID = null;

        }

    }


    private void FixupIntroducingBroker(IntroducingBroker previousValue)
    {

        if (previousValue != null && previousValue.CorporateAccountInformations.Contains(this))
        {
            previousValue.CorporateAccountInformations.Remove(this);
        }


        if (IntroducingBroker != null)
        {
            if (!IntroducingBroker.CorporateAccountInformations.Contains(this))
            {
                IntroducingBroker.CorporateAccountInformations.Add(this);
            }

            if (FK_IntroducingBrokerID != IntroducingBroker.PK_IntroducingBrokerID)

            {
                FK_IntroducingBrokerID = IntroducingBroker.PK_IntroducingBrokerID;
            }

        }

        else if (!_settingFK)

        {

            FK_IntroducingBrokerID = null;

        }

    }


    private void FixupClient(Client previousValue)
    {

        if (previousValue != null && previousValue.CorporateAccountInformations.Contains(this))
        {
            previousValue.CorporateAccountInformations.Remove(this);
        }


        if (Client != null)
        {
            if (!Client.CorporateAccountInformations.Contains(this))
            {
                Client.CorporateAccountInformations.Add(this);
            }

            if (FK_ClientID != Client.PK_ClientID)

            {
                FK_ClientID = Client.PK_ClientID;
            }

        }

        else if (!_settingFK)

        {

            FK_ClientID = null;

        }

    }

        #endregion

    
}

}
