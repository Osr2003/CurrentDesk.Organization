
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;


namespace CurrentDesk.Models
{

public partial class UserActivity
{
    #region Primitive Properties
    

    public virtual int PK_UserActivityID
    {

        get;
        set;

    }


    public virtual Nullable<System.DateTime> Timestamp
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_UserID
    {

        get { return _fK_UserID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_UserID != value)

            {

                if (User != null && User.PK_UserID != value)

                {

                    User = null;

                }

                _fK_UserID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_UserID;


    public virtual Nullable<bool> IsSeen
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_ActivityTypeID
    {

        get { return _fK_ActivityTypeID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_ActivityTypeID != value)

            {

                if (L_ActivityType != null && L_ActivityType.PK_ActivityTypeID != value)

                {

                    L_ActivityType = null;

                }

                _fK_ActivityTypeID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_ActivityTypeID;

        #endregion

        #region Navigation Properties
    


    public virtual L_ActivityType L_ActivityType
    {

        get { return _l_ActivityType; }
        set
        {
            if (!ReferenceEquals(_l_ActivityType, value))
            {
                var previousValue = _l_ActivityType;
                _l_ActivityType = value;
                FixupL_ActivityType(previousValue);
            }
        }
    }
    private L_ActivityType _l_ActivityType;



    public virtual ICollection<ProfileActivity> ProfileActivities
    {
        get
        {
            if (_profileActivities == null)
            {

                var newCollection = new FixupCollection<ProfileActivity>();
                newCollection.CollectionChanged += FixupProfileActivities;
                _profileActivities = newCollection;

            }
            return _profileActivities;
        }
        set
        {

            if (!ReferenceEquals(_profileActivities, value))
            {
                var previousValue = _profileActivities as FixupCollection<ProfileActivity>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupProfileActivities;
                }
                _profileActivities = value;
                var newValue = value as FixupCollection<ProfileActivity>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupProfileActivities;
                }
            }

        }
    }
    private ICollection<ProfileActivity> _profileActivities;



    public virtual User User
    {

        get { return _user; }
        set
        {
            if (!ReferenceEquals(_user, value))
            {
                var previousValue = _user;
                _user = value;
                FixupUser(previousValue);
            }
        }
    }
    private User _user;



    public virtual ICollection<DocumentActivity> DocumentActivities
    {
        get
        {
            if (_documentActivities == null)
            {

                var newCollection = new FixupCollection<DocumentActivity>();
                newCollection.CollectionChanged += FixupDocumentActivities;
                _documentActivities = newCollection;

            }
            return _documentActivities;
        }
        set
        {

            if (!ReferenceEquals(_documentActivities, value))
            {
                var previousValue = _documentActivities as FixupCollection<DocumentActivity>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupDocumentActivities;
                }
                _documentActivities = value;
                var newValue = value as FixupCollection<DocumentActivity>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupDocumentActivities;
                }
            }

        }
    }
    private ICollection<DocumentActivity> _documentActivities;



    public virtual ICollection<AccountActivity> AccountActivities
    {
        get
        {
            if (_accountActivities == null)
            {

                var newCollection = new FixupCollection<AccountActivity>();
                newCollection.CollectionChanged += FixupAccountActivities;
                _accountActivities = newCollection;

            }
            return _accountActivities;
        }
        set
        {

            if (!ReferenceEquals(_accountActivities, value))
            {
                var previousValue = _accountActivities as FixupCollection<AccountActivity>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupAccountActivities;
                }
                _accountActivities = value;
                var newValue = value as FixupCollection<AccountActivity>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupAccountActivities;
                }
            }

        }
    }
    private ICollection<AccountActivity> _accountActivities;



    public virtual ICollection<TransferActivity> TransferActivities
    {
        get
        {
            if (_transferActivities == null)
            {

                var newCollection = new FixupCollection<TransferActivity>();
                newCollection.CollectionChanged += FixupTransferActivities;
                _transferActivities = newCollection;

            }
            return _transferActivities;
        }
        set
        {

            if (!ReferenceEquals(_transferActivities, value))
            {
                var previousValue = _transferActivities as FixupCollection<TransferActivity>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupTransferActivities;
                }
                _transferActivities = value;
                var newValue = value as FixupCollection<TransferActivity>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupTransferActivities;
                }
            }

        }
    }
    private ICollection<TransferActivity> _transferActivities;



    public virtual ICollection<ConversionActivity> ConversionActivities
    {
        get
        {
            if (_conversionActivities == null)
            {

                var newCollection = new FixupCollection<ConversionActivity>();
                newCollection.CollectionChanged += FixupConversionActivities;
                _conversionActivities = newCollection;

            }
            return _conversionActivities;
        }
        set
        {

            if (!ReferenceEquals(_conversionActivities, value))
            {
                var previousValue = _conversionActivities as FixupCollection<ConversionActivity>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupConversionActivities;
                }
                _conversionActivities = value;
                var newValue = value as FixupCollection<ConversionActivity>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupConversionActivities;
                }
            }

        }
    }
    private ICollection<ConversionActivity> _conversionActivities;



    public virtual ICollection<DepositOrWithdrawActivity> DepositOrWithdrawActivities
    {
        get
        {
            if (_depositOrWithdrawActivities == null)
            {

                var newCollection = new FixupCollection<DepositOrWithdrawActivity>();
                newCollection.CollectionChanged += FixupDepositOrWithdrawActivities;
                _depositOrWithdrawActivities = newCollection;

            }
            return _depositOrWithdrawActivities;
        }
        set
        {

            if (!ReferenceEquals(_depositOrWithdrawActivities, value))
            {
                var previousValue = _depositOrWithdrawActivities as FixupCollection<DepositOrWithdrawActivity>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupDepositOrWithdrawActivities;
                }
                _depositOrWithdrawActivities = value;
                var newValue = value as FixupCollection<DepositOrWithdrawActivity>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupDepositOrWithdrawActivities;
                }
            }

        }
    }
    private ICollection<DepositOrWithdrawActivity> _depositOrWithdrawActivities;

        #endregion

        #region Association Fixup
    

    private bool _settingFK = false;


    private void FixupL_ActivityType(L_ActivityType previousValue)
    {

        if (previousValue != null && previousValue.UserActivities.Contains(this))
        {
            previousValue.UserActivities.Remove(this);
        }


        if (L_ActivityType != null)
        {
            if (!L_ActivityType.UserActivities.Contains(this))
            {
                L_ActivityType.UserActivities.Add(this);
            }

            if (FK_ActivityTypeID != L_ActivityType.PK_ActivityTypeID)

            {
                FK_ActivityTypeID = L_ActivityType.PK_ActivityTypeID;
            }

        }

        else if (!_settingFK)

        {

            FK_ActivityTypeID = null;

        }

    }


    private void FixupUser(User previousValue)
    {

        if (previousValue != null && previousValue.UserActivities.Contains(this))
        {
            previousValue.UserActivities.Remove(this);
        }


        if (User != null)
        {
            if (!User.UserActivities.Contains(this))
            {
                User.UserActivities.Add(this);
            }

            if (FK_UserID != User.PK_UserID)

            {
                FK_UserID = User.PK_UserID;
            }

        }

        else if (!_settingFK)

        {

            FK_UserID = null;

        }

    }


    private void FixupProfileActivities(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (ProfileActivity item in e.NewItems)
            {

                item.UserActivity = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (ProfileActivity item in e.OldItems)
            {

                if (ReferenceEquals(item.UserActivity, this))
                {
                    item.UserActivity = null;
                }

            }
        }
    }


    private void FixupDocumentActivities(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (DocumentActivity item in e.NewItems)
            {

                item.UserActivity = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (DocumentActivity item in e.OldItems)
            {

                if (ReferenceEquals(item.UserActivity, this))
                {
                    item.UserActivity = null;
                }

            }
        }
    }


    private void FixupAccountActivities(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (AccountActivity item in e.NewItems)
            {

                item.UserActivity = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (AccountActivity item in e.OldItems)
            {

                if (ReferenceEquals(item.UserActivity, this))
                {
                    item.UserActivity = null;
                }

            }
        }
    }


    private void FixupTransferActivities(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (TransferActivity item in e.NewItems)
            {

                item.UserActivity = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (TransferActivity item in e.OldItems)
            {

                if (ReferenceEquals(item.UserActivity, this))
                {
                    item.UserActivity = null;
                }

            }
        }
    }


    private void FixupConversionActivities(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (ConversionActivity item in e.NewItems)
            {

                item.UserActivity = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (ConversionActivity item in e.OldItems)
            {

                if (ReferenceEquals(item.UserActivity, this))
                {
                    item.UserActivity = null;
                }

            }
        }
    }


    private void FixupDepositOrWithdrawActivities(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (DepositOrWithdrawActivity item in e.NewItems)
            {

                item.UserActivity = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (DepositOrWithdrawActivity item in e.OldItems)
            {

                if (ReferenceEquals(item.UserActivity, this))
                {
                    item.UserActivity = null;
                }

            }
        }
    }

        #endregion

    
}

}
