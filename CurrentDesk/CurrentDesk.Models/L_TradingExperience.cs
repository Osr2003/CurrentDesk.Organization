
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;


namespace CurrentDesk.Models
{

public partial class L_TradingExperience
{
    #region Primitive Properties
    

    public virtual int PK_ExperienceID
    {

        get;
        set;

    }


    public virtual string Experience
    {

        get;
        set;

    }

        #endregion

        #region Navigation Properties
    


    public virtual ICollection<AssetManager> AssetManagers
    {
        get
        {
            if (_assetManagers == null)
            {

                var newCollection = new FixupCollection<AssetManager>();
                newCollection.CollectionChanged += FixupAssetManagers;
                _assetManagers = newCollection;

            }
            return _assetManagers;
        }
        set
        {

            if (!ReferenceEquals(_assetManagers, value))
            {
                var previousValue = _assetManagers as FixupCollection<AssetManager>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupAssetManagers;
                }
                _assetManagers = value;
                var newValue = value as FixupCollection<AssetManager>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupAssetManagers;
                }
            }

        }
    }
    private ICollection<AssetManager> _assetManagers;



    public virtual ICollection<AssetManager> AssetManagers1
    {
        get
        {
            if (_assetManagers1 == null)
            {

                var newCollection = new FixupCollection<AssetManager>();
                newCollection.CollectionChanged += FixupAssetManagers1;
                _assetManagers1 = newCollection;

            }
            return _assetManagers1;
        }
        set
        {

            if (!ReferenceEquals(_assetManagers1, value))
            {
                var previousValue = _assetManagers1 as FixupCollection<AssetManager>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupAssetManagers1;
                }
                _assetManagers1 = value;
                var newValue = value as FixupCollection<AssetManager>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupAssetManagers1;
                }
            }

        }
    }
    private ICollection<AssetManager> _assetManagers1;



    public virtual ICollection<AssetManager> AssetManagers2
    {
        get
        {
            if (_assetManagers2 == null)
            {

                var newCollection = new FixupCollection<AssetManager>();
                newCollection.CollectionChanged += FixupAssetManagers2;
                _assetManagers2 = newCollection;

            }
            return _assetManagers2;
        }
        set
        {

            if (!ReferenceEquals(_assetManagers2, value))
            {
                var previousValue = _assetManagers2 as FixupCollection<AssetManager>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupAssetManagers2;
                }
                _assetManagers2 = value;
                var newValue = value as FixupCollection<AssetManager>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupAssetManagers2;
                }
            }

        }
    }
    private ICollection<AssetManager> _assetManagers2;



    public virtual ICollection<IntroducingBroker> IntroducingBrokers
    {
        get
        {
            if (_introducingBrokers == null)
            {

                var newCollection = new FixupCollection<IntroducingBroker>();
                newCollection.CollectionChanged += FixupIntroducingBrokers;
                _introducingBrokers = newCollection;

            }
            return _introducingBrokers;
        }
        set
        {

            if (!ReferenceEquals(_introducingBrokers, value))
            {
                var previousValue = _introducingBrokers as FixupCollection<IntroducingBroker>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupIntroducingBrokers;
                }
                _introducingBrokers = value;
                var newValue = value as FixupCollection<IntroducingBroker>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupIntroducingBrokers;
                }
            }

        }
    }
    private ICollection<IntroducingBroker> _introducingBrokers;



    public virtual ICollection<IntroducingBroker> IntroducingBrokers1
    {
        get
        {
            if (_introducingBrokers1 == null)
            {

                var newCollection = new FixupCollection<IntroducingBroker>();
                newCollection.CollectionChanged += FixupIntroducingBrokers1;
                _introducingBrokers1 = newCollection;

            }
            return _introducingBrokers1;
        }
        set
        {

            if (!ReferenceEquals(_introducingBrokers1, value))
            {
                var previousValue = _introducingBrokers1 as FixupCollection<IntroducingBroker>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupIntroducingBrokers1;
                }
                _introducingBrokers1 = value;
                var newValue = value as FixupCollection<IntroducingBroker>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupIntroducingBrokers1;
                }
            }

        }
    }
    private ICollection<IntroducingBroker> _introducingBrokers1;



    public virtual ICollection<IntroducingBroker> IntroducingBrokers2
    {
        get
        {
            if (_introducingBrokers2 == null)
            {

                var newCollection = new FixupCollection<IntroducingBroker>();
                newCollection.CollectionChanged += FixupIntroducingBrokers2;
                _introducingBrokers2 = newCollection;

            }
            return _introducingBrokers2;
        }
        set
        {

            if (!ReferenceEquals(_introducingBrokers2, value))
            {
                var previousValue = _introducingBrokers2 as FixupCollection<IntroducingBroker>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupIntroducingBrokers2;
                }
                _introducingBrokers2 = value;
                var newValue = value as FixupCollection<IntroducingBroker>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupIntroducingBrokers2;
                }
            }

        }
    }
    private ICollection<IntroducingBroker> _introducingBrokers2;



    public virtual ICollection<Client> Clients
    {
        get
        {
            if (_clients == null)
            {

                var newCollection = new FixupCollection<Client>();
                newCollection.CollectionChanged += FixupClients;
                _clients = newCollection;

            }
            return _clients;
        }
        set
        {

            if (!ReferenceEquals(_clients, value))
            {
                var previousValue = _clients as FixupCollection<Client>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupClients;
                }
                _clients = value;
                var newValue = value as FixupCollection<Client>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupClients;
                }
            }

        }
    }
    private ICollection<Client> _clients;



    public virtual ICollection<Client> Clients1
    {
        get
        {
            if (_clients1 == null)
            {

                var newCollection = new FixupCollection<Client>();
                newCollection.CollectionChanged += FixupClients1;
                _clients1 = newCollection;

            }
            return _clients1;
        }
        set
        {

            if (!ReferenceEquals(_clients1, value))
            {
                var previousValue = _clients1 as FixupCollection<Client>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupClients1;
                }
                _clients1 = value;
                var newValue = value as FixupCollection<Client>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupClients1;
                }
            }

        }
    }
    private ICollection<Client> _clients1;



    public virtual ICollection<Client> Clients2
    {
        get
        {
            if (_clients2 == null)
            {

                var newCollection = new FixupCollection<Client>();
                newCollection.CollectionChanged += FixupClients2;
                _clients2 = newCollection;

            }
            return _clients2;
        }
        set
        {

            if (!ReferenceEquals(_clients2, value))
            {
                var previousValue = _clients2 as FixupCollection<Client>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupClients2;
                }
                _clients2 = value;
                var newValue = value as FixupCollection<Client>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupClients2;
                }
            }

        }
    }
    private ICollection<Client> _clients2;



    public virtual ICollection<DemoLead> DemoLeads
    {
        get
        {
            if (_demoLeads == null)
            {

                var newCollection = new FixupCollection<DemoLead>();
                newCollection.CollectionChanged += FixupDemoLeads;
                _demoLeads = newCollection;

            }
            return _demoLeads;
        }
        set
        {

            if (!ReferenceEquals(_demoLeads, value))
            {
                var previousValue = _demoLeads as FixupCollection<DemoLead>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupDemoLeads;
                }
                _demoLeads = value;
                var newValue = value as FixupCollection<DemoLead>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupDemoLeads;
                }
            }

        }
    }
    private ICollection<DemoLead> _demoLeads;

        #endregion

        #region Association Fixup
    

    private void FixupAssetManagers(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (AssetManager item in e.NewItems)
            {

                item.L_TradingExperience = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (AssetManager item in e.OldItems)
            {

                if (ReferenceEquals(item.L_TradingExperience, this))
                {
                    item.L_TradingExperience = null;
                }

            }
        }
    }


    private void FixupAssetManagers1(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (AssetManager item in e.NewItems)
            {

                item.L_TradingExperience1 = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (AssetManager item in e.OldItems)
            {

                if (ReferenceEquals(item.L_TradingExperience1, this))
                {
                    item.L_TradingExperience1 = null;
                }

            }
        }
    }


    private void FixupAssetManagers2(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (AssetManager item in e.NewItems)
            {

                item.L_TradingExperience2 = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (AssetManager item in e.OldItems)
            {

                if (ReferenceEquals(item.L_TradingExperience2, this))
                {
                    item.L_TradingExperience2 = null;
                }

            }
        }
    }


    private void FixupIntroducingBrokers(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (IntroducingBroker item in e.NewItems)
            {

                item.L_TradingExperience = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (IntroducingBroker item in e.OldItems)
            {

                if (ReferenceEquals(item.L_TradingExperience, this))
                {
                    item.L_TradingExperience = null;
                }

            }
        }
    }


    private void FixupIntroducingBrokers1(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (IntroducingBroker item in e.NewItems)
            {

                item.L_TradingExperience1 = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (IntroducingBroker item in e.OldItems)
            {

                if (ReferenceEquals(item.L_TradingExperience1, this))
                {
                    item.L_TradingExperience1 = null;
                }

            }
        }
    }


    private void FixupIntroducingBrokers2(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (IntroducingBroker item in e.NewItems)
            {

                item.L_TradingExperience2 = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (IntroducingBroker item in e.OldItems)
            {

                if (ReferenceEquals(item.L_TradingExperience2, this))
                {
                    item.L_TradingExperience2 = null;
                }

            }
        }
    }


    private void FixupClients(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Client item in e.NewItems)
            {

                item.L_TradingExperience = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (Client item in e.OldItems)
            {

                if (ReferenceEquals(item.L_TradingExperience, this))
                {
                    item.L_TradingExperience = null;
                }

            }
        }
    }


    private void FixupClients1(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Client item in e.NewItems)
            {

                item.L_TradingExperience1 = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (Client item in e.OldItems)
            {

                if (ReferenceEquals(item.L_TradingExperience1, this))
                {
                    item.L_TradingExperience1 = null;
                }

            }
        }
    }


    private void FixupClients2(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Client item in e.NewItems)
            {

                item.L_TradingExperience2 = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (Client item in e.OldItems)
            {

                if (ReferenceEquals(item.L_TradingExperience2, this))
                {
                    item.L_TradingExperience2 = null;
                }

            }
        }
    }


    private void FixupDemoLeads(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (DemoLead item in e.NewItems)
            {

                item.L_TradingExperience = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (DemoLead item in e.OldItems)
            {

                if (ReferenceEquals(item.L_TradingExperience, this))
                {
                    item.L_TradingExperience = null;
                }

            }
        }
    }

        #endregion

    
}

}
