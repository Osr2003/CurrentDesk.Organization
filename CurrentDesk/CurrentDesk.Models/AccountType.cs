
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;


namespace CurrentDesk.Models
{

public partial class AccountType
{
    #region Primitive Properties
    

    public virtual int PK_AccountType
    {

        get;
        set;

    }


    public virtual int FK_AccountFormType
    {

        get;
        set;

    }


    public virtual int FK_AccountTypeValue
    {

        get { return _fK_AccountTypeValue; }
        set
        {

            if (_fK_AccountTypeValue != value)

            {

                if (L_AccountTypeValue != null && L_AccountTypeValue.PK_AccountTypeValueID != value)

                {

                    L_AccountTypeValue = null;

                }

                _fK_AccountTypeValue = value;
            }

        }

    }

    private int _fK_AccountTypeValue;


    public virtual int FK_OrganizationID
    {

        get { return _fK_OrganizationID; }
        set
        {

            if (_fK_OrganizationID != value)

            {

                if (Organization != null && Organization.PK_OrganizationID != value)

                {

                    Organization = null;

                }

                _fK_OrganizationID = value;
            }

        }

    }

    private int _fK_OrganizationID;

        #endregion

        #region Navigation Properties
    


    public virtual L_AccountTypeValue L_AccountTypeValue
    {

        get { return _l_AccountTypeValue; }
        set
        {
            if (!ReferenceEquals(_l_AccountTypeValue, value))
            {
                var previousValue = _l_AccountTypeValue;
                _l_AccountTypeValue = value;
                FixupL_AccountTypeValue(previousValue);
            }
        }
    }
    private L_AccountTypeValue _l_AccountTypeValue;



    public virtual ICollection<AssetManager> AssetManagers
    {
        get
        {
            if (_assetManagers == null)
            {

                var newCollection = new FixupCollection<AssetManager>();
                newCollection.CollectionChanged += FixupAssetManagers;
                _assetManagers = newCollection;

            }
            return _assetManagers;
        }
        set
        {

            if (!ReferenceEquals(_assetManagers, value))
            {
                var previousValue = _assetManagers as FixupCollection<AssetManager>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupAssetManagers;
                }
                _assetManagers = value;
                var newValue = value as FixupCollection<AssetManager>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupAssetManagers;
                }
            }

        }
    }
    private ICollection<AssetManager> _assetManagers;



    public virtual ICollection<IntroducingBroker> IntroducingBrokers
    {
        get
        {
            if (_introducingBrokers == null)
            {

                var newCollection = new FixupCollection<IntroducingBroker>();
                newCollection.CollectionChanged += FixupIntroducingBrokers;
                _introducingBrokers = newCollection;

            }
            return _introducingBrokers;
        }
        set
        {

            if (!ReferenceEquals(_introducingBrokers, value))
            {
                var previousValue = _introducingBrokers as FixupCollection<IntroducingBroker>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupIntroducingBrokers;
                }
                _introducingBrokers = value;
                var newValue = value as FixupCollection<IntroducingBroker>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupIntroducingBrokers;
                }
            }

        }
    }
    private ICollection<IntroducingBroker> _introducingBrokers;



    public virtual ICollection<LiveLead> LiveLeads
    {
        get
        {
            if (_liveLeads == null)
            {

                var newCollection = new FixupCollection<LiveLead>();
                newCollection.CollectionChanged += FixupLiveLeads;
                _liveLeads = newCollection;

            }
            return _liveLeads;
        }
        set
        {

            if (!ReferenceEquals(_liveLeads, value))
            {
                var previousValue = _liveLeads as FixupCollection<LiveLead>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupLiveLeads;
                }
                _liveLeads = value;
                var newValue = value as FixupCollection<LiveLead>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupLiveLeads;
                }
            }

        }
    }
    private ICollection<LiveLead> _liveLeads;



    public virtual ICollection<Client> Clients
    {
        get
        {
            if (_clients == null)
            {

                var newCollection = new FixupCollection<Client>();
                newCollection.CollectionChanged += FixupClients;
                _clients = newCollection;

            }
            return _clients;
        }
        set
        {

            if (!ReferenceEquals(_clients, value))
            {
                var previousValue = _clients as FixupCollection<Client>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupClients;
                }
                _clients = value;
                var newValue = value as FixupCollection<Client>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupClients;
                }
            }

        }
    }
    private ICollection<Client> _clients;



    public virtual ICollection<R_UserDocument> R_UserDocument
    {
        get
        {
            if (_r_UserDocument == null)
            {

                var newCollection = new FixupCollection<R_UserDocument>();
                newCollection.CollectionChanged += FixupR_UserDocument;
                _r_UserDocument = newCollection;

            }
            return _r_UserDocument;
        }
        set
        {

            if (!ReferenceEquals(_r_UserDocument, value))
            {
                var previousValue = _r_UserDocument as FixupCollection<R_UserDocument>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupR_UserDocument;
                }
                _r_UserDocument = value;
                var newValue = value as FixupCollection<R_UserDocument>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupR_UserDocument;
                }
            }

        }
    }
    private ICollection<R_UserDocument> _r_UserDocument;



    public virtual ICollection<DemoLead> DemoLeads
    {
        get
        {
            if (_demoLeads == null)
            {

                var newCollection = new FixupCollection<DemoLead>();
                newCollection.CollectionChanged += FixupDemoLeads;
                _demoLeads = newCollection;

            }
            return _demoLeads;
        }
        set
        {

            if (!ReferenceEquals(_demoLeads, value))
            {
                var previousValue = _demoLeads as FixupCollection<DemoLead>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupDemoLeads;
                }
                _demoLeads = value;
                var newValue = value as FixupCollection<DemoLead>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupDemoLeads;
                }
            }

        }
    }
    private ICollection<DemoLead> _demoLeads;



    public virtual Organization Organization
    {

        get { return _organization; }
        set
        {
            if (!ReferenceEquals(_organization, value))
            {
                var previousValue = _organization;
                _organization = value;
                FixupOrganization(previousValue);
            }
        }
    }
    private Organization _organization;

        #endregion

        #region Association Fixup
    

    private void FixupL_AccountTypeValue(L_AccountTypeValue previousValue)
    {

        if (previousValue != null && previousValue.AccountTypes.Contains(this))
        {
            previousValue.AccountTypes.Remove(this);
        }


        if (L_AccountTypeValue != null)
        {
            if (!L_AccountTypeValue.AccountTypes.Contains(this))
            {
                L_AccountTypeValue.AccountTypes.Add(this);
            }

            if (FK_AccountTypeValue != L_AccountTypeValue.PK_AccountTypeValueID)

            {
                FK_AccountTypeValue = L_AccountTypeValue.PK_AccountTypeValueID;
            }

        }

    }


    private void FixupOrganization(Organization previousValue)
    {

        if (previousValue != null && previousValue.AccountTypes.Contains(this))
        {
            previousValue.AccountTypes.Remove(this);
        }


        if (Organization != null)
        {
            if (!Organization.AccountTypes.Contains(this))
            {
                Organization.AccountTypes.Add(this);
            }

            if (FK_OrganizationID != Organization.PK_OrganizationID)

            {
                FK_OrganizationID = Organization.PK_OrganizationID;
            }

        }

    }


    private void FixupAssetManagers(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (AssetManager item in e.NewItems)
            {

                item.AccountType = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (AssetManager item in e.OldItems)
            {

                if (ReferenceEquals(item.AccountType, this))
                {
                    item.AccountType = null;
                }

            }
        }
    }


    private void FixupIntroducingBrokers(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (IntroducingBroker item in e.NewItems)
            {

                item.AccountType = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (IntroducingBroker item in e.OldItems)
            {

                if (ReferenceEquals(item.AccountType, this))
                {
                    item.AccountType = null;
                }

            }
        }
    }


    private void FixupLiveLeads(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (LiveLead item in e.NewItems)
            {

                item.AccountType = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (LiveLead item in e.OldItems)
            {

                if (ReferenceEquals(item.AccountType, this))
                {
                    item.AccountType = null;
                }

            }
        }
    }


    private void FixupClients(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Client item in e.NewItems)
            {

                item.AccountType = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (Client item in e.OldItems)
            {

                if (ReferenceEquals(item.AccountType, this))
                {
                    item.AccountType = null;
                }

            }
        }
    }


    private void FixupR_UserDocument(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (R_UserDocument item in e.NewItems)
            {

                item.AccountType = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (R_UserDocument item in e.OldItems)
            {

                if (ReferenceEquals(item.AccountType, this))
                {
                    item.AccountType = null;
                }

            }
        }
    }


    private void FixupDemoLeads(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (DemoLead item in e.NewItems)
            {

                item.AccountType = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (DemoLead item in e.OldItems)
            {

                if (ReferenceEquals(item.AccountType, this))
                {
                    item.AccountType = null;
                }

            }
        }
    }

        #endregion

    
}

}
