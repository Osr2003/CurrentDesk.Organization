
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;


namespace CurrentDesk.Models
{

public partial class TradingPlatform
{
    #region Primitive Properties
    

    public virtual int PK_TradingPlatformID
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_AccountFormTypeID
    {

        get { return _fK_AccountFormTypeID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_AccountFormTypeID != value)

            {

                if (L_AccountFormType != null && L_AccountFormType.PK_AccountFormID != value)

                {

                    L_AccountFormType = null;

                }

                _fK_AccountFormTypeID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_AccountFormTypeID;


    public virtual Nullable<int> FK_TradingValueID
    {

        get { return _fK_TradingValueID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_TradingValueID != value)

            {

                if (L_TradingPlatformValues != null && L_TradingPlatformValues.PK_TradingValueID != value)

                {

                    L_TradingPlatformValues = null;

                }

                _fK_TradingValueID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_TradingValueID;


    public virtual int FK_OrganizationID
    {

        get { return _fK_OrganizationID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_OrganizationID != value)

            {

                if (Organization != null && Organization.PK_OrganizationID != value)

                {

                    Organization = null;

                }

                _fK_OrganizationID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private int _fK_OrganizationID;

        #endregion

        #region Navigation Properties
    


    public virtual ICollection<AssetManager> AssetManagers
    {
        get
        {
            if (_assetManagers == null)
            {

                var newCollection = new FixupCollection<AssetManager>();
                newCollection.CollectionChanged += FixupAssetManagers;
                _assetManagers = newCollection;

            }
            return _assetManagers;
        }
        set
        {

            if (!ReferenceEquals(_assetManagers, value))
            {
                var previousValue = _assetManagers as FixupCollection<AssetManager>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupAssetManagers;
                }
                _assetManagers = value;
                var newValue = value as FixupCollection<AssetManager>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupAssetManagers;
                }
            }

        }
    }
    private ICollection<AssetManager> _assetManagers;



    public virtual ICollection<IntroducingBroker> IntroducingBrokers
    {
        get
        {
            if (_introducingBrokers == null)
            {

                var newCollection = new FixupCollection<IntroducingBroker>();
                newCollection.CollectionChanged += FixupIntroducingBrokers;
                _introducingBrokers = newCollection;

            }
            return _introducingBrokers;
        }
        set
        {

            if (!ReferenceEquals(_introducingBrokers, value))
            {
                var previousValue = _introducingBrokers as FixupCollection<IntroducingBroker>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupIntroducingBrokers;
                }
                _introducingBrokers = value;
                var newValue = value as FixupCollection<IntroducingBroker>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupIntroducingBrokers;
                }
            }

        }
    }
    private ICollection<IntroducingBroker> _introducingBrokers;



    public virtual L_AccountFormType L_AccountFormType
    {

        get { return _l_AccountFormType; }
        set
        {
            if (!ReferenceEquals(_l_AccountFormType, value))
            {
                var previousValue = _l_AccountFormType;
                _l_AccountFormType = value;
                FixupL_AccountFormType(previousValue);
            }
        }
    }
    private L_AccountFormType _l_AccountFormType;



    public virtual L_TradingPlatformValues L_TradingPlatformValues
    {

        get { return _l_TradingPlatformValues; }
        set
        {
            if (!ReferenceEquals(_l_TradingPlatformValues, value))
            {
                var previousValue = _l_TradingPlatformValues;
                _l_TradingPlatformValues = value;
                FixupL_TradingPlatformValues(previousValue);
            }
        }
    }
    private L_TradingPlatformValues _l_TradingPlatformValues;



    public virtual ICollection<LiveLead> LiveLeads
    {
        get
        {
            if (_liveLeads == null)
            {

                var newCollection = new FixupCollection<LiveLead>();
                newCollection.CollectionChanged += FixupLiveLeads;
                _liveLeads = newCollection;

            }
            return _liveLeads;
        }
        set
        {

            if (!ReferenceEquals(_liveLeads, value))
            {
                var previousValue = _liveLeads as FixupCollection<LiveLead>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupLiveLeads;
                }
                _liveLeads = value;
                var newValue = value as FixupCollection<LiveLead>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupLiveLeads;
                }
            }

        }
    }
    private ICollection<LiveLead> _liveLeads;



    public virtual ICollection<Client> Clients
    {
        get
        {
            if (_clients == null)
            {

                var newCollection = new FixupCollection<Client>();
                newCollection.CollectionChanged += FixupClients;
                _clients = newCollection;

            }
            return _clients;
        }
        set
        {

            if (!ReferenceEquals(_clients, value))
            {
                var previousValue = _clients as FixupCollection<Client>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupClients;
                }
                _clients = value;
                var newValue = value as FixupCollection<Client>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupClients;
                }
            }

        }
    }
    private ICollection<Client> _clients;



    public virtual ICollection<ManagedAccountProgram> ManagedAccountPrograms
    {
        get
        {
            if (_managedAccountPrograms == null)
            {

                var newCollection = new FixupCollection<ManagedAccountProgram>();
                newCollection.CollectionChanged += FixupManagedAccountPrograms;
                _managedAccountPrograms = newCollection;

            }
            return _managedAccountPrograms;
        }
        set
        {

            if (!ReferenceEquals(_managedAccountPrograms, value))
            {
                var previousValue = _managedAccountPrograms as FixupCollection<ManagedAccountProgram>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupManagedAccountPrograms;
                }
                _managedAccountPrograms = value;
                var newValue = value as FixupCollection<ManagedAccountProgram>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupManagedAccountPrograms;
                }
            }

        }
    }
    private ICollection<ManagedAccountProgram> _managedAccountPrograms;



    public virtual ICollection<DemoLead> DemoLeads
    {
        get
        {
            if (_demoLeads == null)
            {

                var newCollection = new FixupCollection<DemoLead>();
                newCollection.CollectionChanged += FixupDemoLeads;
                _demoLeads = newCollection;

            }
            return _demoLeads;
        }
        set
        {

            if (!ReferenceEquals(_demoLeads, value))
            {
                var previousValue = _demoLeads as FixupCollection<DemoLead>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupDemoLeads;
                }
                _demoLeads = value;
                var newValue = value as FixupCollection<DemoLead>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupDemoLeads;
                }
            }

        }
    }
    private ICollection<DemoLead> _demoLeads;



    public virtual Organization Organization
    {

        get { return _organization; }
        set
        {
            if (!ReferenceEquals(_organization, value))
            {
                var previousValue = _organization;
                _organization = value;
                FixupOrganization(previousValue);
            }
        }
    }
    private Organization _organization;

        #endregion

        #region Association Fixup
    

    private bool _settingFK = false;


    private void FixupL_AccountFormType(L_AccountFormType previousValue)
    {

        if (previousValue != null && previousValue.TradingPlatforms.Contains(this))
        {
            previousValue.TradingPlatforms.Remove(this);
        }


        if (L_AccountFormType != null)
        {
            if (!L_AccountFormType.TradingPlatforms.Contains(this))
            {
                L_AccountFormType.TradingPlatforms.Add(this);
            }

            if (FK_AccountFormTypeID != L_AccountFormType.PK_AccountFormID)

            {
                FK_AccountFormTypeID = L_AccountFormType.PK_AccountFormID;
            }

        }

        else if (!_settingFK)

        {

            FK_AccountFormTypeID = null;

        }

    }


    private void FixupL_TradingPlatformValues(L_TradingPlatformValues previousValue)
    {

        if (previousValue != null && previousValue.TradingPlatforms.Contains(this))
        {
            previousValue.TradingPlatforms.Remove(this);
        }


        if (L_TradingPlatformValues != null)
        {
            if (!L_TradingPlatformValues.TradingPlatforms.Contains(this))
            {
                L_TradingPlatformValues.TradingPlatforms.Add(this);
            }

            if (FK_TradingValueID != L_TradingPlatformValues.PK_TradingValueID)

            {
                FK_TradingValueID = L_TradingPlatformValues.PK_TradingValueID;
            }

        }

        else if (!_settingFK)

        {

            FK_TradingValueID = null;

        }

    }


    private void FixupOrganization(Organization previousValue)
    {

        if (previousValue != null && previousValue.TradingPlatforms.Contains(this))
        {
            previousValue.TradingPlatforms.Remove(this);
        }


        if (Organization != null)
        {
            if (!Organization.TradingPlatforms.Contains(this))
            {
                Organization.TradingPlatforms.Add(this);
            }

            if (FK_OrganizationID != Organization.PK_OrganizationID)

            {
                FK_OrganizationID = Organization.PK_OrganizationID;
            }

        }

    }


    private void FixupAssetManagers(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (AssetManager item in e.NewItems)
            {

                item.TradingPlatform = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (AssetManager item in e.OldItems)
            {

                if (ReferenceEquals(item.TradingPlatform, this))
                {
                    item.TradingPlatform = null;
                }

            }
        }
    }


    private void FixupIntroducingBrokers(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (IntroducingBroker item in e.NewItems)
            {

                item.TradingPlatform = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (IntroducingBroker item in e.OldItems)
            {

                if (ReferenceEquals(item.TradingPlatform, this))
                {
                    item.TradingPlatform = null;
                }

            }
        }
    }


    private void FixupLiveLeads(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (LiveLead item in e.NewItems)
            {

                item.TradingPlatform = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (LiveLead item in e.OldItems)
            {

                if (ReferenceEquals(item.TradingPlatform, this))
                {
                    item.TradingPlatform = null;
                }

            }
        }
    }


    private void FixupClients(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Client item in e.NewItems)
            {

                item.TradingPlatform = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (Client item in e.OldItems)
            {

                if (ReferenceEquals(item.TradingPlatform, this))
                {
                    item.TradingPlatform = null;
                }

            }
        }
    }


    private void FixupManagedAccountPrograms(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (ManagedAccountProgram item in e.NewItems)
            {

                item.TradingPlatform = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (ManagedAccountProgram item in e.OldItems)
            {

                if (ReferenceEquals(item.TradingPlatform, this))
                {
                    item.TradingPlatform = null;
                }

            }
        }
    }


    private void FixupDemoLeads(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (DemoLead item in e.NewItems)
            {

                item.TradingPlatform = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (DemoLead item in e.OldItems)
            {

                if (ReferenceEquals(item.TradingPlatform, this))
                {
                    item.TradingPlatform = null;
                }

            }
        }
    }

        #endregion

    
}

}
