
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;


namespace CurrentDesk.Models
{

public partial class Document
{
    #region Primitive Properties
    

    public virtual int PK_DocumentID
    {

        get;
        set;

    }


    public virtual string DocumentName
    {

        get;
        set;

    }

        #endregion

        #region Navigation Properties
    


    public virtual ICollection<R_UserDocument> R_UserDocument
    {
        get
        {
            if (_r_UserDocument == null)
            {

                var newCollection = new FixupCollection<R_UserDocument>();
                newCollection.CollectionChanged += FixupR_UserDocument;
                _r_UserDocument = newCollection;

            }
            return _r_UserDocument;
        }
        set
        {

            if (!ReferenceEquals(_r_UserDocument, value))
            {
                var previousValue = _r_UserDocument as FixupCollection<R_UserDocument>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupR_UserDocument;
                }
                _r_UserDocument = value;
                var newValue = value as FixupCollection<R_UserDocument>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupR_UserDocument;
                }
            }

        }
    }
    private ICollection<R_UserDocument> _r_UserDocument;



    public virtual ICollection<UserDocument> UserDocuments
    {
        get
        {
            if (_userDocuments == null)
            {

                var newCollection = new FixupCollection<UserDocument>();
                newCollection.CollectionChanged += FixupUserDocuments;
                _userDocuments = newCollection;

            }
            return _userDocuments;
        }
        set
        {

            if (!ReferenceEquals(_userDocuments, value))
            {
                var previousValue = _userDocuments as FixupCollection<UserDocument>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupUserDocuments;
                }
                _userDocuments = value;
                var newValue = value as FixupCollection<UserDocument>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupUserDocuments;
                }
            }

        }
    }
    private ICollection<UserDocument> _userDocuments;



    public virtual ICollection<DocumentActivity> DocumentActivities
    {
        get
        {
            if (_documentActivities == null)
            {

                var newCollection = new FixupCollection<DocumentActivity>();
                newCollection.CollectionChanged += FixupDocumentActivities;
                _documentActivities = newCollection;

            }
            return _documentActivities;
        }
        set
        {

            if (!ReferenceEquals(_documentActivities, value))
            {
                var previousValue = _documentActivities as FixupCollection<DocumentActivity>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupDocumentActivities;
                }
                _documentActivities = value;
                var newValue = value as FixupCollection<DocumentActivity>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupDocumentActivities;
                }
            }

        }
    }
    private ICollection<DocumentActivity> _documentActivities;

        #endregion

        #region Association Fixup
    

    private void FixupR_UserDocument(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (R_UserDocument item in e.NewItems)
            {

                item.Document = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (R_UserDocument item in e.OldItems)
            {

                if (ReferenceEquals(item.Document, this))
                {
                    item.Document = null;
                }

            }
        }
    }


    private void FixupUserDocuments(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (UserDocument item in e.NewItems)
            {

                item.Document = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (UserDocument item in e.OldItems)
            {

                if (ReferenceEquals(item.Document, this))
                {
                    item.Document = null;
                }

            }
        }
    }


    private void FixupDocumentActivities(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (DocumentActivity item in e.NewItems)
            {

                item.Document = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (DocumentActivity item in e.OldItems)
            {

                if (ReferenceEquals(item.Document, this))
                {
                    item.Document = null;
                }

            }
        }
    }

        #endregion

    
}

}
