
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;


namespace CurrentDesk.Models
{

public partial class BOMAMTrade
{
    #region Primitive Properties
    

    public virtual long PK_BOMAMTradesID
    {

        get;
        set;

    }


    public virtual int FK_IBID
    {

        get { return _fK_IBID; }
        set
        {

            if (_fK_IBID != value)

            {

                if (IntroducingBroker != null && IntroducingBroker.PK_IntroducingBrokerID != value)

                {

                    IntroducingBroker = null;

                }

                _fK_IBID = value;
            }

        }

    }

    private int _fK_IBID;


    public virtual int FK_ClientAccountID
    {

        get { return _fK_ClientAccountID; }
        set
        {

            if (_fK_ClientAccountID != value)

            {

                if (Client_Account != null && Client_Account.PK_ClientAccountID != value)

                {

                    Client_Account = null;

                }

                _fK_ClientAccountID = value;
            }

        }

    }

    private int _fK_ClientAccountID;


    public virtual int OrderID
    {

        get;
        set;

    }


    public virtual string Symbol
    {

        get;
        set;

    }


    public virtual double Size
    {

        get;
        set;

    }


    public virtual Nullable<double> OpenPrice
    {

        get;
        set;

    }


    public virtual Nullable<long> OpenTime
    {

        get;
        set;

    }


    public virtual Nullable<double> ClosePrice
    {

        get;
        set;

    }


    public virtual Nullable<long> CloseTime
    {

        get;
        set;

    }


    public virtual Nullable<double> Commission
    {

        get;
        set;

    }


    public virtual string Agent
    {

        get;
        set;

    }


    public virtual Nullable<double> Swap
    {

        get;
        set;

    }


    public virtual Nullable<double> Pnl
    {

        get;
        set;

    }


    public virtual string Comments
    {

        get;
        set;

    }


    public virtual bool IsopenTrades
    {

        get;
        set;

    }


    public virtual int LastIDProcessed
    {

        get;
        set;

    }

        #endregion

        #region Navigation Properties
    


    public virtual IntroducingBroker IntroducingBroker
    {

        get { return _introducingBroker; }
        set
        {
            if (!ReferenceEquals(_introducingBroker, value))
            {
                var previousValue = _introducingBroker;
                _introducingBroker = value;
                FixupIntroducingBroker(previousValue);
            }
        }
    }
    private IntroducingBroker _introducingBroker;



    public virtual Client_Account Client_Account
    {

        get { return _client_Account; }
        set
        {
            if (!ReferenceEquals(_client_Account, value))
            {
                var previousValue = _client_Account;
                _client_Account = value;
                FixupClient_Account(previousValue);
            }
        }
    }
    private Client_Account _client_Account;

        #endregion

        #region Association Fixup
    

    private void FixupIntroducingBroker(IntroducingBroker previousValue)
    {

        if (previousValue != null && previousValue.BOMAMTrades.Contains(this))
        {
            previousValue.BOMAMTrades.Remove(this);
        }


        if (IntroducingBroker != null)
        {
            if (!IntroducingBroker.BOMAMTrades.Contains(this))
            {
                IntroducingBroker.BOMAMTrades.Add(this);
            }

            if (FK_IBID != IntroducingBroker.PK_IntroducingBrokerID)

            {
                FK_IBID = IntroducingBroker.PK_IntroducingBrokerID;
            }

        }

    }


    private void FixupClient_Account(Client_Account previousValue)
    {

        if (previousValue != null && previousValue.BOMAMTrades.Contains(this))
        {
            previousValue.BOMAMTrades.Remove(this);
        }


        if (Client_Account != null)
        {
            if (!Client_Account.BOMAMTrades.Contains(this))
            {
                Client_Account.BOMAMTrades.Add(this);
            }

            if (FK_ClientAccountID != Client_Account.PK_ClientAccountID)

            {
                FK_ClientAccountID = Client_Account.PK_ClientAccountID;
            }

        }

    }

        #endregion

    
}

}
