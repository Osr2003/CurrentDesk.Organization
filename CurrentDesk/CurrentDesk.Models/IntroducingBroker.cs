
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;


namespace CurrentDesk.Models
{

public partial class IntroducingBroker
{
    #region Primitive Properties
    

    public virtual int PK_IntroducingBrokerID
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_AccountID
    {

        get { return _fK_AccountID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_AccountID != value)

            {

                if (L_AccountCode != null && L_AccountCode.PK_AccountID != value)

                {

                    L_AccountCode = null;

                }

                _fK_AccountID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_AccountID;


    public virtual Nullable<int> FK_AccountTypeID
    {

        get { return _fK_AccountTypeID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_AccountTypeID != value)

            {

                if (AccountType != null && AccountType.PK_AccountType != value)

                {

                    AccountType = null;

                }

                _fK_AccountTypeID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_AccountTypeID;


    public virtual Nullable<int> FK_TradingPlatformID
    {

        get { return _fK_TradingPlatformID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_TradingPlatformID != value)

            {

                if (TradingPlatform != null && TradingPlatform.PK_TradingPlatformID != value)

                {

                    TradingPlatform = null;

                }

                _fK_TradingPlatformID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_TradingPlatformID;


    public virtual Nullable<int> FK_WidenSpreadsID
    {

        get { return _fK_WidenSpreadsID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_WidenSpreadsID != value)

            {

                if (L_WidenSpreadsValue != null && L_WidenSpreadsValue.PK_WidenSpreadsID != value)

                {

                    L_WidenSpreadsValue = null;

                }

                _fK_WidenSpreadsID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_WidenSpreadsID;


    public virtual Nullable<int> FK_CommissionIncrementID
    {

        get { return _fK_CommissionIncrementID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_CommissionIncrementID != value)

            {

                if (L_CommissionIncrementValue != null && L_CommissionIncrementValue.PK_CommissionIncrementID != value)

                {

                    L_CommissionIncrementValue = null;

                }

                _fK_CommissionIncrementID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_CommissionIncrementID;


    public virtual string BankName
    {

        get;
        set;

    }


    public virtual string AccountNumber
    {

        get;
        set;

    }


    public virtual string BicNumberOrSwiftCode
    {

        get;
        set;

    }


    public virtual string BankingAddress
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_ReceivingBankInformationID
    {

        get { return _fK_ReceivingBankInformationID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_ReceivingBankInformationID != value)

            {

                if (L_RecievingBank != null && L_RecievingBank.PK_RecievingBankID != value)

                {

                    L_RecievingBank = null;

                }

                _fK_ReceivingBankInformationID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_ReceivingBankInformationID;


    public virtual string City
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_CountryID
    {

        get { return _fK_CountryID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_CountryID != value)

            {

                if (L_Country != null && L_Country.PK_CountryID != value)

                {

                    L_Country = null;

                }

                _fK_CountryID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_CountryID;


    public virtual string PostalCode
    {

        get;
        set;

    }


    public virtual string EstimatedAnnualIncome
    {

        get;
        set;

    }


    public virtual string LiquidAssets
    {

        get;
        set;

    }


    public virtual string NetWorthInEuros
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_TradingSecurityExperienceID
    {

        get { return _fK_TradingSecurityExperienceID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_TradingSecurityExperienceID != value)

            {

                if (L_TradingExperience2 != null && L_TradingExperience2.PK_ExperienceID != value)

                {

                    L_TradingExperience2 = null;

                }

                _fK_TradingSecurityExperienceID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_TradingSecurityExperienceID;


    public virtual Nullable<int> FK_TradingOptionExperienceID
    {

        get { return _fK_TradingOptionExperienceID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_TradingOptionExperienceID != value)

            {

                if (L_TradingExperience1 != null && L_TradingExperience1.PK_ExperienceID != value)

                {

                    L_TradingExperience1 = null;

                }

                _fK_TradingOptionExperienceID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_TradingOptionExperienceID;


    public virtual Nullable<int> FK_TradingForeignExchangeExperienceID
    {

        get { return _fK_TradingForeignExchangeExperienceID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_TradingForeignExchangeExperienceID != value)

            {

                if (L_TradingExperience != null && L_TradingExperience.PK_ExperienceID != value)

                {

                    L_TradingExperience = null;

                }

                _fK_TradingForeignExchangeExperienceID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_TradingForeignExchangeExperienceID;


    public virtual Nullable<bool> IsHavingAccount
    {

        get;
        set;

    }


    public virtual Nullable<bool> IsRegisterdWithEntity
    {

        get;
        set;

    }


    public virtual Nullable<bool> IsRegisteredWithRegulator
    {

        get;
        set;

    }


    public virtual Nullable<bool> IsEmployeeOfExchangeOrRegulator
    {

        get;
        set;

    }


    public virtual Nullable<bool> IsDeclaredBankruptcy
    {

        get;
        set;

    }


    public virtual Nullable<double> DefaultMarkup
    {

        get;
        set;

    }


    public virtual string UserEmail
    {

        get;
        set;

    }


    public virtual string Password
    {

        get;
        set;

    }


    public virtual Nullable<bool> IsEnglishSpeaking
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_PreferredLanguage
    {

        get { return _fK_PreferredLanguage; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_PreferredLanguage != value)

            {

                if (L_Languages != null && L_Languages.PK_LanguageID != value)

                {

                    L_Languages = null;

                }

                _fK_PreferredLanguage = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_PreferredLanguage;


    public virtual string ReceivingBankInfo
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_AccountCurrencyID
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_UserID
    {

        get { return _fK_UserID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_UserID != value)

            {

                if (User != null && User.PK_UserID != value)

                {

                    User = null;

                }

                _fK_UserID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_UserID;


    public virtual Nullable<bool> IsAssetManager
    {

        get;
        set;

    }


    public virtual Nullable<bool> IsIntroducingBroker
    {

        get;
        set;

    }


    public virtual string CustomizedLink
    {

        get;
        set;

    }


    public virtual bool IsBOMAM
    {

        get;
        set;

    }


    public virtual int FK_OrganizationID
    {

        get { return _fK_OrganizationID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_OrganizationID != value)

            {

                if (Organization != null && Organization.PK_OrganizationID != value)

                {

                    Organization = null;

                }

                _fK_OrganizationID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private int _fK_OrganizationID;

        #endregion

        #region Navigation Properties
    


    public virtual AccountType AccountType
    {

        get { return _accountType; }
        set
        {
            if (!ReferenceEquals(_accountType, value))
            {
                var previousValue = _accountType;
                _accountType = value;
                FixupAccountType(previousValue);
            }
        }
    }
    private AccountType _accountType;



    public virtual ICollection<AssetManager> AssetManagers
    {
        get
        {
            if (_assetManagers == null)
            {

                var newCollection = new FixupCollection<AssetManager>();
                newCollection.CollectionChanged += FixupAssetManagers;
                _assetManagers = newCollection;

            }
            return _assetManagers;
        }
        set
        {

            if (!ReferenceEquals(_assetManagers, value))
            {
                var previousValue = _assetManagers as FixupCollection<AssetManager>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupAssetManagers;
                }
                _assetManagers = value;
                var newValue = value as FixupCollection<AssetManager>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupAssetManagers;
                }
            }

        }
    }
    private ICollection<AssetManager> _assetManagers;



    public virtual ICollection<CorporateAccountInformation> CorporateAccountInformations
    {
        get
        {
            if (_corporateAccountInformations == null)
            {

                var newCollection = new FixupCollection<CorporateAccountInformation>();
                newCollection.CollectionChanged += FixupCorporateAccountInformations;
                _corporateAccountInformations = newCollection;

            }
            return _corporateAccountInformations;
        }
        set
        {

            if (!ReferenceEquals(_corporateAccountInformations, value))
            {
                var previousValue = _corporateAccountInformations as FixupCollection<CorporateAccountInformation>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupCorporateAccountInformations;
                }
                _corporateAccountInformations = value;
                var newValue = value as FixupCollection<CorporateAccountInformation>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupCorporateAccountInformations;
                }
            }

        }
    }
    private ICollection<CorporateAccountInformation> _corporateAccountInformations;



    public virtual ICollection<IndividualAccountInformation> IndividualAccountInformations
    {
        get
        {
            if (_individualAccountInformations == null)
            {

                var newCollection = new FixupCollection<IndividualAccountInformation>();
                newCollection.CollectionChanged += FixupIndividualAccountInformations;
                _individualAccountInformations = newCollection;

            }
            return _individualAccountInformations;
        }
        set
        {

            if (!ReferenceEquals(_individualAccountInformations, value))
            {
                var previousValue = _individualAccountInformations as FixupCollection<IndividualAccountInformation>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupIndividualAccountInformations;
                }
                _individualAccountInformations = value;
                var newValue = value as FixupCollection<IndividualAccountInformation>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupIndividualAccountInformations;
                }
            }

        }
    }
    private ICollection<IndividualAccountInformation> _individualAccountInformations;



    public virtual L_AccountCode L_AccountCode
    {

        get { return _l_AccountCode; }
        set
        {
            if (!ReferenceEquals(_l_AccountCode, value))
            {
                var previousValue = _l_AccountCode;
                _l_AccountCode = value;
                FixupL_AccountCode(previousValue);
            }
        }
    }
    private L_AccountCode _l_AccountCode;



    public virtual L_CommissionIncrementValue L_CommissionIncrementValue
    {

        get { return _l_CommissionIncrementValue; }
        set
        {
            if (!ReferenceEquals(_l_CommissionIncrementValue, value))
            {
                var previousValue = _l_CommissionIncrementValue;
                _l_CommissionIncrementValue = value;
                FixupL_CommissionIncrementValue(previousValue);
            }
        }
    }
    private L_CommissionIncrementValue _l_CommissionIncrementValue;



    public virtual L_Country L_Country
    {

        get { return _l_Country; }
        set
        {
            if (!ReferenceEquals(_l_Country, value))
            {
                var previousValue = _l_Country;
                _l_Country = value;
                FixupL_Country(previousValue);
            }
        }
    }
    private L_Country _l_Country;



    public virtual L_RecievingBank L_RecievingBank
    {

        get { return _l_RecievingBank; }
        set
        {
            if (!ReferenceEquals(_l_RecievingBank, value))
            {
                var previousValue = _l_RecievingBank;
                _l_RecievingBank = value;
                FixupL_RecievingBank(previousValue);
            }
        }
    }
    private L_RecievingBank _l_RecievingBank;



    public virtual L_TradingExperience L_TradingExperience
    {

        get { return _l_TradingExperience; }
        set
        {
            if (!ReferenceEquals(_l_TradingExperience, value))
            {
                var previousValue = _l_TradingExperience;
                _l_TradingExperience = value;
                FixupL_TradingExperience(previousValue);
            }
        }
    }
    private L_TradingExperience _l_TradingExperience;



    public virtual L_TradingExperience L_TradingExperience1
    {

        get { return _l_TradingExperience1; }
        set
        {
            if (!ReferenceEquals(_l_TradingExperience1, value))
            {
                var previousValue = _l_TradingExperience1;
                _l_TradingExperience1 = value;
                FixupL_TradingExperience1(previousValue);
            }
        }
    }
    private L_TradingExperience _l_TradingExperience1;



    public virtual TradingPlatform TradingPlatform
    {

        get { return _tradingPlatform; }
        set
        {
            if (!ReferenceEquals(_tradingPlatform, value))
            {
                var previousValue = _tradingPlatform;
                _tradingPlatform = value;
                FixupTradingPlatform(previousValue);
            }
        }
    }
    private TradingPlatform _tradingPlatform;



    public virtual L_TradingExperience L_TradingExperience2
    {

        get { return _l_TradingExperience2; }
        set
        {
            if (!ReferenceEquals(_l_TradingExperience2, value))
            {
                var previousValue = _l_TradingExperience2;
                _l_TradingExperience2 = value;
                FixupL_TradingExperience2(previousValue);
            }
        }
    }
    private L_TradingExperience _l_TradingExperience2;



    public virtual L_WidenSpreadsValue L_WidenSpreadsValue
    {

        get { return _l_WidenSpreadsValue; }
        set
        {
            if (!ReferenceEquals(_l_WidenSpreadsValue, value))
            {
                var previousValue = _l_WidenSpreadsValue;
                _l_WidenSpreadsValue = value;
                FixupL_WidenSpreadsValue(previousValue);
            }
        }
    }
    private L_WidenSpreadsValue _l_WidenSpreadsValue;



    public virtual ICollection<JointAccountInformation> JointAccountInformations
    {
        get
        {
            if (_jointAccountInformations == null)
            {

                var newCollection = new FixupCollection<JointAccountInformation>();
                newCollection.CollectionChanged += FixupJointAccountInformations;
                _jointAccountInformations = newCollection;

            }
            return _jointAccountInformations;
        }
        set
        {

            if (!ReferenceEquals(_jointAccountInformations, value))
            {
                var previousValue = _jointAccountInformations as FixupCollection<JointAccountInformation>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupJointAccountInformations;
                }
                _jointAccountInformations = value;
                var newValue = value as FixupCollection<JointAccountInformation>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupJointAccountInformations;
                }
            }

        }
    }
    private ICollection<JointAccountInformation> _jointAccountInformations;



    public virtual ICollection<LiveLead> LiveLeads
    {
        get
        {
            if (_liveLeads == null)
            {

                var newCollection = new FixupCollection<LiveLead>();
                newCollection.CollectionChanged += FixupLiveLeads;
                _liveLeads = newCollection;

            }
            return _liveLeads;
        }
        set
        {

            if (!ReferenceEquals(_liveLeads, value))
            {
                var previousValue = _liveLeads as FixupCollection<LiveLead>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupLiveLeads;
                }
                _liveLeads = value;
                var newValue = value as FixupCollection<LiveLead>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupLiveLeads;
                }
            }

        }
    }
    private ICollection<LiveLead> _liveLeads;



    public virtual ICollection<R_Employee_IntroducingBroker> R_Employee_IntroducingBroker
    {
        get
        {
            if (_r_Employee_IntroducingBroker == null)
            {

                var newCollection = new FixupCollection<R_Employee_IntroducingBroker>();
                newCollection.CollectionChanged += FixupR_Employee_IntroducingBroker;
                _r_Employee_IntroducingBroker = newCollection;

            }
            return _r_Employee_IntroducingBroker;
        }
        set
        {

            if (!ReferenceEquals(_r_Employee_IntroducingBroker, value))
            {
                var previousValue = _r_Employee_IntroducingBroker as FixupCollection<R_Employee_IntroducingBroker>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupR_Employee_IntroducingBroker;
                }
                _r_Employee_IntroducingBroker = value;
                var newValue = value as FixupCollection<R_Employee_IntroducingBroker>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupR_Employee_IntroducingBroker;
                }
            }

        }
    }
    private ICollection<R_Employee_IntroducingBroker> _r_Employee_IntroducingBroker;



    public virtual ICollection<R_IntroducingBroker_Client> R_IntroducingBroker_Client
    {
        get
        {
            if (_r_IntroducingBroker_Client == null)
            {

                var newCollection = new FixupCollection<R_IntroducingBroker_Client>();
                newCollection.CollectionChanged += FixupR_IntroducingBroker_Client;
                _r_IntroducingBroker_Client = newCollection;

            }
            return _r_IntroducingBroker_Client;
        }
        set
        {

            if (!ReferenceEquals(_r_IntroducingBroker_Client, value))
            {
                var previousValue = _r_IntroducingBroker_Client as FixupCollection<R_IntroducingBroker_Client>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupR_IntroducingBroker_Client;
                }
                _r_IntroducingBroker_Client = value;
                var newValue = value as FixupCollection<R_IntroducingBroker_Client>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupR_IntroducingBroker_Client;
                }
            }

        }
    }
    private ICollection<R_IntroducingBroker_Client> _r_IntroducingBroker_Client;



    public virtual ICollection<R_IntroducingBroker_IntroducingBroker> R_IntroducingBroker_IntroducingBroker
    {
        get
        {
            if (_r_IntroducingBroker_IntroducingBroker == null)
            {

                var newCollection = new FixupCollection<R_IntroducingBroker_IntroducingBroker>();
                newCollection.CollectionChanged += FixupR_IntroducingBroker_IntroducingBroker;
                _r_IntroducingBroker_IntroducingBroker = newCollection;

            }
            return _r_IntroducingBroker_IntroducingBroker;
        }
        set
        {

            if (!ReferenceEquals(_r_IntroducingBroker_IntroducingBroker, value))
            {
                var previousValue = _r_IntroducingBroker_IntroducingBroker as FixupCollection<R_IntroducingBroker_IntroducingBroker>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupR_IntroducingBroker_IntroducingBroker;
                }
                _r_IntroducingBroker_IntroducingBroker = value;
                var newValue = value as FixupCollection<R_IntroducingBroker_IntroducingBroker>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupR_IntroducingBroker_IntroducingBroker;
                }
            }

        }
    }
    private ICollection<R_IntroducingBroker_IntroducingBroker> _r_IntroducingBroker_IntroducingBroker;



    public virtual ICollection<R_IntroducingBroker_IntroducingBroker> R_IntroducingBroker_IntroducingBroker1
    {
        get
        {
            if (_r_IntroducingBroker_IntroducingBroker1 == null)
            {

                var newCollection = new FixupCollection<R_IntroducingBroker_IntroducingBroker>();
                newCollection.CollectionChanged += FixupR_IntroducingBroker_IntroducingBroker1;
                _r_IntroducingBroker_IntroducingBroker1 = newCollection;

            }
            return _r_IntroducingBroker_IntroducingBroker1;
        }
        set
        {

            if (!ReferenceEquals(_r_IntroducingBroker_IntroducingBroker1, value))
            {
                var previousValue = _r_IntroducingBroker_IntroducingBroker1 as FixupCollection<R_IntroducingBroker_IntroducingBroker>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupR_IntroducingBroker_IntroducingBroker1;
                }
                _r_IntroducingBroker_IntroducingBroker1 = value;
                var newValue = value as FixupCollection<R_IntroducingBroker_IntroducingBroker>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupR_IntroducingBroker_IntroducingBroker1;
                }
            }

        }
    }
    private ICollection<R_IntroducingBroker_IntroducingBroker> _r_IntroducingBroker_IntroducingBroker1;



    public virtual ICollection<TrustAccountInformation> TrustAccountInformations
    {
        get
        {
            if (_trustAccountInformations == null)
            {

                var newCollection = new FixupCollection<TrustAccountInformation>();
                newCollection.CollectionChanged += FixupTrustAccountInformations;
                _trustAccountInformations = newCollection;

            }
            return _trustAccountInformations;
        }
        set
        {

            if (!ReferenceEquals(_trustAccountInformations, value))
            {
                var previousValue = _trustAccountInformations as FixupCollection<TrustAccountInformation>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupTrustAccountInformations;
                }
                _trustAccountInformations = value;
                var newValue = value as FixupCollection<TrustAccountInformation>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupTrustAccountInformations;
                }
            }

        }
    }
    private ICollection<TrustAccountInformation> _trustAccountInformations;



    public virtual L_Languages L_Languages
    {

        get { return _l_Languages; }
        set
        {
            if (!ReferenceEquals(_l_Languages, value))
            {
                var previousValue = _l_Languages;
                _l_Languages = value;
                FixupL_Languages(previousValue);
            }
        }
    }
    private L_Languages _l_Languages;



    public virtual ICollection<BankAccountInformation> BankAccountInformations
    {
        get
        {
            if (_bankAccountInformations == null)
            {

                var newCollection = new FixupCollection<BankAccountInformation>();
                newCollection.CollectionChanged += FixupBankAccountInformations;
                _bankAccountInformations = newCollection;

            }
            return _bankAccountInformations;
        }
        set
        {

            if (!ReferenceEquals(_bankAccountInformations, value))
            {
                var previousValue = _bankAccountInformations as FixupCollection<BankAccountInformation>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupBankAccountInformations;
                }
                _bankAccountInformations = value;
                var newValue = value as FixupCollection<BankAccountInformation>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupBankAccountInformations;
                }
            }

        }
    }
    private ICollection<BankAccountInformation> _bankAccountInformations;



    public virtual User User
    {

        get { return _user; }
        set
        {
            if (!ReferenceEquals(_user, value))
            {
                var previousValue = _user;
                _user = value;
                FixupUser(previousValue);
            }
        }
    }
    private User _user;



    public virtual ICollection<Client> Clients
    {
        get
        {
            if (_clients == null)
            {

                var newCollection = new FixupCollection<Client>();
                newCollection.CollectionChanged += FixupClients;
                _clients = newCollection;

            }
            return _clients;
        }
        set
        {

            if (!ReferenceEquals(_clients, value))
            {
                var previousValue = _clients as FixupCollection<Client>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupClients;
                }
                _clients = value;
                var newValue = value as FixupCollection<Client>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupClients;
                }
            }

        }
    }
    private ICollection<Client> _clients;



    public virtual ICollection<BOMAMTrade> BOMAMTrades
    {
        get
        {
            if (_bOMAMTrades == null)
            {

                var newCollection = new FixupCollection<BOMAMTrade>();
                newCollection.CollectionChanged += FixupBOMAMTrades;
                _bOMAMTrades = newCollection;

            }
            return _bOMAMTrades;
        }
        set
        {

            if (!ReferenceEquals(_bOMAMTrades, value))
            {
                var previousValue = _bOMAMTrades as FixupCollection<BOMAMTrade>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupBOMAMTrades;
                }
                _bOMAMTrades = value;
                var newValue = value as FixupCollection<BOMAMTrade>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupBOMAMTrades;
                }
            }

        }
    }
    private ICollection<BOMAMTrade> _bOMAMTrades;



    public virtual ICollection<R_AssetManager_IntroducingBroker_ClientAccount> R_AssetManager_IntroducingBroker_ClientAccount
    {
        get
        {
            if (_r_AssetManager_IntroducingBroker_ClientAccount == null)
            {

                var newCollection = new FixupCollection<R_AssetManager_IntroducingBroker_ClientAccount>();
                newCollection.CollectionChanged += FixupR_AssetManager_IntroducingBroker_ClientAccount;
                _r_AssetManager_IntroducingBroker_ClientAccount = newCollection;

            }
            return _r_AssetManager_IntroducingBroker_ClientAccount;
        }
        set
        {

            if (!ReferenceEquals(_r_AssetManager_IntroducingBroker_ClientAccount, value))
            {
                var previousValue = _r_AssetManager_IntroducingBroker_ClientAccount as FixupCollection<R_AssetManager_IntroducingBroker_ClientAccount>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupR_AssetManager_IntroducingBroker_ClientAccount;
                }
                _r_AssetManager_IntroducingBroker_ClientAccount = value;
                var newValue = value as FixupCollection<R_AssetManager_IntroducingBroker_ClientAccount>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupR_AssetManager_IntroducingBroker_ClientAccount;
                }
            }

        }
    }
    private ICollection<R_AssetManager_IntroducingBroker_ClientAccount> _r_AssetManager_IntroducingBroker_ClientAccount;



    public virtual Organization Organization
    {

        get { return _organization; }
        set
        {
            if (!ReferenceEquals(_organization, value))
            {
                var previousValue = _organization;
                _organization = value;
                FixupOrganization(previousValue);
            }
        }
    }
    private Organization _organization;



    public virtual ICollection<Client_Account> Client_Account
    {
        get
        {
            if (_client_Account == null)
            {

                var newCollection = new FixupCollection<Client_Account>();
                newCollection.CollectionChanged += FixupClient_Account;
                _client_Account = newCollection;

            }
            return _client_Account;
        }
        set
        {

            if (!ReferenceEquals(_client_Account, value))
            {
                var previousValue = _client_Account as FixupCollection<Client_Account>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupClient_Account;
                }
                _client_Account = value;
                var newValue = value as FixupCollection<Client_Account>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupClient_Account;
                }
            }

        }
    }
    private ICollection<Client_Account> _client_Account;

        #endregion

        #region Association Fixup
    

    private bool _settingFK = false;


    private void FixupAccountType(AccountType previousValue)
    {

        if (previousValue != null && previousValue.IntroducingBrokers.Contains(this))
        {
            previousValue.IntroducingBrokers.Remove(this);
        }


        if (AccountType != null)
        {
            if (!AccountType.IntroducingBrokers.Contains(this))
            {
                AccountType.IntroducingBrokers.Add(this);
            }

            if (FK_AccountTypeID != AccountType.PK_AccountType)

            {
                FK_AccountTypeID = AccountType.PK_AccountType;
            }

        }

        else if (!_settingFK)

        {

            FK_AccountTypeID = null;

        }

    }


    private void FixupL_AccountCode(L_AccountCode previousValue)
    {

        if (previousValue != null && previousValue.IntroducingBrokers.Contains(this))
        {
            previousValue.IntroducingBrokers.Remove(this);
        }


        if (L_AccountCode != null)
        {
            if (!L_AccountCode.IntroducingBrokers.Contains(this))
            {
                L_AccountCode.IntroducingBrokers.Add(this);
            }

            if (FK_AccountID != L_AccountCode.PK_AccountID)

            {
                FK_AccountID = L_AccountCode.PK_AccountID;
            }

        }

        else if (!_settingFK)

        {

            FK_AccountID = null;

        }

    }


    private void FixupL_CommissionIncrementValue(L_CommissionIncrementValue previousValue)
    {

        if (previousValue != null && previousValue.IntroducingBrokers.Contains(this))
        {
            previousValue.IntroducingBrokers.Remove(this);
        }


        if (L_CommissionIncrementValue != null)
        {
            if (!L_CommissionIncrementValue.IntroducingBrokers.Contains(this))
            {
                L_CommissionIncrementValue.IntroducingBrokers.Add(this);
            }

            if (FK_CommissionIncrementID != L_CommissionIncrementValue.PK_CommissionIncrementID)

            {
                FK_CommissionIncrementID = L_CommissionIncrementValue.PK_CommissionIncrementID;
            }

        }

        else if (!_settingFK)

        {

            FK_CommissionIncrementID = null;

        }

    }


    private void FixupL_Country(L_Country previousValue)
    {

        if (previousValue != null && previousValue.IntroducingBrokers.Contains(this))
        {
            previousValue.IntroducingBrokers.Remove(this);
        }


        if (L_Country != null)
        {
            if (!L_Country.IntroducingBrokers.Contains(this))
            {
                L_Country.IntroducingBrokers.Add(this);
            }

            if (FK_CountryID != L_Country.PK_CountryID)

            {
                FK_CountryID = L_Country.PK_CountryID;
            }

        }

        else if (!_settingFK)

        {

            FK_CountryID = null;

        }

    }


    private void FixupL_RecievingBank(L_RecievingBank previousValue)
    {

        if (previousValue != null && previousValue.IntroducingBrokers.Contains(this))
        {
            previousValue.IntroducingBrokers.Remove(this);
        }


        if (L_RecievingBank != null)
        {
            if (!L_RecievingBank.IntroducingBrokers.Contains(this))
            {
                L_RecievingBank.IntroducingBrokers.Add(this);
            }

            if (FK_ReceivingBankInformationID != L_RecievingBank.PK_RecievingBankID)

            {
                FK_ReceivingBankInformationID = L_RecievingBank.PK_RecievingBankID;
            }

        }

        else if (!_settingFK)

        {

            FK_ReceivingBankInformationID = null;

        }

    }


    private void FixupL_TradingExperience(L_TradingExperience previousValue)
    {

        if (previousValue != null && previousValue.IntroducingBrokers.Contains(this))
        {
            previousValue.IntroducingBrokers.Remove(this);
        }


        if (L_TradingExperience != null)
        {
            if (!L_TradingExperience.IntroducingBrokers.Contains(this))
            {
                L_TradingExperience.IntroducingBrokers.Add(this);
            }

            if (FK_TradingForeignExchangeExperienceID != L_TradingExperience.PK_ExperienceID)

            {
                FK_TradingForeignExchangeExperienceID = L_TradingExperience.PK_ExperienceID;
            }

        }

        else if (!_settingFK)

        {

            FK_TradingForeignExchangeExperienceID = null;

        }

    }


    private void FixupL_TradingExperience1(L_TradingExperience previousValue)
    {

        if (previousValue != null && previousValue.IntroducingBrokers1.Contains(this))
        {
            previousValue.IntroducingBrokers1.Remove(this);
        }


        if (L_TradingExperience1 != null)
        {
            if (!L_TradingExperience1.IntroducingBrokers1.Contains(this))
            {
                L_TradingExperience1.IntroducingBrokers1.Add(this);
            }

            if (FK_TradingOptionExperienceID != L_TradingExperience1.PK_ExperienceID)

            {
                FK_TradingOptionExperienceID = L_TradingExperience1.PK_ExperienceID;
            }

        }

        else if (!_settingFK)

        {

            FK_TradingOptionExperienceID = null;

        }

    }


    private void FixupTradingPlatform(TradingPlatform previousValue)
    {

        if (previousValue != null && previousValue.IntroducingBrokers.Contains(this))
        {
            previousValue.IntroducingBrokers.Remove(this);
        }


        if (TradingPlatform != null)
        {
            if (!TradingPlatform.IntroducingBrokers.Contains(this))
            {
                TradingPlatform.IntroducingBrokers.Add(this);
            }

            if (FK_TradingPlatformID != TradingPlatform.PK_TradingPlatformID)

            {
                FK_TradingPlatformID = TradingPlatform.PK_TradingPlatformID;
            }

        }

        else if (!_settingFK)

        {

            FK_TradingPlatformID = null;

        }

    }


    private void FixupL_TradingExperience2(L_TradingExperience previousValue)
    {

        if (previousValue != null && previousValue.IntroducingBrokers2.Contains(this))
        {
            previousValue.IntroducingBrokers2.Remove(this);
        }


        if (L_TradingExperience2 != null)
        {
            if (!L_TradingExperience2.IntroducingBrokers2.Contains(this))
            {
                L_TradingExperience2.IntroducingBrokers2.Add(this);
            }

            if (FK_TradingSecurityExperienceID != L_TradingExperience2.PK_ExperienceID)

            {
                FK_TradingSecurityExperienceID = L_TradingExperience2.PK_ExperienceID;
            }

        }

        else if (!_settingFK)

        {

            FK_TradingSecurityExperienceID = null;

        }

    }


    private void FixupL_WidenSpreadsValue(L_WidenSpreadsValue previousValue)
    {

        if (previousValue != null && previousValue.IntroducingBrokers.Contains(this))
        {
            previousValue.IntroducingBrokers.Remove(this);
        }


        if (L_WidenSpreadsValue != null)
        {
            if (!L_WidenSpreadsValue.IntroducingBrokers.Contains(this))
            {
                L_WidenSpreadsValue.IntroducingBrokers.Add(this);
            }

            if (FK_WidenSpreadsID != L_WidenSpreadsValue.PK_WidenSpreadsID)

            {
                FK_WidenSpreadsID = L_WidenSpreadsValue.PK_WidenSpreadsID;
            }

        }

        else if (!_settingFK)

        {

            FK_WidenSpreadsID = null;

        }

    }


    private void FixupL_Languages(L_Languages previousValue)
    {

        if (previousValue != null && previousValue.IntroducingBrokers.Contains(this))
        {
            previousValue.IntroducingBrokers.Remove(this);
        }


        if (L_Languages != null)
        {
            if (!L_Languages.IntroducingBrokers.Contains(this))
            {
                L_Languages.IntroducingBrokers.Add(this);
            }

            if (FK_PreferredLanguage != L_Languages.PK_LanguageID)

            {
                FK_PreferredLanguage = L_Languages.PK_LanguageID;
            }

        }

        else if (!_settingFK)

        {

            FK_PreferredLanguage = null;

        }

    }


    private void FixupUser(User previousValue)
    {

        if (previousValue != null && previousValue.IntroducingBrokers.Contains(this))
        {
            previousValue.IntroducingBrokers.Remove(this);
        }


        if (User != null)
        {
            if (!User.IntroducingBrokers.Contains(this))
            {
                User.IntroducingBrokers.Add(this);
            }

            if (FK_UserID != User.PK_UserID)

            {
                FK_UserID = User.PK_UserID;
            }

        }

        else if (!_settingFK)

        {

            FK_UserID = null;

        }

    }


    private void FixupOrganization(Organization previousValue)
    {

        if (previousValue != null && previousValue.IntroducingBrokers.Contains(this))
        {
            previousValue.IntroducingBrokers.Remove(this);
        }


        if (Organization != null)
        {
            if (!Organization.IntroducingBrokers.Contains(this))
            {
                Organization.IntroducingBrokers.Add(this);
            }

            if (FK_OrganizationID != Organization.PK_OrganizationID)

            {
                FK_OrganizationID = Organization.PK_OrganizationID;
            }

        }

    }


    private void FixupAssetManagers(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (AssetManager item in e.NewItems)
            {

                item.IntroducingBroker = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (AssetManager item in e.OldItems)
            {

                if (ReferenceEquals(item.IntroducingBroker, this))
                {
                    item.IntroducingBroker = null;
                }

            }
        }
    }


    private void FixupCorporateAccountInformations(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (CorporateAccountInformation item in e.NewItems)
            {

                item.IntroducingBroker = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (CorporateAccountInformation item in e.OldItems)
            {

                if (ReferenceEquals(item.IntroducingBroker, this))
                {
                    item.IntroducingBroker = null;
                }

            }
        }
    }


    private void FixupIndividualAccountInformations(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (IndividualAccountInformation item in e.NewItems)
            {

                item.IntroducingBroker = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (IndividualAccountInformation item in e.OldItems)
            {

                if (ReferenceEquals(item.IntroducingBroker, this))
                {
                    item.IntroducingBroker = null;
                }

            }
        }
    }


    private void FixupJointAccountInformations(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (JointAccountInformation item in e.NewItems)
            {

                item.IntroducingBroker = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (JointAccountInformation item in e.OldItems)
            {

                if (ReferenceEquals(item.IntroducingBroker, this))
                {
                    item.IntroducingBroker = null;
                }

            }
        }
    }


    private void FixupLiveLeads(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (LiveLead item in e.NewItems)
            {

                item.IntroducingBroker = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (LiveLead item in e.OldItems)
            {

                if (ReferenceEquals(item.IntroducingBroker, this))
                {
                    item.IntroducingBroker = null;
                }

            }
        }
    }


    private void FixupR_Employee_IntroducingBroker(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (R_Employee_IntroducingBroker item in e.NewItems)
            {

                item.IntroducingBroker = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (R_Employee_IntroducingBroker item in e.OldItems)
            {

                if (ReferenceEquals(item.IntroducingBroker, this))
                {
                    item.IntroducingBroker = null;
                }

            }
        }
    }


    private void FixupR_IntroducingBroker_Client(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (R_IntroducingBroker_Client item in e.NewItems)
            {

                item.IntroducingBroker = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (R_IntroducingBroker_Client item in e.OldItems)
            {

                if (ReferenceEquals(item.IntroducingBroker, this))
                {
                    item.IntroducingBroker = null;
                }

            }
        }
    }


    private void FixupR_IntroducingBroker_IntroducingBroker(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (R_IntroducingBroker_IntroducingBroker item in e.NewItems)
            {

                item.IntroducingBroker = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (R_IntroducingBroker_IntroducingBroker item in e.OldItems)
            {

                if (ReferenceEquals(item.IntroducingBroker, this))
                {
                    item.IntroducingBroker = null;
                }

            }
        }
    }


    private void FixupR_IntroducingBroker_IntroducingBroker1(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (R_IntroducingBroker_IntroducingBroker item in e.NewItems)
            {

                item.IntroducingBroker1 = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (R_IntroducingBroker_IntroducingBroker item in e.OldItems)
            {

                if (ReferenceEquals(item.IntroducingBroker1, this))
                {
                    item.IntroducingBroker1 = null;
                }

            }
        }
    }


    private void FixupTrustAccountInformations(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (TrustAccountInformation item in e.NewItems)
            {

                item.IntroducingBroker = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (TrustAccountInformation item in e.OldItems)
            {

                if (ReferenceEquals(item.IntroducingBroker, this))
                {
                    item.IntroducingBroker = null;
                }

            }
        }
    }


    private void FixupBankAccountInformations(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (BankAccountInformation item in e.NewItems)
            {

                item.IntroducingBroker = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (BankAccountInformation item in e.OldItems)
            {

                if (ReferenceEquals(item.IntroducingBroker, this))
                {
                    item.IntroducingBroker = null;
                }

            }
        }
    }


    private void FixupClients(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Client item in e.NewItems)
            {

                item.IntroducingBroker = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (Client item in e.OldItems)
            {

                if (ReferenceEquals(item.IntroducingBroker, this))
                {
                    item.IntroducingBroker = null;
                }

            }
        }
    }


    private void FixupBOMAMTrades(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (BOMAMTrade item in e.NewItems)
            {

                item.IntroducingBroker = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (BOMAMTrade item in e.OldItems)
            {

                if (ReferenceEquals(item.IntroducingBroker, this))
                {
                    item.IntroducingBroker = null;
                }

            }
        }
    }


    private void FixupR_AssetManager_IntroducingBroker_ClientAccount(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (R_AssetManager_IntroducingBroker_ClientAccount item in e.NewItems)
            {

                item.IntroducingBroker = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (R_AssetManager_IntroducingBroker_ClientAccount item in e.OldItems)
            {

                if (ReferenceEquals(item.IntroducingBroker, this))
                {
                    item.IntroducingBroker = null;
                }

            }
        }
    }


    private void FixupClient_Account(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Client_Account item in e.NewItems)
            {

                item.IntroducingBroker = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (Client_Account item in e.OldItems)
            {

                if (ReferenceEquals(item.IntroducingBroker, this))
                {
                    item.IntroducingBroker = null;
                }

            }
        }
    }

        #endregion

    
}

}
