
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;


namespace CurrentDesk.Models
{

public partial class L_CurrencyValue
{
    #region Primitive Properties
    

    public virtual int PK_CurrencyValueID
    {

        get;
        set;

    }


    public virtual string CurrencyValue
    {

        get;
        set;

    }


    public virtual string AccountCurrencyCode
    {

        get;
        set;

    }

        #endregion

        #region Navigation Properties
    


    public virtual ICollection<AccountCurrency> AccountCurrencies
    {
        get
        {
            if (_accountCurrencies == null)
            {

                var newCollection = new FixupCollection<AccountCurrency>();
                newCollection.CollectionChanged += FixupAccountCurrencies;
                _accountCurrencies = newCollection;

            }
            return _accountCurrencies;
        }
        set
        {

            if (!ReferenceEquals(_accountCurrencies, value))
            {
                var previousValue = _accountCurrencies as FixupCollection<AccountCurrency>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupAccountCurrencies;
                }
                _accountCurrencies = value;
                var newValue = value as FixupCollection<AccountCurrency>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupAccountCurrencies;
                }
            }

        }
    }
    private ICollection<AccountCurrency> _accountCurrencies;



    public virtual ICollection<AccountActivity> AccountActivities
    {
        get
        {
            if (_accountActivities == null)
            {

                var newCollection = new FixupCollection<AccountActivity>();
                newCollection.CollectionChanged += FixupAccountActivities;
                _accountActivities = newCollection;

            }
            return _accountActivities;
        }
        set
        {

            if (!ReferenceEquals(_accountActivities, value))
            {
                var previousValue = _accountActivities as FixupCollection<AccountActivity>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupAccountActivities;
                }
                _accountActivities = value;
                var newValue = value as FixupCollection<AccountActivity>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupAccountActivities;
                }
            }

        }
    }
    private ICollection<AccountActivity> _accountActivities;



    public virtual ICollection<TransferActivity> TransferActivities
    {
        get
        {
            if (_transferActivities == null)
            {

                var newCollection = new FixupCollection<TransferActivity>();
                newCollection.CollectionChanged += FixupTransferActivities;
                _transferActivities = newCollection;

            }
            return _transferActivities;
        }
        set
        {

            if (!ReferenceEquals(_transferActivities, value))
            {
                var previousValue = _transferActivities as FixupCollection<TransferActivity>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupTransferActivities;
                }
                _transferActivities = value;
                var newValue = value as FixupCollection<TransferActivity>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupTransferActivities;
                }
            }

        }
    }
    private ICollection<TransferActivity> _transferActivities;



    public virtual ICollection<ConversionActivity> ConversionActivities
    {
        get
        {
            if (_conversionActivities == null)
            {

                var newCollection = new FixupCollection<ConversionActivity>();
                newCollection.CollectionChanged += FixupConversionActivities;
                _conversionActivities = newCollection;

            }
            return _conversionActivities;
        }
        set
        {

            if (!ReferenceEquals(_conversionActivities, value))
            {
                var previousValue = _conversionActivities as FixupCollection<ConversionActivity>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupConversionActivities;
                }
                _conversionActivities = value;
                var newValue = value as FixupCollection<ConversionActivity>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupConversionActivities;
                }
            }

        }
    }
    private ICollection<ConversionActivity> _conversionActivities;



    public virtual ICollection<ConversionActivity> ConversionActivities1
    {
        get
        {
            if (_conversionActivities1 == null)
            {

                var newCollection = new FixupCollection<ConversionActivity>();
                newCollection.CollectionChanged += FixupConversionActivities1;
                _conversionActivities1 = newCollection;

            }
            return _conversionActivities1;
        }
        set
        {

            if (!ReferenceEquals(_conversionActivities1, value))
            {
                var previousValue = _conversionActivities1 as FixupCollection<ConversionActivity>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupConversionActivities1;
                }
                _conversionActivities1 = value;
                var newValue = value as FixupCollection<ConversionActivity>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupConversionActivities1;
                }
            }

        }
    }
    private ICollection<ConversionActivity> _conversionActivities1;



    public virtual ICollection<AdminTransaction> AdminTransactions
    {
        get
        {
            if (_adminTransactions == null)
            {

                var newCollection = new FixupCollection<AdminTransaction>();
                newCollection.CollectionChanged += FixupAdminTransactions;
                _adminTransactions = newCollection;

            }
            return _adminTransactions;
        }
        set
        {

            if (!ReferenceEquals(_adminTransactions, value))
            {
                var previousValue = _adminTransactions as FixupCollection<AdminTransaction>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupAdminTransactions;
                }
                _adminTransactions = value;
                var newValue = value as FixupCollection<AdminTransaction>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupAdminTransactions;
                }
            }

        }
    }
    private ICollection<AdminTransaction> _adminTransactions;



    public virtual ICollection<FundingSourceAcceptedCurrency> FundingSourceAcceptedCurrencies
    {
        get
        {
            if (_fundingSourceAcceptedCurrencies == null)
            {

                var newCollection = new FixupCollection<FundingSourceAcceptedCurrency>();
                newCollection.CollectionChanged += FixupFundingSourceAcceptedCurrencies;
                _fundingSourceAcceptedCurrencies = newCollection;

            }
            return _fundingSourceAcceptedCurrencies;
        }
        set
        {

            if (!ReferenceEquals(_fundingSourceAcceptedCurrencies, value))
            {
                var previousValue = _fundingSourceAcceptedCurrencies as FixupCollection<FundingSourceAcceptedCurrency>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupFundingSourceAcceptedCurrencies;
                }
                _fundingSourceAcceptedCurrencies = value;
                var newValue = value as FixupCollection<FundingSourceAcceptedCurrency>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupFundingSourceAcceptedCurrencies;
                }
            }

        }
    }
    private ICollection<FundingSourceAcceptedCurrency> _fundingSourceAcceptedCurrencies;



    public virtual ICollection<FundingSource> FundingSources
    {
        get
        {
            if (_fundingSources == null)
            {

                var newCollection = new FixupCollection<FundingSource>();
                newCollection.CollectionChanged += FixupFundingSources;
                _fundingSources = newCollection;

            }
            return _fundingSources;
        }
        set
        {

            if (!ReferenceEquals(_fundingSources, value))
            {
                var previousValue = _fundingSources as FixupCollection<FundingSource>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupFundingSources;
                }
                _fundingSources = value;
                var newValue = value as FixupCollection<FundingSource>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupFundingSources;
                }
            }

        }
    }
    private ICollection<FundingSource> _fundingSources;



    public virtual ICollection<FundingSource> FundingSources1
    {
        get
        {
            if (_fundingSources1 == null)
            {

                var newCollection = new FixupCollection<FundingSource>();
                newCollection.CollectionChanged += FixupFundingSources1;
                _fundingSources1 = newCollection;

            }
            return _fundingSources1;
        }
        set
        {

            if (!ReferenceEquals(_fundingSources1, value))
            {
                var previousValue = _fundingSources1 as FixupCollection<FundingSource>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupFundingSources1;
                }
                _fundingSources1 = value;
                var newValue = value as FixupCollection<FundingSource>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupFundingSources1;
                }
            }

        }
    }
    private ICollection<FundingSource> _fundingSources1;



    public virtual ICollection<TransactionSetting> TransactionSettings
    {
        get
        {
            if (_transactionSettings == null)
            {

                var newCollection = new FixupCollection<TransactionSetting>();
                newCollection.CollectionChanged += FixupTransactionSettings;
                _transactionSettings = newCollection;

            }
            return _transactionSettings;
        }
        set
        {

            if (!ReferenceEquals(_transactionSettings, value))
            {
                var previousValue = _transactionSettings as FixupCollection<TransactionSetting>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupTransactionSettings;
                }
                _transactionSettings = value;
                var newValue = value as FixupCollection<TransactionSetting>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupTransactionSettings;
                }
            }

        }
    }
    private ICollection<TransactionSetting> _transactionSettings;



    public virtual ICollection<AdminTransaction> AdminTransactions1
    {
        get
        {
            if (_adminTransactions1 == null)
            {

                var newCollection = new FixupCollection<AdminTransaction>();
                newCollection.CollectionChanged += FixupAdminTransactions1;
                _adminTransactions1 = newCollection;

            }
            return _adminTransactions1;
        }
        set
        {

            if (!ReferenceEquals(_adminTransactions1, value))
            {
                var previousValue = _adminTransactions1 as FixupCollection<AdminTransaction>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupAdminTransactions1;
                }
                _adminTransactions1 = value;
                var newValue = value as FixupCollection<AdminTransaction>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupAdminTransactions1;
                }
            }

        }
    }
    private ICollection<AdminTransaction> _adminTransactions1;



    public virtual ICollection<DepositOrWithdrawActivity> DepositOrWithdrawActivities
    {
        get
        {
            if (_depositOrWithdrawActivities == null)
            {

                var newCollection = new FixupCollection<DepositOrWithdrawActivity>();
                newCollection.CollectionChanged += FixupDepositOrWithdrawActivities;
                _depositOrWithdrawActivities = newCollection;

            }
            return _depositOrWithdrawActivities;
        }
        set
        {

            if (!ReferenceEquals(_depositOrWithdrawActivities, value))
            {
                var previousValue = _depositOrWithdrawActivities as FixupCollection<DepositOrWithdrawActivity>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupDepositOrWithdrawActivities;
                }
                _depositOrWithdrawActivities = value;
                var newValue = value as FixupCollection<DepositOrWithdrawActivity>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupDepositOrWithdrawActivities;
                }
            }

        }
    }
    private ICollection<DepositOrWithdrawActivity> _depositOrWithdrawActivities;



    public virtual ICollection<Client_Account> Client_Account
    {
        get
        {
            if (_client_Account == null)
            {

                var newCollection = new FixupCollection<Client_Account>();
                newCollection.CollectionChanged += FixupClient_Account;
                _client_Account = newCollection;

            }
            return _client_Account;
        }
        set
        {

            if (!ReferenceEquals(_client_Account, value))
            {
                var previousValue = _client_Account as FixupCollection<Client_Account>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupClient_Account;
                }
                _client_Account = value;
                var newValue = value as FixupCollection<Client_Account>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupClient_Account;
                }
            }

        }
    }
    private ICollection<Client_Account> _client_Account;

        #endregion

        #region Association Fixup
    

    private void FixupAccountCurrencies(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (AccountCurrency item in e.NewItems)
            {

                item.L_CurrencyValue = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (AccountCurrency item in e.OldItems)
            {

                if (ReferenceEquals(item.L_CurrencyValue, this))
                {
                    item.L_CurrencyValue = null;
                }

            }
        }
    }


    private void FixupAccountActivities(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (AccountActivity item in e.NewItems)
            {

                item.L_CurrencyValue = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (AccountActivity item in e.OldItems)
            {

                if (ReferenceEquals(item.L_CurrencyValue, this))
                {
                    item.L_CurrencyValue = null;
                }

            }
        }
    }


    private void FixupTransferActivities(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (TransferActivity item in e.NewItems)
            {

                item.L_CurrencyValue = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (TransferActivity item in e.OldItems)
            {

                if (ReferenceEquals(item.L_CurrencyValue, this))
                {
                    item.L_CurrencyValue = null;
                }

            }
        }
    }


    private void FixupConversionActivities(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (ConversionActivity item in e.NewItems)
            {

                item.L_CurrencyValue = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (ConversionActivity item in e.OldItems)
            {

                if (ReferenceEquals(item.L_CurrencyValue, this))
                {
                    item.L_CurrencyValue = null;
                }

            }
        }
    }


    private void FixupConversionActivities1(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (ConversionActivity item in e.NewItems)
            {

                item.L_CurrencyValue1 = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (ConversionActivity item in e.OldItems)
            {

                if (ReferenceEquals(item.L_CurrencyValue1, this))
                {
                    item.L_CurrencyValue1 = null;
                }

            }
        }
    }


    private void FixupAdminTransactions(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (AdminTransaction item in e.NewItems)
            {

                item.L_CurrencyValue = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (AdminTransaction item in e.OldItems)
            {

                if (ReferenceEquals(item.L_CurrencyValue, this))
                {
                    item.L_CurrencyValue = null;
                }

            }
        }
    }


    private void FixupFundingSourceAcceptedCurrencies(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (FundingSourceAcceptedCurrency item in e.NewItems)
            {

                item.L_CurrencyValue = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (FundingSourceAcceptedCurrency item in e.OldItems)
            {

                if (ReferenceEquals(item.L_CurrencyValue, this))
                {
                    item.L_CurrencyValue = null;
                }

            }
        }
    }


    private void FixupFundingSources(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (FundingSource item in e.NewItems)
            {

                item.L_CurrencyValue = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (FundingSource item in e.OldItems)
            {

                if (ReferenceEquals(item.L_CurrencyValue, this))
                {
                    item.L_CurrencyValue = null;
                }

            }
        }
    }


    private void FixupFundingSources1(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (FundingSource item in e.NewItems)
            {

                item.L_CurrencyValue1 = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (FundingSource item in e.OldItems)
            {

                if (ReferenceEquals(item.L_CurrencyValue1, this))
                {
                    item.L_CurrencyValue1 = null;
                }

            }
        }
    }


    private void FixupTransactionSettings(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (TransactionSetting item in e.NewItems)
            {

                item.L_CurrencyValue = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (TransactionSetting item in e.OldItems)
            {

                if (ReferenceEquals(item.L_CurrencyValue, this))
                {
                    item.L_CurrencyValue = null;
                }

            }
        }
    }


    private void FixupAdminTransactions1(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (AdminTransaction item in e.NewItems)
            {

                item.L_CurrencyValue1 = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (AdminTransaction item in e.OldItems)
            {

                if (ReferenceEquals(item.L_CurrencyValue1, this))
                {
                    item.L_CurrencyValue1 = null;
                }

            }
        }
    }


    private void FixupDepositOrWithdrawActivities(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (DepositOrWithdrawActivity item in e.NewItems)
            {

                item.L_CurrencyValue = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (DepositOrWithdrawActivity item in e.OldItems)
            {

                if (ReferenceEquals(item.L_CurrencyValue, this))
                {
                    item.L_CurrencyValue = null;
                }

            }
        }
    }


    private void FixupClient_Account(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Client_Account item in e.NewItems)
            {

                item.L_CurrencyValue = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (Client_Account item in e.OldItems)
            {

                if (ReferenceEquals(item.L_CurrencyValue, this))
                {
                    item.L_CurrencyValue = null;
                }

            }
        }
    }

        #endregion

    
}

}
