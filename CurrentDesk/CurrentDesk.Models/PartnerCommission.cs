
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;


namespace CurrentDesk.Models
{

public partial class PartnerCommission
{
    #region Primitive Properties
    

    public virtual int PK_PartnerCommID
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_WidenSpreadID
    {

        get { return _fK_WidenSpreadID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_WidenSpreadID != value)

            {

                if (L_WidenSpreadsValue != null && L_WidenSpreadsValue.PK_WidenSpreadsID != value)

                {

                    L_WidenSpreadsValue = null;

                }

                _fK_WidenSpreadID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_WidenSpreadID;


    public virtual Nullable<int> FK_CommissionID
    {

        get { return _fK_CommissionID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_CommissionID != value)

            {

                if (L_CommissionIncrementValue != null && L_CommissionIncrementValue.PK_CommissionIncrementID != value)

                {

                    L_CommissionIncrementValue = null;

                }

                _fK_CommissionID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_CommissionID;


    public virtual Nullable<double> WidenSpreadValue
    {

        get;
        set;

    }


    public virtual Nullable<double> CommissionValue
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_UserID
    {

        get { return _fK_UserID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_UserID != value)

            {

                if (User != null && User.PK_UserID != value)

                {

                    User = null;

                }

                _fK_UserID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_UserID;


    public virtual string FeeStructureName
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_AccountCurrencyID
    {

        get;
        set;

    }


    public virtual Nullable<bool> IsDefault
    {

        get;
        set;

    }

        #endregion

        #region Navigation Properties
    


    public virtual L_CommissionIncrementValue L_CommissionIncrementValue
    {

        get { return _l_CommissionIncrementValue; }
        set
        {
            if (!ReferenceEquals(_l_CommissionIncrementValue, value))
            {
                var previousValue = _l_CommissionIncrementValue;
                _l_CommissionIncrementValue = value;
                FixupL_CommissionIncrementValue(previousValue);
            }
        }
    }
    private L_CommissionIncrementValue _l_CommissionIncrementValue;



    public virtual L_WidenSpreadsValue L_WidenSpreadsValue
    {

        get { return _l_WidenSpreadsValue; }
        set
        {
            if (!ReferenceEquals(_l_WidenSpreadsValue, value))
            {
                var previousValue = _l_WidenSpreadsValue;
                _l_WidenSpreadsValue = value;
                FixupL_WidenSpreadsValue(previousValue);
            }
        }
    }
    private L_WidenSpreadsValue _l_WidenSpreadsValue;



    public virtual User User
    {

        get { return _user; }
        set
        {
            if (!ReferenceEquals(_user, value))
            {
                var previousValue = _user;
                _user = value;
                FixupUser(previousValue);
            }
        }
    }
    private User _user;



    public virtual ICollection<ManagedAccountProgram> ManagedAccountPrograms
    {
        get
        {
            if (_managedAccountPrograms == null)
            {

                var newCollection = new FixupCollection<ManagedAccountProgram>();
                newCollection.CollectionChanged += FixupManagedAccountPrograms;
                _managedAccountPrograms = newCollection;

            }
            return _managedAccountPrograms;
        }
        set
        {

            if (!ReferenceEquals(_managedAccountPrograms, value))
            {
                var previousValue = _managedAccountPrograms as FixupCollection<ManagedAccountProgram>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupManagedAccountPrograms;
                }
                _managedAccountPrograms = value;
                var newValue = value as FixupCollection<ManagedAccountProgram>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupManagedAccountPrograms;
                }
            }

        }
    }
    private ICollection<ManagedAccountProgram> _managedAccountPrograms;



    public virtual ICollection<Client_Account> Client_Account
    {
        get
        {
            if (_client_Account == null)
            {

                var newCollection = new FixupCollection<Client_Account>();
                newCollection.CollectionChanged += FixupClient_Account;
                _client_Account = newCollection;

            }
            return _client_Account;
        }
        set
        {

            if (!ReferenceEquals(_client_Account, value))
            {
                var previousValue = _client_Account as FixupCollection<Client_Account>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupClient_Account;
                }
                _client_Account = value;
                var newValue = value as FixupCollection<Client_Account>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupClient_Account;
                }
            }

        }
    }
    private ICollection<Client_Account> _client_Account;

        #endregion

        #region Association Fixup
    

    private bool _settingFK = false;


    private void FixupL_CommissionIncrementValue(L_CommissionIncrementValue previousValue)
    {

        if (previousValue != null && previousValue.PartnerCommissions.Contains(this))
        {
            previousValue.PartnerCommissions.Remove(this);
        }


        if (L_CommissionIncrementValue != null)
        {
            if (!L_CommissionIncrementValue.PartnerCommissions.Contains(this))
            {
                L_CommissionIncrementValue.PartnerCommissions.Add(this);
            }

            if (FK_CommissionID != L_CommissionIncrementValue.PK_CommissionIncrementID)

            {
                FK_CommissionID = L_CommissionIncrementValue.PK_CommissionIncrementID;
            }

        }

        else if (!_settingFK)

        {

            FK_CommissionID = null;

        }

    }


    private void FixupL_WidenSpreadsValue(L_WidenSpreadsValue previousValue)
    {

        if (previousValue != null && previousValue.PartnerCommissions.Contains(this))
        {
            previousValue.PartnerCommissions.Remove(this);
        }


        if (L_WidenSpreadsValue != null)
        {
            if (!L_WidenSpreadsValue.PartnerCommissions.Contains(this))
            {
                L_WidenSpreadsValue.PartnerCommissions.Add(this);
            }

            if (FK_WidenSpreadID != L_WidenSpreadsValue.PK_WidenSpreadsID)

            {
                FK_WidenSpreadID = L_WidenSpreadsValue.PK_WidenSpreadsID;
            }

        }

        else if (!_settingFK)

        {

            FK_WidenSpreadID = null;

        }

    }


    private void FixupUser(User previousValue)
    {

        if (previousValue != null && previousValue.PartnerCommissions.Contains(this))
        {
            previousValue.PartnerCommissions.Remove(this);
        }


        if (User != null)
        {
            if (!User.PartnerCommissions.Contains(this))
            {
                User.PartnerCommissions.Add(this);
            }

            if (FK_UserID != User.PK_UserID)

            {
                FK_UserID = User.PK_UserID;
            }

        }

        else if (!_settingFK)

        {

            FK_UserID = null;

        }

    }


    private void FixupManagedAccountPrograms(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (ManagedAccountProgram item in e.NewItems)
            {

                item.PartnerCommission = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (ManagedAccountProgram item in e.OldItems)
            {

                if (ReferenceEquals(item.PartnerCommission, this))
                {
                    item.PartnerCommission = null;
                }

            }
        }
    }


    private void FixupClient_Account(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Client_Account item in e.NewItems)
            {

                item.PartnerCommission = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (Client_Account item in e.OldItems)
            {

                if (ReferenceEquals(item.PartnerCommission, this))
                {
                    item.PartnerCommission = null;
                }

            }
        }
    }

        #endregion

    
}

}
