
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;


namespace CurrentDesk.Models
{

public partial class FundingSource
{
    #region Primitive Properties
    

    public virtual int PK_FundingSourceID
    {

        get;
        set;

    }


    public virtual string SourceName
    {

        get;
        set;

    }


    public virtual Nullable<int> SourceType
    {

        get;
        set;

    }


    public virtual string BankName
    {

        get;
        set;

    }


    public virtual string AccountNumber
    {

        get;
        set;

    }


    public virtual string BicOrSwiftCode
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_ReceivingBankInfoID
    {

        get { return _fK_ReceivingBankInfoID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_ReceivingBankInfoID != value)

            {

                if (L_RecievingBank != null && L_RecievingBank.PK_RecievingBankID != value)

                {

                    L_RecievingBank = null;

                }

                _fK_ReceivingBankInfoID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_ReceivingBankInfoID;


    public virtual string ReceivingBankInfo
    {

        get;
        set;

    }


    public virtual string BankAddress
    {

        get;
        set;

    }


    public virtual string BankCity
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_BankCountryID
    {

        get { return _fK_BankCountryID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_BankCountryID != value)

            {

                if (L_Country != null && L_Country.PK_CountryID != value)

                {

                    L_Country = null;

                }

                _fK_BankCountryID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_BankCountryID;


    public virtual string BankPostalCode
    {

        get;
        set;

    }


    public virtual string InterBankName
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_InterBankCountryID
    {

        get { return _fK_InterBankCountryID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_InterBankCountryID != value)

            {

                if (L_Country1 != null && L_Country1.PK_CountryID != value)

                {

                    L_Country1 = null;

                }

                _fK_InterBankCountryID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_InterBankCountryID;


    public virtual string InterBicOrSwiftCode
    {

        get;
        set;

    }


    public virtual Nullable<decimal> IncomingWireFeeAmount
    {

        get;
        set;

    }


    public virtual Nullable<decimal> OutgoingWireFeeAmount
    {

        get;
        set;

    }


    public virtual Nullable<bool> IsEnabled
    {

        get;
        set;

    }


    public virtual Nullable<bool> IsDeleted
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_IncomingWireFeeCurrency
    {

        get { return _fK_IncomingWireFeeCurrency; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_IncomingWireFeeCurrency != value)

            {

                if (L_CurrencyValue != null && L_CurrencyValue.PK_CurrencyValueID != value)

                {

                    L_CurrencyValue = null;

                }

                _fK_IncomingWireFeeCurrency = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_IncomingWireFeeCurrency;


    public virtual Nullable<int> FK_OutgoingWireFeeCurrency
    {

        get { return _fK_OutgoingWireFeeCurrency; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_OutgoingWireFeeCurrency != value)

            {

                if (L_CurrencyValue1 != null && L_CurrencyValue1.PK_CurrencyValueID != value)

                {

                    L_CurrencyValue1 = null;

                }

                _fK_OutgoingWireFeeCurrency = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_OutgoingWireFeeCurrency;


    public virtual int FK_OrganizationID
    {

        get { return _fK_OrganizationID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_OrganizationID != value)

            {

                if (Organization != null && Organization.PK_OrganizationID != value)

                {

                    Organization = null;

                }

                _fK_OrganizationID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private int _fK_OrganizationID;

        #endregion

        #region Navigation Properties
    


    public virtual L_Country L_Country
    {

        get { return _l_Country; }
        set
        {
            if (!ReferenceEquals(_l_Country, value))
            {
                var previousValue = _l_Country;
                _l_Country = value;
                FixupL_Country(previousValue);
            }
        }
    }
    private L_Country _l_Country;



    public virtual ICollection<FundingSourceAcceptedCurrency> FundingSourceAcceptedCurrencies
    {
        get
        {
            if (_fundingSourceAcceptedCurrencies == null)
            {

                var newCollection = new FixupCollection<FundingSourceAcceptedCurrency>();
                newCollection.CollectionChanged += FixupFundingSourceAcceptedCurrencies;
                _fundingSourceAcceptedCurrencies = newCollection;

            }
            return _fundingSourceAcceptedCurrencies;
        }
        set
        {

            if (!ReferenceEquals(_fundingSourceAcceptedCurrencies, value))
            {
                var previousValue = _fundingSourceAcceptedCurrencies as FixupCollection<FundingSourceAcceptedCurrency>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupFundingSourceAcceptedCurrencies;
                }
                _fundingSourceAcceptedCurrencies = value;
                var newValue = value as FixupCollection<FundingSourceAcceptedCurrency>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupFundingSourceAcceptedCurrencies;
                }
            }

        }
    }
    private ICollection<FundingSourceAcceptedCurrency> _fundingSourceAcceptedCurrencies;



    public virtual L_Country L_Country1
    {

        get { return _l_Country1; }
        set
        {
            if (!ReferenceEquals(_l_Country1, value))
            {
                var previousValue = _l_Country1;
                _l_Country1 = value;
                FixupL_Country1(previousValue);
            }
        }
    }
    private L_Country _l_Country1;



    public virtual L_RecievingBank L_RecievingBank
    {

        get { return _l_RecievingBank; }
        set
        {
            if (!ReferenceEquals(_l_RecievingBank, value))
            {
                var previousValue = _l_RecievingBank;
                _l_RecievingBank = value;
                FixupL_RecievingBank(previousValue);
            }
        }
    }
    private L_RecievingBank _l_RecievingBank;



    public virtual L_CurrencyValue L_CurrencyValue
    {

        get { return _l_CurrencyValue; }
        set
        {
            if (!ReferenceEquals(_l_CurrencyValue, value))
            {
                var previousValue = _l_CurrencyValue;
                _l_CurrencyValue = value;
                FixupL_CurrencyValue(previousValue);
            }
        }
    }
    private L_CurrencyValue _l_CurrencyValue;



    public virtual L_CurrencyValue L_CurrencyValue1
    {

        get { return _l_CurrencyValue1; }
        set
        {
            if (!ReferenceEquals(_l_CurrencyValue1, value))
            {
                var previousValue = _l_CurrencyValue1;
                _l_CurrencyValue1 = value;
                FixupL_CurrencyValue1(previousValue);
            }
        }
    }
    private L_CurrencyValue _l_CurrencyValue1;



    public virtual Organization Organization
    {

        get { return _organization; }
        set
        {
            if (!ReferenceEquals(_organization, value))
            {
                var previousValue = _organization;
                _organization = value;
                FixupOrganization(previousValue);
            }
        }
    }
    private Organization _organization;



    public virtual ICollection<AdminTransaction> AdminTransactions
    {
        get
        {
            if (_adminTransactions == null)
            {

                var newCollection = new FixupCollection<AdminTransaction>();
                newCollection.CollectionChanged += FixupAdminTransactions;
                _adminTransactions = newCollection;

            }
            return _adminTransactions;
        }
        set
        {

            if (!ReferenceEquals(_adminTransactions, value))
            {
                var previousValue = _adminTransactions as FixupCollection<AdminTransaction>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupAdminTransactions;
                }
                _adminTransactions = value;
                var newValue = value as FixupCollection<AdminTransaction>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupAdminTransactions;
                }
            }

        }
    }
    private ICollection<AdminTransaction> _adminTransactions;

        #endregion

        #region Association Fixup
    

    private bool _settingFK = false;


    private void FixupL_Country(L_Country previousValue)
    {

        if (previousValue != null && previousValue.FundingSources.Contains(this))
        {
            previousValue.FundingSources.Remove(this);
        }


        if (L_Country != null)
        {
            if (!L_Country.FundingSources.Contains(this))
            {
                L_Country.FundingSources.Add(this);
            }

            if (FK_BankCountryID != L_Country.PK_CountryID)

            {
                FK_BankCountryID = L_Country.PK_CountryID;
            }

        }

        else if (!_settingFK)

        {

            FK_BankCountryID = null;

        }

    }


    private void FixupL_Country1(L_Country previousValue)
    {

        if (previousValue != null && previousValue.FundingSources1.Contains(this))
        {
            previousValue.FundingSources1.Remove(this);
        }


        if (L_Country1 != null)
        {
            if (!L_Country1.FundingSources1.Contains(this))
            {
                L_Country1.FundingSources1.Add(this);
            }

            if (FK_InterBankCountryID != L_Country1.PK_CountryID)

            {
                FK_InterBankCountryID = L_Country1.PK_CountryID;
            }

        }

        else if (!_settingFK)

        {

            FK_InterBankCountryID = null;

        }

    }


    private void FixupL_RecievingBank(L_RecievingBank previousValue)
    {

        if (previousValue != null && previousValue.FundingSources.Contains(this))
        {
            previousValue.FundingSources.Remove(this);
        }


        if (L_RecievingBank != null)
        {
            if (!L_RecievingBank.FundingSources.Contains(this))
            {
                L_RecievingBank.FundingSources.Add(this);
            }

            if (FK_ReceivingBankInfoID != L_RecievingBank.PK_RecievingBankID)

            {
                FK_ReceivingBankInfoID = L_RecievingBank.PK_RecievingBankID;
            }

        }

        else if (!_settingFK)

        {

            FK_ReceivingBankInfoID = null;

        }

    }


    private void FixupL_CurrencyValue(L_CurrencyValue previousValue)
    {

        if (previousValue != null && previousValue.FundingSources.Contains(this))
        {
            previousValue.FundingSources.Remove(this);
        }


        if (L_CurrencyValue != null)
        {
            if (!L_CurrencyValue.FundingSources.Contains(this))
            {
                L_CurrencyValue.FundingSources.Add(this);
            }

            if (FK_IncomingWireFeeCurrency != L_CurrencyValue.PK_CurrencyValueID)

            {
                FK_IncomingWireFeeCurrency = L_CurrencyValue.PK_CurrencyValueID;
            }

        }

        else if (!_settingFK)

        {

            FK_IncomingWireFeeCurrency = null;

        }

    }


    private void FixupL_CurrencyValue1(L_CurrencyValue previousValue)
    {

        if (previousValue != null && previousValue.FundingSources1.Contains(this))
        {
            previousValue.FundingSources1.Remove(this);
        }


        if (L_CurrencyValue1 != null)
        {
            if (!L_CurrencyValue1.FundingSources1.Contains(this))
            {
                L_CurrencyValue1.FundingSources1.Add(this);
            }

            if (FK_OutgoingWireFeeCurrency != L_CurrencyValue1.PK_CurrencyValueID)

            {
                FK_OutgoingWireFeeCurrency = L_CurrencyValue1.PK_CurrencyValueID;
            }

        }

        else if (!_settingFK)

        {

            FK_OutgoingWireFeeCurrency = null;

        }

    }


    private void FixupOrganization(Organization previousValue)
    {

        if (previousValue != null && previousValue.FundingSources.Contains(this))
        {
            previousValue.FundingSources.Remove(this);
        }


        if (Organization != null)
        {
            if (!Organization.FundingSources.Contains(this))
            {
                Organization.FundingSources.Add(this);
            }

            if (FK_OrganizationID != Organization.PK_OrganizationID)

            {
                FK_OrganizationID = Organization.PK_OrganizationID;
            }

        }

    }


    private void FixupFundingSourceAcceptedCurrencies(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (FundingSourceAcceptedCurrency item in e.NewItems)
            {

                item.FundingSource = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (FundingSourceAcceptedCurrency item in e.OldItems)
            {

                if (ReferenceEquals(item.FundingSource, this))
                {
                    item.FundingSource = null;
                }

            }
        }
    }


    private void FixupAdminTransactions(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (AdminTransaction item in e.NewItems)
            {

                item.FundingSource = this;

            }
        }

        if (e.OldItems != null)
        {
            foreach (AdminTransaction item in e.OldItems)
            {

                if (ReferenceEquals(item.FundingSource, this))
                {
                    item.FundingSource = null;
                }

            }
        }
    }

        #endregion

    
}

}
