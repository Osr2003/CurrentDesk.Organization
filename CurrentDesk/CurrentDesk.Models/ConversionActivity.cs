
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;


namespace CurrentDesk.Models
{

public partial class ConversionActivity
{
    #region Primitive Properties
    

    public virtual int PK_ConversionActivityID
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_FromCurrencyID
    {

        get { return _fK_FromCurrencyID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_FromCurrencyID != value)

            {

                if (L_CurrencyValue != null && L_CurrencyValue.PK_CurrencyValueID != value)

                {

                    L_CurrencyValue = null;

                }

                _fK_FromCurrencyID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_FromCurrencyID;


    public virtual Nullable<decimal> ConversionAmount
    {

        get;
        set;

    }


    public virtual Nullable<double> ExchangeRate
    {

        get;
        set;

    }


    public virtual string FromAccount
    {

        get;
        set;

    }


    public virtual string ToAccount
    {

        get;
        set;

    }


    public virtual string ConversionStatus
    {

        get;
        set;

    }


    public virtual Nullable<int> FK_UserActivityID
    {

        get { return _fK_UserActivityID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_UserActivityID != value)

            {

                if (UserActivity != null && UserActivity.PK_UserActivityID != value)

                {

                    UserActivity = null;

                }

                _fK_UserActivityID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_UserActivityID;


    public virtual Nullable<int> FK_ToCurrencyID
    {

        get { return _fK_ToCurrencyID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_ToCurrencyID != value)

            {

                if (L_CurrencyValue1 != null && L_CurrencyValue1.PK_CurrencyValueID != value)

                {

                    L_CurrencyValue1 = null;

                }

                _fK_ToCurrencyID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_ToCurrencyID;


    public virtual Nullable<int> FK_ToUserID
    {

        get { return _fK_ToUserID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_ToUserID != value)

            {

                if (User1 != null && User1.PK_UserID != value)

                {

                    User1 = null;

                }

                _fK_ToUserID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_ToUserID;


    public virtual Nullable<int> FK_FromUserID
    {

        get { return _fK_FromUserID; }
        set
        {

            try
            {
                _settingFK = true;

            if (_fK_FromUserID != value)

            {

                if (User != null && User.PK_UserID != value)

                {

                    User = null;

                }

                _fK_FromUserID = value;
            }

            }
            finally
            {
                _settingFK = false;
            }

        }

    }

    private Nullable<int> _fK_FromUserID;

        #endregion

        #region Navigation Properties
    


    public virtual L_CurrencyValue L_CurrencyValue
    {

        get { return _l_CurrencyValue; }
        set
        {
            if (!ReferenceEquals(_l_CurrencyValue, value))
            {
                var previousValue = _l_CurrencyValue;
                _l_CurrencyValue = value;
                FixupL_CurrencyValue(previousValue);
            }
        }
    }
    private L_CurrencyValue _l_CurrencyValue;



    public virtual L_CurrencyValue L_CurrencyValue1
    {

        get { return _l_CurrencyValue1; }
        set
        {
            if (!ReferenceEquals(_l_CurrencyValue1, value))
            {
                var previousValue = _l_CurrencyValue1;
                _l_CurrencyValue1 = value;
                FixupL_CurrencyValue1(previousValue);
            }
        }
    }
    private L_CurrencyValue _l_CurrencyValue1;



    public virtual UserActivity UserActivity
    {

        get { return _userActivity; }
        set
        {
            if (!ReferenceEquals(_userActivity, value))
            {
                var previousValue = _userActivity;
                _userActivity = value;
                FixupUserActivity(previousValue);
            }
        }
    }
    private UserActivity _userActivity;



    public virtual User User
    {

        get { return _user; }
        set
        {
            if (!ReferenceEquals(_user, value))
            {
                var previousValue = _user;
                _user = value;
                FixupUser(previousValue);
            }
        }
    }
    private User _user;



    public virtual User User1
    {

        get { return _user1; }
        set
        {
            if (!ReferenceEquals(_user1, value))
            {
                var previousValue = _user1;
                _user1 = value;
                FixupUser1(previousValue);
            }
        }
    }
    private User _user1;

        #endregion

        #region Association Fixup
    

    private bool _settingFK = false;


    private void FixupL_CurrencyValue(L_CurrencyValue previousValue)
    {

        if (previousValue != null && previousValue.ConversionActivities.Contains(this))
        {
            previousValue.ConversionActivities.Remove(this);
        }


        if (L_CurrencyValue != null)
        {
            if (!L_CurrencyValue.ConversionActivities.Contains(this))
            {
                L_CurrencyValue.ConversionActivities.Add(this);
            }

            if (FK_FromCurrencyID != L_CurrencyValue.PK_CurrencyValueID)

            {
                FK_FromCurrencyID = L_CurrencyValue.PK_CurrencyValueID;
            }

        }

        else if (!_settingFK)

        {

            FK_FromCurrencyID = null;

        }

    }


    private void FixupL_CurrencyValue1(L_CurrencyValue previousValue)
    {

        if (previousValue != null && previousValue.ConversionActivities1.Contains(this))
        {
            previousValue.ConversionActivities1.Remove(this);
        }


        if (L_CurrencyValue1 != null)
        {
            if (!L_CurrencyValue1.ConversionActivities1.Contains(this))
            {
                L_CurrencyValue1.ConversionActivities1.Add(this);
            }

            if (FK_ToCurrencyID != L_CurrencyValue1.PK_CurrencyValueID)

            {
                FK_ToCurrencyID = L_CurrencyValue1.PK_CurrencyValueID;
            }

        }

        else if (!_settingFK)

        {

            FK_ToCurrencyID = null;

        }

    }


    private void FixupUserActivity(UserActivity previousValue)
    {

        if (previousValue != null && previousValue.ConversionActivities.Contains(this))
        {
            previousValue.ConversionActivities.Remove(this);
        }


        if (UserActivity != null)
        {
            if (!UserActivity.ConversionActivities.Contains(this))
            {
                UserActivity.ConversionActivities.Add(this);
            }

            if (FK_UserActivityID != UserActivity.PK_UserActivityID)

            {
                FK_UserActivityID = UserActivity.PK_UserActivityID;
            }

        }

        else if (!_settingFK)

        {

            FK_UserActivityID = null;

        }

    }


    private void FixupUser(User previousValue)
    {

        if (previousValue != null && previousValue.ConversionActivities.Contains(this))
        {
            previousValue.ConversionActivities.Remove(this);
        }


        if (User != null)
        {
            if (!User.ConversionActivities.Contains(this))
            {
                User.ConversionActivities.Add(this);
            }

            if (FK_FromUserID != User.PK_UserID)

            {
                FK_FromUserID = User.PK_UserID;
            }

        }

        else if (!_settingFK)

        {

            FK_FromUserID = null;

        }

    }


    private void FixupUser1(User previousValue)
    {

        if (previousValue != null && previousValue.ConversionActivities1.Contains(this))
        {
            previousValue.ConversionActivities1.Remove(this);
        }


        if (User1 != null)
        {
            if (!User1.ConversionActivities1.Contains(this))
            {
                User1.ConversionActivities1.Add(this);
            }

            if (FK_ToUserID != User1.PK_UserID)

            {
                FK_ToUserID = User1.PK_UserID;
            }

        }

        else if (!_settingFK)

        {

            FK_ToUserID = null;

        }

    }

        #endregion

    
}

}
