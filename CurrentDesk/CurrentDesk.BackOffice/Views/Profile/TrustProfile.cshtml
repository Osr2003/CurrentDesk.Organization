@model CurrentDesk.BackOffice.Models.TrustAccountReviewModel
@{
    ViewBag.Title = "TrustProfile";
    Layout = "~/Views/Shared/BackOfficeMaster.cshtml";
}

<div class="content-wrapper">

    <!-- This <div> is for 2 column layouts and contains the left column content and a container for the right column background. -->
    <div class="content-table">

        <!-- Left column content goes here. -->
        <div class="content-left">
            <!-- Page Title Bar -->
            <div class="page-title">
                <h1 class="profile"><span class="normal">My Profile : </span><span id="spnHeaderTypeName">Trust Information</span></h1>
            </div>
            <div id="divTrustInfo">
                <!-- Trust Information Section -->
                <article id="artTrustInfo">
                    <h2 class="inline-block">Trust Information</h2>
                    <a class="icon edit toggleTrust-link" href="#">Edit</a>
                    <div class="content-section">
                        <div class="row toggle-show">
                            <!-- This <div> with the classes "columns two border-right" is here to display the right vertical border correctly. This is only here for styling purposes. No content should be added inside. -->
                            <div class="columns two border-right"></div>
                            <div class="columns two">
                                <div class="avatar">
                                    <img src="@CurrentDesk.BackOffice.Security.SessionManagement.ImageURL" width="150px" height="130px" onerror="imgError(this);"  alt="" />
                                </div>
                            </div>
                            <div class="columns ten">
                                <ul class="row border">
                                    <li class="columns eight">
                                        <h3>Trust Name</h3>
                                        @Html.DisplayFor(model => model.TrustName)</li>
                                    <li class="columns four">
                                        <h3>Trustee Type</h3>
                                        @Html.DisplayFor(model => model.TrusteeType)</li>
                                </ul>
                                <ul class="row">
                                    <li class="columns twelve">
                                        <h3>Trust Address</h3>
                                        @Html.DisplayFor(model => model.TrustAddressLine1)</li>
                                </ul>
                                <ul class="row">
                                    <li class="columns four">
                                        <h3>City</h3>
                                        @Html.DisplayFor(model => model.TrustCity)</li>
                                    <li class="columns four">
                                        <h3>Country</h3>
                                        @Html.DisplayFor(model => model.TrustCountry)</li>
                                    <li class="columns four">
                                        <h3>Postal Code</h3>
                                        @Html.DisplayFor(model => model.TrustPostalCode)</li>
                                </ul>
                                <ul class="row">
                                    <li class="columns eight">
                                        <h3>Account Number:</h3>
                                        @Html.DisplayFor(model => model.ClientAccountNumber)</li>
                                    <li class="columns four">
                                        <h3>Phone ID</h3>
                                        <span id="spnPhoneID">@Html.DisplayFor(model => model.PhoneID)</span></li>
                                </ul>
                            </div>
                        </div>

                        <div class="row toggle-hide">
                            <!-- This <div> with the classes "columns two border-right" is here to display the right vertical border correctly. This is only here for styling purposes. No content should be added inside. -->
                            <div class="columns two border-right"></div>
                            <div class="columns two text-center">
                                <div class="avatar">
                                    @*<img id="imgEditSrc" src="@HttpContext.Current.Session["ImageURl"]" width="150px" height="130px"  onerror="imgError(this);" alt="" />*@
                                    <img id="imgEditSrc" src="@CurrentDesk.BackOffice.Security.SessionManagement.ImageURL" width="150px" height="130px"  onerror="imgError(this);" alt="" />

                                </div>
                                <a class="btn btn-mini" href="#myImageModal" role="button" data-toggle="modal">Change Image</a>
                            </div>
                            <div class="columns ten">
                                <ul class="row border">
                                    <li class="columns eight">
                                        <h3>Trust Name</h3>
                                        @Html.DisplayFor(model => model.TrustName)</li>
                                    <li class="columns four">
                                        <h3>Trustee Type</h3>
                                        @Html.DisplayFor(model => model.TrusteeType)</li>
                                </ul>
                                <ul class="row">
                                    <li class="columns twelve">
                                        <h3>Trust Address</h3>
                                        @Html.DisplayFor(model => model.TrustAddressLine1)</li>
                                </ul>
                                <ul class="row">
                                    <li class="columns four">
                                        <h3>City</h3>
                                        @Html.DisplayFor(model => model.TrustCity)</li>
                                    <li class="columns four">
                                        <h3>Country</h3>
                                        @Html.DisplayFor(model => model.TrustCountry)</li>
                                    <li class="columns four">
                                        <h3>Postal Code</h3>
                                        @Html.DisplayFor(model => model.TrustPostalCode)</li>
                                </ul>
                                <ul class="row">
                                    <li class="columns eight">
                                        <h3>Account Number:</h3>
                                        @Html.DisplayFor(model => model.ClientAccountNumber)</li>
                                    <li class="columns four">
                                        <label class="h3" for="PhoneID">Phone ID</label><input id="txtPhoneID" class="width-med" type="text" /></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="button-box toggle-hide text-right">
                        <button class="btn cancelTrustClick">Cancel</button>
                        <button id="btnTrustInfoSave" class="btn btn-primary">Save Changes</button>
                    </div>
                </article>
            </div>

            <div id="divTrusteeInfo">
                @if (Model.TrusteeType == "Company")
                {
                    <div id="divCompanyTrusteeType">
                        <!-- Trustee Company Information Section -->
                        <article id="artCmpyTrusteeInfo">
                            <h2>Trustee Company Information</h2>
                            <div class="content-section">
                                <ul class="row border">
                                    <li class="columns eight">
                                        <h3>Trustee Company Name</h3>
                                        @Html.DisplayFor(model => model.TrusteeCompanyName)</li>
                                    <li class="columns four">
                                        <h3>Company Type</h3>
                                        @Html.DisplayFor(model => model.TrusteeCompanyType)</li>
                                </ul>
                                <ul class="row">
                                    <li class="columns twelve">
                                        <h3>Trustee Address</h3>
                                        @Html.DisplayFor(model => model.TrusteeAddressLine1)</li>
                                </ul>
                                <ul class="row">
                                    <li class="columns four">
                                        <h3>City</h3>
                                        @Html.DisplayFor(model => model.TrusteeCity)</li>
                                    <li class="columns four">
                                        <h3>Country</h3>
                                        @Html.DisplayFor(model => model.TrusteeCountry)</li>
                                    <li class="columns four">
                                        <h3>Postal Code</h3>
                                        @Html.DisplayFor(model => model.TrusteePostalCode)</li>
                                </ul>
                            </div>
                        </article>
                        <!-- Trustee Authorized Officer Section -->
                        <article>
                            <h2>Trustee Authorized Officer</h2>
                            <div class="content-section">
                                <ul class="row">
                                    <li class="columns two">
                                        <h3>Title</h3>
                                        @Html.DisplayFor(model => model.AuthorizedOfficerTitle)</li>
                                    <li class="columns three">
                                        <h3>First Name</h3>
                                        @Html.DisplayFor(model => model.AuthorizedOfficerFirstName)</li>
                                    <li class="columns three">
                                        <h3>Middle Name</h3>
                                        @Html.DisplayFor(model => model.AuthorizedOfficerMiddleName)</li>
                                    <li class="columns four">
                                        <h3>Last Name</h3>
                                        @Html.DisplayFor(model => model.AuthorizedOfficerLastName)</li>
                                </ul>
                                <ul class="row border">
                                    <li class="columns five">
                                        <h3>Date of Birth</h3>
                                        @Html.DisplayFor(model => model.AuthorizedOfficerDobDay)/@Html.DisplayFor(model => model.AuthorizedOfficerDobMonth)/@Html.DisplayFor(model => model.AuthorizedOfficerDobYear)</li>
                                    <li class="columns seven">
                                        <h3>Gender</h3>
                                        @Html.DisplayFor(model => model.AuthorizedOfficerGender)</li>
                                </ul>
                                <ul class="row">
                                    <li class="columns five">
                                        <h3>Citizenship</h3>
                                        @Html.DisplayFor(model => model.AuthorizedOfficerCitizenship)</li>
                                    <li class="columns seven">
                                        <h3>ID Information</h3>
                                        @Html.DisplayFor(model => model.AuthorizedOfficerIdInfo): @Html.DisplayFor(model => model.AuthorizedOfficerIdNumber)</li>
                                </ul>
                                <ul class="row">
                                    <li class="columns twelve">
                                        <h3>Country of Residence</h3>
                                        @Html.DisplayFor(model => model.AuthorizedOfficerResidenceCountry)</li>
                                </ul>
                            </div>
                        </article>
                        <!-- Trustee Authorized Officer Contact Information Section -->
                        <article>
                            <h2 class="inline-block">Trustee Authorized Officer Contact Information</h2>
                            <a class="icon edit toggleCmpyContact-link" href="#">Edit</a>
                            <div class="content-section">
                                <div class="toggle-show">
                                    <ul class="row">
                                        <li class="columns twelve">
                                            <h3>Residential Address</h3>
                                            @Html.DisplayFor(model => model.AuthorizedOfficerAddressLine1)</li>
                                    </ul>
                                    <ul class="row border">
                                        <li class="columns four">
                                            <h3>City</h3>
                                            @Html.DisplayFor(model => model.AuthorizedOfficerCity)</li>
                                        <li class="columns four">
                                            <h3>Country</h3>
                                            @Html.DisplayFor(model => model.AuthorizedOfficerCountry)</li>
                                        <li class="columns four">
                                            <h3>Postal Code</h3>
                                            @Html.DisplayFor(model => model.AuthorizedOfficerPostalCode)</li>
                                    </ul>
                                    <ul class="row">
                                        <li class="columns four">
                                            <h3>Telephone Number</h3>
                                            <span id="spnTrusteeCmpyTel">@Html.DisplayFor(model => model.AuthorizedOfficerTelCountryCode)-@Html.DisplayFor(model => model.AuthorizedOfficerTelephoneNumber)</span></li>
                                        <li class="columns eight">
                                            <h3>Mobile Number</h3>
                                            <span id="spnTrusteeCmpyMobile">@Html.DisplayFor(model => model.AuthorizedOfficerMobCountryCode)-@Html.DisplayFor(model => model.AuthorizedOfficerMobileNumber)</span></li>
                                    </ul>
                                    <ul class="row">
                                        <li class="columns twelve">
                                            <h3>Email Address</h3>
                                            <span id="spnTrusteeCmpyEmail">@Html.DisplayFor(model => model.AuthorizedOfficerEmailAddress)</span></li>
                                    </ul>
                                </div>

                                <div class="toggle-hide">
                                    <ul class="row">
                                        <li class="columns twelve">
                                            <h3>Residential Address</h3>
                                            @Html.DisplayFor(model => model.AuthorizedOfficerAddressLine1)</li>
                                    </ul>
                                    <ul class="row border">
                                        <li class="columns four">
                                            <h3>City</h3>
                                            @Html.DisplayFor(model => model.AuthorizedOfficerCity)</li>
                                        <li class="columns four">
                                            <h3>Country</h3>
                                            @Html.DisplayFor(model => model.AuthorizedOfficerCountry)</li>
                                        <li class="columns four">
                                            <h3>Postal Code</h3>
                                            @Html.DisplayFor(model => model.AuthorizedOfficerPostalCode)</li>
                                    </ul>
                                    <ul class="row">
                                        <li class="columns four">
                                            <label class="h3" for="Telephone">Telephone Number</label><input id="txtCmpyTelephoneCountryCode" class="width-extraSmall" type="text" /><input id="txtCmpyTelephone" class="width-default" type="text" /></li>
                                        <li class="columns eight">
                                            <label class="h3" for="Mobile">Mobile Number</label><input id="txtCmpyMobileCountryCode" class="width-extraSmall" type="text" /><input id="txtCmpyMobile" class="width-default" type="text" /></li>
                                    </ul>
                                    <ul class="row">
                                        <li class="columns five">
                                            <label class="h3" for="Email">Email Address</label><input id="txtCmpyEmail" class="width-med" type="text" /></li>
                                        <li class="columns eight"></li>
                                    </ul>
                                </div>
                            </div>
                            <div class="button-box toggle-hide text-right">
                                <button class="btn cancelCmpyContactClick">Cancel</button>
                                <button id="btnTrusteeAuthOfficerContactInfo" class="btn btn-primary">Save Changes</button>
                            </div>
                        </article>
                    </div>
                }
                else if (Model.TrusteeType == "Individual")
                {             
                    <div id="divIndividualTrusteeType">
                        <!-- Trustee Individual Information Section -->
                        <article id="artIndTrusteeInfo">
                            <h2>Trustee Information</h2>
                            <div class="content-section">
                                <ul class="row">
                                    <li class="columns two">
                                        <h3>Title</h3>
                                        @Html.DisplayFor(model => model.IndividualTitle)</li>
                                    <li class="columns three">
                                        <h3>First Name</h3>
                                        @Html.DisplayFor(model => model.IndividualFirstName)</li>
                                    <li class="columns three">
                                        <h3>Middle Name</h3>
                                        @Html.DisplayFor(model => model.IndividualMiddleName)</li>
                                    <li class="columns four">
                                        <h3>Last Name</h3>
                                        @Html.DisplayFor(model => model.IndividualLastName)</li>
                                </ul>
                                <ul class="row border">
                                    <li class="columns five">
                                        <h3>Date of Birth</h3>
                                        @Html.DisplayFor(model => model.IndividualDobDay)/@Html.DisplayFor(model => model.IndividualDobMonth)/@Html.DisplayFor(model => model.IndividualDobYear)</li>
                                    <li class="columns seven">
                                        <h3>Gender</h3>
                                        @Html.DisplayFor(model => model.IndividualGender)</li>
                                </ul>
                                <ul class="row">
                                    <li class="columns five">
                                        <h3>Citizenship</h3>
                                        @Html.DisplayFor(model => model.IndividualCitizenship)</li>
                                    <li class="columns seven">
                                        <h3>ID Information</h3>
                                        @Html.DisplayFor(model => model.IndividualIdInfo):@Html.DisplayFor(model => model.IndividualIdNumber)</li>
                                </ul>
                                <ul class="row">
                                    <li class="columns twelve">
                                        <h3>Country of Residence</h3>
                                        @Html.DisplayFor(model => model.IndividualResidenceCountry)</li>
                                </ul>
                            </div>
                        </article>
                        <!-- Trustee Contact Information Section -->
                        <article>
                            <h2 class="inline-block">Trustee Contact Information</h2>
                            <a class="icon edit toggleIndContact-link" href="#">Edit</a>
                            <div class="content-section">
                                <div class="toggle-show">
                                    <ul class="row">
                                        <li class="columns twelve">
                                            <h3>Residential Address</h3>
                                            @Html.DisplayFor(model => model.IndividualResidentialAddLine1)</li>
                                    </ul>
                                    <ul class="row">
                                        <li class="columns four">
                                            <h3>City</h3>
                                            @Html.DisplayFor(model => model.IndividualResidentialCity)</li>
                                        <li class="columns four">
                                            <h3>Country</h3>
                                            @Html.DisplayFor(model => model.IndividualResidentialCountry)</li>
                                        <li class="columns four">
                                            <h3>Postal Code</h3>
                                            @Html.DisplayFor(model => model.IndividualResidentialPostalCode)</li>
                                    </ul>
                                    <ul class="row">
                                        <li class="columns twelve">
                                            <h3>Time At Current Address</h3>
                                            @Html.DisplayFor(model => model.IndividualYearsInCurrentAdd) years @Html.DisplayFor(model => model.IndividualMonthsInCurrentAdd) months</li>
                                    </ul>
                                    <ul class="row">
                                        <li class="columns twelve">
                                            <h3>Previous Address</h3>
                                            @Html.DisplayFor(model => model.IndividualPreviousAddLine1)</li>
                                    </ul>
                                    <ul class="row border">
                                        <li class="columns four">
                                            <h3>City</h3>
                                            @Html.DisplayFor(model => model.IndividualPreviousCity)</li>
                                        <li class="columns four">
                                            <h3>Country</h3>
                                            @Html.DisplayFor(model => model.IndividualPreviousCountry)</li>
                                        <li class="columns four">
                                            <h3>Postal Code</h3>
                                            @Html.DisplayFor(model => model.IndividualPreviousPostalCode)</li>
                                    </ul>
                                    <ul class="row">
                                        <li class="columns four">
                                            <h3>Telephone Number</h3>
                                            <span id="spnTrusteeIndTel">@Html.DisplayFor(model => model.IndividualTelNumberCountryCode)-@Html.DisplayFor(model => model.IndividualTelNumber)</span></li>
                                        <li class="columns eight">
                                            <h3>Mobile Number</h3>
                                            <span id="spnTrusteeIndMobile">@Html.DisplayFor(model => model.IndividualMobileNumberCountryCode)-@Html.DisplayFor(model => model.IndividualMobileNumber)</span></li>
                                    </ul>
                                    <ul class="row">
                                        <li class="columns twelve">
                                            <h3>Email Address</h3>
                                            <span id="spnTrusteeIndEmail">@Html.DisplayFor(model => model.IndividualEmailAddress)</span></li>
                                    </ul>
                                </div>

                                <div class="toggle-hide">
                                    <ul class="row">
                                        <li class="columns twelve">
                                            <h3>Residential Address</h3>
                                            @Html.DisplayFor(model => model.IndividualResidentialAddLine1)</li>
                                    </ul>
                                    <ul class="row">
                                        <li class="columns four">
                                            <h3>City</h3>
                                            @Html.DisplayFor(model => model.IndividualResidentialCity)</li>
                                        <li class="columns four">
                                            <h3>Country</h3>
                                            @Html.DisplayFor(model => model.IndividualResidentialCountry)</li>
                                        <li class="columns four">
                                            <h3>Postal Code</h3>
                                            @Html.DisplayFor(model => model.IndividualResidentialPostalCode)</li>
                                    </ul>
                                    <ul class="row">
                                        <li class="columns twelve">
                                            <h3>Time At Current Address</h3>
                                            @Html.DisplayFor(model => model.IndividualYearsInCurrentAdd) years @Html.DisplayFor(model => model.IndividualMonthsInCurrentAdd) months</li>
                                    </ul>
                                    <ul class="row">
                                        <li class="columns twelve">
                                            <h3>Previous Address</h3>
                                            @Html.DisplayFor(model => model.IndividualPreviousAddLine1)</li>
                                    </ul>
                                    <ul class="row border">
                                        <li class="columns four">
                                            <h3>City</h3>
                                            @Html.DisplayFor(model => model.IndividualPreviousCity)</li>
                                        <li class="columns four">
                                            <h3>Country</h3>
                                            @Html.DisplayFor(model => model.IndividualPreviousCountry)</li>
                                        <li class="columns four">
                                            <h3>Postal Code</h3>
                                            @Html.DisplayFor(model => model.IndividualPreviousPostalCode)</li>
                                    </ul>
                                    <ul class="row">
                                        <li class="columns four">
                                            <label class="h3" for="Telephone">Telephone Number</label><input id="txtTrusteeIndividualTelephoneCountryCode" class="width-extraSmall" type="text" /><input id="txtTrusteeIndividualTelephone" class="width-default" type="text" /></li>
                                        <li class="columns eight">
                                            <label class="h3" for="Mobile">Mobile Number</label><input id="txtTrusteeIndividualMobileCountryCode" class="width-extraSmall" type="text" /><input id="txtTrusteeIndividualMobile" class="width-default" type="text" /></li>
                                    </ul>
                                    <ul class="row">
                                        <li class="columns five">
                                            <label class="h3" for="Email">Email Address</label><input id="txtTrusteeIndividualEmail" class="width-med" type="text" /></li>
                                        <li class="columns eight"></li>
                                    </ul>
                                </div>
                            </div>
                            <div class="button-box toggle-hide text-right">
                                <button class="btn cancelIndContactClick">Cancel</button>
                                <button id="btnTrusteeIndividualContactInfo" class="btn btn-primary">Save Changes</button>
                            </div>
                        </article>
                    </div>
                }
            </div>

            <div id="divBankingInfo">
                <!-- Banking Information Section -->
                <article id="bankingInfo">
                    <ul class="button-bar">
                        <li><a id="aAddNewBank" class="btn btn-mini" href="#myModal" role="button" data-toggle="modal">Add Bank Account</a></li>
                    </ul>
                    <h2>Bank Information</h2>
                    @foreach (var item in Model.BankAccountModelList)
                    {
                        <h2 class="inline-block">@item.BankName</h2>
                        <a id="@item.BankAccountID" class="icon edit togglebank-link" href="#">Edit</a>
                        <div style="margin-bottom: 10px;" class="content-section">
                            <div class="toggle-show">
                                <ul class="row">
                                    <li class="columns four">
                                        <h3>Bank Name</h3>
                                        <label class="bold-font" id="@item.BankAccountID-lblBankName" >@Html.DisplayFor(model => item.BankName)</label></li>
                                    <li class="columns eight">
                                        <h3>Account Number</h3>
                                        <label class="bold-font" id="@item.BankAccountID-lblAccountNumber" >@Html.DisplayFor(model => item.AccountNumber)</label></li>
                                </ul>
                                <ul class="row border">
                                    <li class="columns four">
                                        <h3>Bic Number/SWIFT Code</h3>
                                        <label class="bold-font" id="@item.BankAccountID-lblBicOrSwiftCode" >@Html.DisplayFor(model => item.BicOrSwiftCode)</label></li>
                                    <li class="columns eight">
                                        <h3>Receiving Bank Information</h3>
                                        <label class="bold-font" id="@item.BankAccountID-lblReceivingBankInfoId" >@Html.DisplayFor(model => item.ReceivingBankInfoId)</label>
                                        <label class="bold-font" id="@item.BankAccountID-lblReceivingBankInfo" >@Html.DisplayFor(model => item.ReceivingBankInfo)</label></li>
                                </ul>
                                <ul class="row">
                                    <li class="columns four">
                                        <h3>Bank Address</h3>
                                        <label class="bold-font" id="@item.BankAccountID-lblBankAddLine1" >@Html.DisplayFor(model => item.BankAddLine1)</label>
                                        <label class="bold-font" id="@item.BankAccountID-lblBankAddLine2" >@Html.DisplayFor(model => item.BankAddLine2)</label>
                                    </li>
                                </ul>
                                <ul class="row">
                                    <li class="columns four">
                                        <h3>City</h3>
                                        <label class="bold-font" id="@item.BankAccountID-lblBankCity" >@Html.DisplayFor(model => item.BankCity)</label></li>
                                    <li class="columns four">
                                        <h3>Country</h3>
                                        <label class="bold-font" id="@item.BankAccountID-lblBankCountry" >@Html.DisplayFor(model => item.BankCountry)</label></li>
                                    <li class="columns four">
                                        <h3>Postal Code</h3>
                                        <label class="bold-font" id="@item.BankAccountID-lblBankPostalCode" >@Html.DisplayFor(model => item.BankPostalCode)</label></li>
                                </ul>
                            </div>
                            <div class="toggle-hide">
                                <ul class="row">
                                    <li class="columns four">
                                        <label class="h3" for="BankName">Bank Name</label>
                                        @Html.TextBoxFor(model => item.BankName, new { @id = item.BankAccountID + "txtBankName", @class = "input-text width-med" })</li>
                                    <li class="columns eight">
                                        <label class="h3" for="AccountNum">Account Number</label>
                                        @Html.TextBoxFor(model => item.AccountNumber, new { @id = item.BankAccountID + "txtAccountNumber", @class = "input-text width-med" })</li>
                                </ul>
                                <ul class="row border">
                                    <li class="columns four">
                                        <label class="h3" for="Swift">Bic Number/SWIFT Code</label>
                                        @Html.TextBoxFor(model => item.BicOrSwiftCode, new { @id = item.BankAccountID + "txtBicSwiftCode", @class = "input-text width-med" })
                                    </li>
                                    <li class="columns eight">
                                        <label class="h3" for="Receiving">Receiving Bank Information</label>
                                        @Html.DropDownListFor(model => model.ReceivingBankInfoId, (IEnumerable<SelectListItem>)ViewData["ReceivingBankInfo"], new { @class = @item.BankAccountID + "chzn-select", style = "width: 150px;", @id = item.BankAccountID + "drpReceivingBankInfoId" })
                                        @Html.TextBoxFor(model => item.ReceivingBankInfo, new { @id = item.BankAccountID + "txtReceivingBankInfo", @class = "input-text width-med margin-left" })
                                    </li>
                                </ul>
                                <ul class="row">
                                    <li class="columns twelve">
                                        <label class="h3" for="Address">Bank Address</label>
                                        @Html.TextBoxFor(model => item.BankAddLine1, new { @id = item.BankAccountID + "txtBankAddressLine1", @class = "input-text width-med" })
                                    </li>
                                    <li class="columns twelve">
                                        @Html.TextBoxFor(model => item.BankAddLine2, new { @id = item.BankAccountID + "txtBankAddressLine2", @class = "input-text width-med" })</li>
                                </ul>
                                <ul class="row">
                                    <li class="columns four">
                                        <label class="h3" for="City">City</label>
                                        @Html.TextBoxFor(model => item.BankCity, new { @id = item.BankAccountID + "txtBankCity", @class = "input-text width-med" })
                                    </li>
                                    <li class="columns five">
                                        <label class="h3" for="Country">Country</label>
                                        @Html.DropDownListFor(model => model.BankCountry, (IEnumerable<SelectListItem>)ViewData["Country"], new { @class = @item.BankAccountID + "bankSelect", style = "width: 150px;", @id = item.BankAccountID + "drpBankCountry" })
                                    </li>
                                    <li class="columns three">
                                        <label class="h3" for="Zip">Postal Code</label>
                                        @Html.TextBoxFor(model => item.BankPostalCode, new { @id = item.BankAccountID + "txtBankPostalCode", @class = "input-text width-small" })
                                    </li>
                                </ul>
                            </div>
                        </div>
                        <div class="button-box toggle-hide text-right">
                            <button class="btn cancelBankClick">Cancel</button>
                            <button id=@item.BankAccountID class="btn btn-primary button-Bank">Save Changes</button>
                        </div>
                    }
                </article>
            </div>
        </div>
        <!-- This <div> is for 2 column layouts as a container for the right column background. -->
        <div class="bg-right"></div>
    </div>
    <!-- Right Column content goes here. -->
    <aside class="content-aside">
        <!-- Sub Navigation Section -->
        <nav class="sub-nav">
            <ul>
                <!-- Add the .active class to the <li> that needs active styling. -->
                <li id="liTrust" class="active" onclick="showTrustInfo()"><a class="trust" href="#"><span class="arrow"></span><strong>Trust</strong>Information</a></li>
                <li id="liTrustee"><a class="trustee" href="#" onclick="showTrusteeInfo()"><span class="arrow"></span><strong>Trustee</strong>Information</a></li>
                <li id="liBanking"><a class="banking" href="#" onclick="showBankingInfo()"><span class="arrow"></span><strong>Banking</strong>Information</a></li>
                <!-- The last <li> needs the class .last. This is only here for styling purposes. No links should be added inside. -->
                <li class="last"></li>
            </ul>
        </nav>
    </aside>

</div>

<!-- Begin Modal Upload Content -->
<div id="myImageModal" class="modal hide fade medium">

    <!-- Modal Header -->
    <div class="modal-header">
        <small class="right required"><strong>*Required Fields</strong></small>
        <h2 class="inline-block h2">Add Image</h2>
    </div>

    <!-- Modal Body -->
    <div class="content-section">
        <ul class="row">
            <li class="columns">
                <input id="fileUploader" type="file" name="file" accept="image/*" /></li>
        </ul>
    </div>

    <!-- Modal Footer -->
    <div class="modal-footer">
        <button id="btnUploadClose" class="btn" data-dismiss="modal">Cancel</button>
        <button id="btnUpload" class="btn btn-primary">Upload</button>
    </div>
</div>

<!-- BEGIN MODAL CONTENT SECTION -->
<div id="myModal" class="modal hide fade xlarge">

    <!-- Modal Header -->
    <div class="modal-header">
        <small class="right required"><strong>*Required Fields</strong></small>
        <h2 class="inline-block h2">New Bank Account Information</h2>
    </div>

    <!-- Modal Body -->
    <div class="content-section">
        <ul class="row">
            <li class="columns four">
                <label class="h3" for="Modal-BankName">
                    Bank Name <span class="required">*</span>
                </label>
                <input id="Modal-BankName" class="width-med" type="text" /></li>
            <li class="columns eight">
                <label class="h3" for="Modal-AccountNum">
                    Account Number <span class="required">*</span>
                </label>
                <input id="Modal-AccountNum" class="width-med" type="text" /></li>
        </ul>
        <ul class="row border">
            <li class="columns four">
                <label class="h3" for="Modal-Swift">
                    Bic Number/SWIFT Code <span class="required">*</span>
                </label>
                <input id="Modal-Swift" class="width-med" type="text" /></li>
            <li class="columns eight">
                <label class="h3" for="Modal-Receiving">Receiving Bank Information <span class="required">*</span></label>
                @Html.DropDownListFor(model => model.ReceivingBankInfoId, (IEnumerable<SelectListItem>)ViewData["ReceivingBankInfo"], new { @id = "drpNewRecievingBankInfo", style = "width: 150px;" })
                <input id="Modal-ReceivingBankInfo" class="width-med margin-left" type="text" />
            </li>
        </ul>
        <ul class="row">
            <li class="columns twelve">
                <label class="h3" for="Modal-Address">Bank Address <span class="required">*</span></label>
                <input id="Modal-Address" class="width-med" type="text" /></li>
            <li class="columns twelve">
                <input id="Address2" class="width-med" type="text" /></li>
        </ul>
        <ul class="row">
            <li class="columns four">
                <label class="h3" for="Modal-City">
                    City <span class="required">*</span>
                </label>
                <input id="Modal-City" class="width-med" type="text" /></li>
            <li class="columns five">
                <label class="h3" for="Modal-Country">Country <span class="required">*</span></label>
                @Html.DropDownListFor(model => model.BankCountry, (IEnumerable<SelectListItem>)ViewData["Country"], new { @id = "drpNewBankCountry", @class = "width-med" })
            </li>
            <li class="columns three">
                <label class="h3" for="Modal-Zip">Postal Code <span class="required">*</span></label><input id="Modal-Zip" class="width-100" type="text" /></li>
        </ul>
    </div>

    <!-- Modal Footer -->
    <div class="modal-footer">
        <button class="btn" data-dismiss="modal">Cancel</button>
        <button id="btnAddNewBankAccount" class="btn btn-primary">Add Bank Account</button>
    </div>
</div>

<!-- BEGIN MODAL CONTENT SECTION UPDATE ERROR CONFIRMATION -->
<div id="modalConfirmError" class="modal hide fade medium">

    <!-- Modal Header -->
    <div class="modal-header">
        <p class="padding">Some Error Ocurred</p>
    </div>

    <!-- Modal Footer -->
    <div class="modal-footer">
        <button class="btn" data-dismiss="modal">Close Window</button>
    </div>
</div>
<!-- END MODAL CONTENT SECTION -->

@section Scripts {
    @Scripts.Render("~/bundles/choosen")
    @Scripts.Render("~/bundles/bootstrap")
    @Scripts.Render("~/bundles/upload")
    <script>
        //Ready function
        $(document).ready(function () {
            $('.top-nav ul li#clientProfile').addClass('active');
            $('#divTrusteeInfo, #divBankingInfo').hide();
            $("#drpNewRecievingBankInfo").chosen();
            $("#drpNewBankCountry").chosen();

            //Upload Image       
            $('#btnUpload').click(function () {
                if (validateUploadedFile()) {
                    var url = 'http://' + window.location.host + '/Profile/AddImage';
                    $('#fileUploader').upload(url, function (data) {
                        if (data) {
                            $('#myImageModal').modal('hide');
                            $('#artTrustInfo').prepend('<div class="alert alert-success"><a href="#" class="close" data-dismiss="alert" title="Close">&times;</a>You have successfully uploaded a profile image.</div>');
                            window.location.reload();
                        }
                        else {
                            $('#modalConfirmError').modal('show');
                        }
                    }, 'json');
                }
            });

            //Adding New Bank Account
            $("#btnAddNewBankAccount").click(function () {
                //If valid entries
                if (checkValidNewBankInfoValues()) {
                    $("#loading").show();

                    var values = {
                        "BankName": $('#Modal-BankName').val(),
                        "AccountNumber": $('#Modal-AccountNum').val(),
                        "BicOrSwiftCode": $('#Modal-Swift').val(),
                        "BankAddLine1": $('#Modal-Address').val(),
                        "BankAddLine2": $('#Address2').val(),
                        "ReceivingBankInfoId": $('#drpNewRecievingBankInfo').val(),
                        "ReceivingBankInfo": $('#Modal-ReceivingBankInfo').val(),
                        "BankCity": $('#Modal-City').val(),
                        "BankCountry": $('#drpNewBankCountry').val(),
                        "BankPostalCode": $('#Modal-Zip').val()
                    }
                    $.post("@Url.Action("AddNewBankAccount", "Profile")", values, function (data) {
                        if (data == true) {
                            $("#loading").hide();

                            $('#myModal').modal('hide');
                            $('#bankingInfo').prepend('<div class="alert alert-success"><a href="#" class="close" data-dismiss="alert" title="Close">&times;</a>You have successfully added a new bank.</div>');
                            window.location.reload();
                        }
                        else {
                            $("#loading").hide();
                            $('#modalConfirmError').modal('show');
                        }
                    });
                }
            });

            //Functions Related To Bank Information
            //-----------------------------------------------------

            //jQuery custom script when edit button in the icon bar is clicked
            $('.togglebank-link').click(function () {
                var bankID = $(this).attr("id");
                resetBankInfo(bankID);

                $(this).next('.content-section').find('.toggle-show').toggle();
                $(this).next('.content-section').find('.toggle-hide').toggle();
                $(this).nextAll('.button-box').eq(0).show();
                $(this).hide();

                //Set scroll position and focus
                $(window).scrollTop((($(window).outerHeight(true) - 250) / 2) + $(window).scrollTop());
                $('#' + bankID + 'txtBankName').focus();
                return false;
            });

            //jQuery custom script when cancel button is clicked
            $('.cancelBankClick').click(function () {

                $(this).parent().prev('.content-section').find('.toggle-show').toggle();
                $(this).parent().prev('.content-section').find('.toggle-hide').toggle();
                $(this).parent().prev('.content-section').prev('.togglebank-link').show();
                $(this).parent().hide();

                return false;
            });

            //Updating Bank Information
            $('.button-Bank').click(function () {
                var btn = $(this);
                var bankID = $(this).attr("id");
                var bankName = $('#' + bankID + 'txtBankName').val();
                var accountNumber = $('#' + bankID + 'txtAccountNumber').val();
                var bicOrSwiftCode = $('#' + bankID + 'txtBicSwiftCode').val();
                var bankAddLine1 = $('#' + bankID + 'txtBankAddressLine1').val();
                var bankAddLine2 = $('#' + bankID + 'txtBankAddressLine2').val();
                var receivingBankInfoId = $('#' + bankID + 'drpReceivingBankInfoId').val();
                var receivingBankInfo = $('#' + bankID + 'txtReceivingBankInfo').val();
                var bankCity = $('#' + bankID + 'txtBankCity').val();
                var bankCountry = $('#' + bankID + 'drpBankCountry').val();
                var bankPostalCode = $('#' + bankID + 'txtBankPostalCode').val();

                if (checkValidEditBankInfoValues(bankID)) {
                    $("#loading").show();

                    var values = {
                        "BankAccountID": bankID,
                        "BankName": bankName,
                        "AccountNumber": accountNumber,
                        "BicOrSwiftCode": bicOrSwiftCode,
                        "BankAddLine1": bankAddLine1,
                        "BankAddLine2": bankAddLine2,
                        "ReceivingBankInfoId": receivingBankInfoId,
                        "ReceivingBankInfo": receivingBankInfo,
                        "BankCity": bankCity,
                        "BankCountry": bankCountry,
                        "BankPostalCode": bankPostalCode,
                    }

                    $.post("@Url.Action("UpdateBankInformation", "Profile")", values, function (data) {

                        if (data == true) {
                            $("#loading").hide();

                            $('#bankingInfo').prepend('<div class="alert alert-success"><a href="#" class="close" data-dismiss="alert" title="Close">&times;</a>You have successfully edited your banking information.</div>');

                            $('#' + bankID + '-lblBankName').text(bankName);
                            $('#' + bankID + '-lblAccountNumber').text(accountNumber);
                            $('#' + bankID + '-lblBicOrSwiftCode').text(bicOrSwiftCode);
                            $('#' + bankID + '-lblBankAddLine1').text(bankAddLine1);
                            $('#' + bankID + '-lblBankAddLine2').text(bankAddLine2);
                            $('#' + bankID + '-lblReceivingBankInfoId').text($('#' + bankID + 'drpReceivingBankInfoId :selected').text());
                            $('#' + bankID + '-lblReceivingBankInfo').text(receivingBankInfo);
                            $('#' + bankID + '-lblBankCity').text(bankCity);
                            $('#' + bankID + '-lblBankCountry').text($('#' + bankID + 'drpBankCountry :selected').text());
                            $('#' + bankID + '-lblBankPostalCode').text(bankPostalCode);

                            btn.parent().prev('.content-section').find('.toggle-show').toggle();
                            btn.parent().prev('.content-section').find('.toggle-hide').toggle();
                            btn.parent().parent().find('.togglebank-link').show();
                            btn.parent().hide();
                        }
                        else {
                            $("#loading").hide();
                            $('#modalConfirmError').modal('show');
                        }
                        return false;
                    });
                }
            });

            //------End Bank Info--------------

            //jQuery custom script when Trust info edit button in the icon bar is clicked
            $('.toggleTrust-link').click(function () {
                //Reset all edit textboxes to present values
                resetEditTextBoxes();

                $(this).next('.content-section').find('.toggle-show').toggle();
                $(this).next('.content-section').find('.toggle-hide').toggle();
                $(this).hide();
                $(this).nextAll('.button-box').show();

                //Set focus
                $('#txtPhoneID').focus();
                return false;
            });

            //jQuery custom script when Trust info cancel button is clicked
            $('.cancelTrustClick').click(function () {
                $(this).parent().prev('.content-section').find('.toggle-show').toggle();
                $(this).parent().prev('.content-section').find('.toggle-hide').toggle();
                $(this).parent().parent().find('.toggleTrust-link').show();
                $(this).parent().hide();
                return false;
            });

            //jQuery custom script when Trustee Cmpy Contact info edit button in the icon bar is clicked
            $('.toggleCmpyContact-link').click(function () {
                //Reset all edit textboxes to present values
                resetEditTextBoxes();

                $(this).next('.content-section').find('.toggle-show').toggle();
                $(this).next('.content-section').find('.toggle-hide').toggle();
                $(this).hide();
                $(this).nextAll('.button-box').show();

                //Set scroll position and focus
                $(window).scrollTop((($(window).outerHeight(true)) / 2) + $(window).scrollTop());
                $('#txtCmpyTelephoneCountryCode').focus();
                return false;
            });

            //jQuery custom script when Trustee Cmpy Contact info cancel button is clicked
            $('.cancelCmpyContactClick').click(function () {
                $(this).parent().prev('.content-section').find('.toggle-show').toggle();
                $(this).parent().prev('.content-section').find('.toggle-hide').toggle();
                $(this).parent().parent().find('.toggleCmpyContact-link').show();
                $(this).parent().hide();
                return false;
            });

            //jQuery custom script when Trustee Individual Contact info edit button in the icon bar is clicked
            $('.toggleIndContact-link').click(function () {
                //Reset all edit textboxes to present values
                resetEditTextBoxes();

                $(this).next('.content-section').find('.toggle-show').toggle();
                $(this).next('.content-section').find('.toggle-hide').toggle();
                $(this).hide();
                $(this).nextAll('.button-box').show();

                //Set scroll position and focus
                $(window).scrollTop((($(window).outerHeight(true)) / 2) + $(window).scrollTop());
                $('#txtTrusteeIndividualTelephoneCountryCode').focus();
                return false;
            });

            //jQuery custom script when Trustee Individual Contact info cancel button is clicked
            $('.cancelIndContactClick').click(function () {
                $(this).parent().prev('.content-section').find('.toggle-show').toggle();
                $(this).parent().prev('.content-section').find('.toggle-hide').toggle();
                $(this).parent().parent().find('.toggleIndContact-link').show();
                $(this).parent().hide();
                return false;
            });

            //Function to update Trust Information
            $('#btnTrustInfoSave').click(function () {
                var clickedButton = $(this);

                if (checkValidTrustInfoValues()) {
                    $("#loading").show();

                    var trustInformationEditValues = {
                        "phoneID": $('#txtPhoneID').val()
                    }

                    //Post request to update Trust info
                    $.post("@Url.Action("UpdateTrustInformation", "Profile")", trustInformationEditValues, function (data) {
                        if (data == true) {
                            $("#loading").hide();

                            $('#artTrustInfo').prepend('<div class="alert alert-success"><a href="#" class="close" data-dismiss="alert" title="Close">&times;</a>You have successfully edited your profile.</div>');

                            $('#spnPhoneID').text($('#txtPhoneID').val());

                            $('.cancelTrustClick').trigger('click');
                        }
                        else {
                            $("#loading").hide();
                            $('#modalConfirmError').modal('show');
                        }
                    });
                }
                else {
                    $('.requiredError').remove();
                    $('#txtPhoneID').after('<span class="requiredError">*</span>');
                }
            });

            //Function to update Company Auth Officer Contact Info
            $('#btnTrusteeAuthOfficerContactInfo').click(function () {
                if (checkValidTrusteeCmpyAuthContactInfoValues()) {
                    $("#loading").show();

                    var values = { "emailID": $('#txtCmpyEmail').val() }
                    var trusteeCmpyContactInfoEditValues = {
                        "TelephoneCountryCode": $('#txtCmpyTelephoneCountryCode').val(),
                        "TelephoneNumber": $('#txtCmpyTelephone').val(),
                        "MobileCountryCode": $('#txtCmpyMobileCountryCode').val(),
                        "MobileNumber": $('#txtCmpyMobile').val(),
                        "EmailID": $('#txtCmpyEmail').val()
                    }

                    //Post request to check if email already exists          
                    $.post("@Url.Action("CheckIfDuplicateEmail", "Profile")", values, function (data) {
                        if (data == false) {
                            //Post request to update Trustee Cmpy Contact info
                            $.post("@Url.Action("UpdateTrusteeCmpyAuthOfficerContactInfo", "Profile")", trusteeCmpyContactInfoEditValues, function (data) {
                                if (data == true) {
                                    $("#loading").hide();

                                    $('#artCmpyTrusteeInfo').prepend('<div class="alert alert-success"><a href="#" class="close" data-dismiss="alert" title="Close">&times;</a>You have successfully edited your profile.</div>');

                                    $('#spnTrusteeCmpyTel').text($('#txtCmpyTelephoneCountryCode').val() + '-' + $('#txtCmpyTelephone').val());
                                    $('#spnTrusteeCmpyMobile').text($('#txtCmpyMobileCountryCode').val() + '-' + $('#txtCmpyMobile').val());
                                    $('#spnTrusteeCmpyEmail').text($('#txtCmpyEmail').val());

                                    $('.cancelCmpyContactClick').trigger('click');
                                }
                                else {
                                    $("#loading").hide();
                                    $('#modalConfirmError').modal('show');
                                }
                            });
                        }
                        else if (data == true) {
                            $("#loading").hide();
                            $('#txtCmpyEmail').after('<span class="requiredError">Email already exists!</span>');
                        }
                        else {
                            $("#loading").hide();
                            $('#modalConfirmError').modal('show');
                        }
                    });
                }
            });

            //Function to update Individual Auth Officer Contact Info
            $('#btnTrusteeIndividualContactInfo').click(function () {
                if (checkValidTrusteeIndividualAuthContactInfoValues()) {
                    $("#loading").show();

                    var values = { "emailID": $('#txtTrusteeIndividualEmail').val() }
                    var trusteeIndividualContactInfoEditValues = {
                        "TelephoneCountryCode": $('#txtTrusteeIndividualTelephoneCountryCode').val(),
                        "TelephoneNumber": $('#txtTrusteeIndividualTelephone').val(),
                        "MobileCountryCode": $('#txtTrusteeIndividualMobileCountryCode').val(),
                        "MobileNumber": $('#txtTrusteeIndividualMobile').val(),
                        "EmailID": $('#txtTrusteeIndividualEmail').val()
                    }

                    //Post request to check if email already exists          
                    $.post("@Url.Action("CheckIfDuplicateEmail", "Profile")", values, function (data) {
                        if (data == false) {
                            //Post request to update Trustee Individual Contact info
                            $.post("@Url.Action("UpdateTrusteeIndividualAuthOfficerContactInfo", "Profile")", trusteeIndividualContactInfoEditValues, function (data) {
                                if (data == true) {
                                    $("#loading").hide();

                                    $('#artIndTrusteeInfo').prepend('<div class="alert alert-success"><a href="#" class="close" data-dismiss="alert" title="Close">&times;</a>You have successfully edited your profile.</div>');

                                    $('#spnTrusteeIndTel').text($('#txtTrusteeIndividualTelephoneCountryCode').val() + '-' + $('#txtTrusteeIndividualTelephone').val());
                                    $('#spnTrusteeIndMobile').text($('#txtTrusteeIndividualMobileCountryCode').val() + '-' + $('#txtTrusteeIndividualMobile').val());
                                    $('#spnTrusteeIndEmail').text($('#txtTrusteeIndividualEmail').val());

                                    $('.cancelIndContactClick').trigger('click');
                                }
                                else {
                                    $("#loading").hide();
                                    $('#modalConfirmError').modal('show');
                                }
                            });
                        }
                        else if (data == true) {
                            $("#loading").hide();
                            $('#txtTrusteeIndividualEmail').after('<span class="requiredError">Email already exists!</span>');
                        }
                        else {
                            $("#loading").hide();
                            $('#modalConfirmError').modal('show');
                        }
                    });
                }
            });

        });//End of ready

        //Function to reset all edit textboxes to present values
        function resetEditTextBoxes() {
            $('#txtPhoneID').val($('#spnPhoneID').text());

            $('#txtCmpyTelephoneCountryCode').val($('#spnTrusteeCmpyTel').text().split('-')[0]);
            $('#txtCmpyTelephone').val($('#spnTrusteeCmpyTel').text().split('-')[1]);
            $('#txtCmpyMobileCountryCode').val($('#spnTrusteeCmpyMobile').text().split('-')[0]);
            $('#txtCmpyMobile').val($('#spnTrusteeCmpyMobile').text().split('-')[1]);
            $('#txtCmpyEmail').val($('#spnTrusteeCmpyEmail').text());

            $('#txtTrusteeIndividualTelephoneCountryCode').val($('#spnTrusteeIndTel').text().split('-')[0]);
            $('#txtTrusteeIndividualTelephone').val($('#spnTrusteeIndTel').text().split('-')[1]);
            $('#txtTrusteeIndividualMobileCountryCode').val($('#spnTrusteeIndMobile').text().split('-')[0]);
            $('#txtTrusteeIndividualMobile').val($('#spnTrusteeIndMobile').text().split('-')[1]);
            $('#txtTrusteeIndividualEmail').val($('#spnTrusteeIndEmail').text());
        }

        //Function to check valid Trust Info values
        function checkValidTrustInfoValues() {
            if ($('#txtPhoneID').val() != '' && $('#txtPhoneID').val().length <= 30) {
                return true;
            }
            return false;
        }

        //Function to check valid Trustee Cmpy Auth Officer Contact Info values
        function checkValidTrusteeCmpyAuthContactInfoValues() {
            $('.requiredError').remove();
            var valid = true;
            var regNumeric = new RegExp("^[0-9]*$");
            var regEmail = /^([a-zA-Z0-9_.-])+@@([a-zA-Z0-9_.-])+\.([a-zA-Z])+([a-zA-Z])+/;

            if ($('#txtCmpyTelephoneCountryCode').val() == '' || !regNumeric.test($('#txtCmpyTelephoneCountryCode').val()) || $('#txtCmpyTelephoneCountryCode').val().length > 10) {
                $('#txtCmpyTelephoneCountryCode').after('<span class="requiredError">*</span>');
                valid = false;
            }
            if ($('#txtCmpyTelephone').val() == '' || !regNumeric.test($('#txtCmpyTelephone').val()) || $('#txtCmpyTelephone').val().length > 15) {
                $('#txtCmpyTelephone').after('<span class="requiredError">*</span>');
                valid = false;
            }
            if ($('#txtCmpyMobileCountryCode').val() == '' || !regNumeric.test($('#txtCmpyMobileCountryCode').val()) || $('#txtCmpyMobileCountryCode').val().length > 10) {
                $('#txtCmpyMobileCountryCode').after('<span class="requiredError">*</span>');
                valid = false;
            }
            if ($('#txtCmpyMobile').val() == '' || !regNumeric.test($('#txtCmpyMobile').val()) || $('#txtCmpyMobile').val().length > 15) {
                $('#txtCmpyMobile').after('<span class="requiredError">*</span>');
                valid = false;
            }
            if (!regEmail.test($('#txtCmpyEmail').val()) || $('#txtCmpyEmail').val().length > 50) {
                $('#txtCmpyEmail').after('<span class="requiredError">*</span>');
                valid = false;
            }

            return valid;
        }

        //Function to check valid Trustee Individual Auth Officer Contact Info values
        function checkValidTrusteeIndividualAuthContactInfoValues() {
            $('.requiredError').remove();
            var valid = true;
            var regNumeric = new RegExp("^[0-9]*$");
            var regEmail = /^([a-zA-Z0-9_.-])+@@([a-zA-Z0-9_.-])+\.([a-zA-Z])+([a-zA-Z])+/;

            if ($('#txtTrusteeIndividualTelephoneCountryCode').val() == '' || !regNumeric.test($('#txtTrusteeIndividualTelephoneCountryCode').val()) || $('#txtTrusteeIndividualTelephoneCountryCode').val().length > 10) {
                $('#txtTrusteeIndividualTelephoneCountryCode').after('<span class="requiredError">*</span>');
                valid = false;
            }
            if ($('#txtTrusteeIndividualTelephone').val() == '' || !regNumeric.test($('#txtTrusteeIndividualTelephone').val()) || $('#txtTrusteeIndividualTelephone').val().length > 15) {
                $('#txtTrusteeIndividualTelephone').after('<span class="requiredError">*</span>');
                valid = false;
            }
            if ($('#txtTrusteeIndividualMobileCountryCode').val() == '' || !regNumeric.test($('#txtTrusteeIndividualMobileCountryCode').val()) || $('#txtTrusteeIndividualMobileCountryCode').val().length > 10) {
                $('#txtTrusteeIndividualMobileCountryCode').after('<span class="requiredError">*</span>');
                valid = false;
            }
            if ($('#txtTrusteeIndividualMobile').val() == '' || !regNumeric.test($('#txtTrusteeIndividualMobile').val()) || $('#txtTrusteeIndividualMobile').val().length > 15) {
                $('#txtTrusteeIndividualMobile').after('<span class="requiredError">*</span>');
                valid = false;
            }
            if (!regEmail.test($('#txtTrusteeIndividualEmail').val()) || $('#txtTrusteeIndividualEmail').val().length > 50) {
                $('#txtTrusteeIndividualEmail').after('<span class="requiredError">*</span>');
                valid = false;
            }

            return valid;
        }

        //Function to validate image file to be uploaded
        function validateUploadedFile() {
            $('#uploadErrorID').remove();
            if ($('#fileUploader').val().length == 0) {
                $('#fileUploader').after('<span id="uploadErrorID" class="requiredError">*</span>');
                return false;
            }
            else {
                var fileName = $('#fileUploader').val();
                var fileExt = fileName.split('.').pop().toLowerCase();
                if (fileName.indexOf(".") == -1 || fileExt != "jpg" && fileExt != "tif" && fileExt != "png" && fileExt != "gif") {
                    $('#myImageModal').modal('hide');
                    $('#artTrustInfo').prepend('<div class="alert alert-error"><a href="#" class="close" data-dismiss="alert" title="Close">&times;</a>Image file type is not accepted; please upload jpg, png, tif or gif.</div>');
                    return false;
                }
                else {
                    return true;
                }
            }
        }

        //Function to show trust info
        function showTrustInfo() {
            $('#spnHeaderTypeName').text('Trust Information');
            $('#divTrustInfo').show();
            $('#divTrusteeInfo, #divBankingInfo').hide();

            $('#liBanking, #liTrustee').removeClass('active');
            $('#liTrust').addClass('active');
        }

        //Function to show trustee info
        function showTrusteeInfo() {
            $('#spnHeaderTypeName').text('Trustee Information');
            $('#divTrusteeInfo').show();
            $('#divTrustInfo, #divBankingInfo').hide();

            $('#liBanking, #liTrust').removeClass('active');
            $('#liTrustee').addClass('active');
        }

        //Function to show banking info
        function showBankingInfo() {
            $('#spnHeaderTypeName').text('Banking Information');
            $('#divTrustInfo, #divTrusteeInfo').hide();
            $('#divBankingInfo').show();

            $('#liTrust, #liTrustee').removeClass('active');
            $('#liBanking').addClass('active');
        }

        //Empty/reset add new bank info textboxes
        $('#aAddNewBank').click(function () {
            $('#Modal-BankName').val('');
            $('#Modal-AccountNum').val('');
            $('#Modal-Swift').val('');
            $('#Modal-Address').val('');
            $('#Address2').val('');
            //$('#drpNewRecievingBankInfo').val();
            $('#Modal-ReceivingBankInfo').val('');
            $('#Modal-City').val('');
            //$('#drpNewBankCountry').val('');
            $('#Modal-Zip').val('');
        });
    </script>
}

