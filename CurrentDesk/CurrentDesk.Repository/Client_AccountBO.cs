using System;
using System.Linq;
using System.Collections.Generic;
using CurrentDesk.Models;
using System.Data.Objects;
using CurrentDesk.DAL;
using CurrentDesk.Common;

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template at 1/2/2013 5:37:12 PM
//	   and this file should not get overridden 
//
//     Add your own data access methods.
// </auto-generated>
//------------------------------------------------------------------------------ 
	
namespace CurrentDesk.Repository.CurrentDesk
{   
	public class Client_AccountBO
	{
        /// <summary>
        /// This method returns number of same currency trading accounts for the same user
        /// </summary>
        /// <param name="accType">accType</param>
        /// <param name="pkClientOrIBID">pkClientOrIBID</param>
        /// <param name="pkCurrencyID">pkCurrencyID</param>
        /// <returns></returns>
        public int GetNumberOfSameCurrencyTradingAccountForUser(LoginAccountType accType ,int pkClientOrIBID, int? pkCurrencyID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientAccRepo =
                        new Client_AccountRepository(new EFRepository<Client_Account>(), unitOfWork);

                    //Creating ClientAccount Objeset to Query
                    ObjectSet<Client_Account> clientAccObjSet =
                      ((CurrentDeskClientsEntities)clientAccRepo.Repository.UnitOfWork.Context).Client_Account;

                    if (accType == LoginAccountType.LiveAccount)
                    {
                        //Return no  of trading acc
                        return clientAccObjSet.Where(acc => acc.FK_ClientID == pkClientOrIBID).Where(acc => acc.FK_CurrencyID == pkCurrencyID).ToList().Count();
                    }
                    else
                    {
                        //Return no  of trading acc
                        return clientAccObjSet.Where(acc => acc.FK_IntroducingBrokerID == pkClientOrIBID).Where(acc => acc.FK_CurrencyID == pkCurrencyID).ToList().Count();
                    }
                }
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method returns latest account number from database
        /// </summary>
        /// <returns></returns>
        public string GetLatestAccountNumber()
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientAccRepo =
                        new Client_AccountRepository(new EFRepository<Client_Account>(), unitOfWork);

                    //Creating ClientAccount Objset to Query
                    ObjectSet<Client_Account> clientAccObjSet =
                      ((CurrentDeskClientsEntities)clientAccRepo.Repository.UnitOfWork.Context).Client_Account;

                    //Return latest acc number
                    if (clientAccObjSet.OrderByDescending(acc => acc.AccountNumber).FirstOrDefault() != null)
                    {
                        return clientAccObjSet.OrderByDescending(acc => acc.AccountNumber).FirstOrDefault().AccountNumber.ToString();
                    }
                    else
                    {
                        return "";
                    }
                }
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method returns latest account number from database
        /// </summary>
        /// <param name="organizationID">organizationID</param>
        /// <returns></returns>
        public string GetLatestAccountNumber(int organizationID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientAccRepo =
                        new Client_AccountRepository(new EFRepository<Client_Account>(), unitOfWork);

                    //Creating ClientAccount Objset to Query
                    ObjectSet<Client_Account> clientAccObjSet =
                      ((CurrentDeskClientsEntities)clientAccRepo.Repository.UnitOfWork.Context).Client_Account;

                    //Return latest acc number
                    if (clientAccObjSet.Where(acc => acc.FK_OrganizationID == organizationID).OrderByDescending(acc => acc.AccountNumber).FirstOrDefault() != null)
                    {
                        return clientAccObjSet.Where(acc => acc.FK_OrganizationID == organizationID).OrderByDescending(acc => acc.AccountNumber).FirstOrDefault().AccountNumber.ToString();
                    }
                    else
                    {
                        return "";
                    }
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method inserts new trading account for the user
        /// </summary>
        /// <param name="accType">accType</param>
        /// <param name="pkClientOrIBID">pkClientOrIBID</param>
        /// <param name="fkAccountID">fkAccountID</param>
        /// <param name="pkCurrencyID">pkCurrencyID</param>
        /// <param name="landingAcc">landingAcc</param>
        /// <param name="tradingAcc">tradingAcc</param>
        /// <param name="accNumber">accNumber</param>
        /// <param name="organizationID">organizationID</param>
        /// <returns></returns>
        public int InsertAccountNumberForUser(LoginAccountType accType, int pkClientOrIBID, int? fkAccountID, int? pkCurrencyID, string landingAcc, string tradingAcc, long accNumber, int organizationID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientAccRepo =
                        new Client_AccountRepository(new EFRepository<Client_Account>(), unitOfWork);
                    Client_Account newLandingAcc = new Client_Account();
                    Client_Account newTradingAcc = new Client_Account();
                    //Client_Account newAssetRebateAcc = new Client_Account();

                    newLandingAcc.FK_OrganizationID = organizationID;
                    newTradingAcc.FK_OrganizationID = organizationID;

                    if (accType == LoginAccountType.LiveAccount)
                    {
                        //Landing acc details
                        newLandingAcc.FK_ClientID = pkClientOrIBID;
                        newLandingAcc.FK_CurrencyID = pkCurrencyID;
                        newLandingAcc.LandingAccount = landingAcc;
                        newLandingAcc.AccountNumber = accNumber;
                        newLandingAcc.CurrentBalance = Convert.ToDecimal(0.00);
                        newLandingAcc.IsLandingAccount = true;

                        //Trading acc details
                        newTradingAcc.FK_ClientID = pkClientOrIBID;
                        newTradingAcc.FK_CurrencyID = pkCurrencyID;
                        newTradingAcc.TradingAccount = tradingAcc;
                        newTradingAcc.LandingAccount = landingAcc;
                        newTradingAcc.AccountNumber = accNumber;
                        newTradingAcc.CurrentBalance = Convert.ToDecimal(0.00);
                        newTradingAcc.IsLandingAccount = false;

                        if (fkAccountID == Constants.K_TRADING_ACCOUNT)
                        {
                            newTradingAcc.IsTradingAccount = true;
                        }
                        else if(fkAccountID == Constants.K_MANAGED_ACCOUNT)
                        {
                            newTradingAcc.IsTradingAccount = false;
                        }

                    }
                    else
                    {
                        //Landing acc details
                        newLandingAcc.FK_IntroducingBrokerID = pkClientOrIBID;
                        newLandingAcc.FK_CurrencyID = pkCurrencyID;
                        newLandingAcc.LandingAccount = landingAcc;
                        newLandingAcc.AccountNumber = accNumber;
                        newLandingAcc.CurrentBalance = Convert.ToDecimal(0.00);
                        newLandingAcc.IsLandingAccount = true;

                        //IB Rebate acc details
                        newTradingAcc.FK_IntroducingBrokerID = pkClientOrIBID;
                        newTradingAcc.FK_CurrencyID = pkCurrencyID;
                        newTradingAcc.TradingAccount = tradingAcc;
                        newTradingAcc.LandingAccount = landingAcc;
                        newTradingAcc.AccountNumber = accNumber;
                        newTradingAcc.CurrentBalance = Convert.ToDecimal(0.00);
                        newTradingAcc.IsLandingAccount = false;
                        newTradingAcc.IsTradingAccount = false;

                        //Create rebate account if AM and set above 
                        //rebate acc as trading acc for AM
                        //if (fkAccountID == Constants.K_ACCTCODE_AM)
                        //{
                        //    newAssetRebateAcc.FK_IntroducingBrokerID = pkClientOrIBID;
                        //    newAssetRebateAcc.FK_CurrencyID = pkCurrencyID;
                        //    newAssetRebateAcc.TradingAccount = tradingAcc.Split('-')[0] + "-002-" + tradingAcc.Split('-')[2];
                        //    newAssetRebateAcc.LandingAccount = landingAcc;
                        //    newAssetRebateAcc.AccountNumber = accNumber;
                        //    newAssetRebateAcc.CurrentBalance = Convert.ToDecimal(0.00);
                        //    newAssetRebateAcc.IsLandingAccount = false;
                        //    newAssetRebateAcc.IsTradingAccount = false;

                        //    newTradingAcc.IsTradingAccount = true;

                        //    clientAccRepo.Add(newAssetRebateAcc);
                        //}
                    }

                    clientAccRepo.Add(newLandingAcc);
                    clientAccRepo.Add(newTradingAcc);
                    clientAccRepo.Save();
                    return newTradingAcc.PK_ClientAccountID;
                }
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method returns existing acc number of
        /// user if exists or returns empty
        /// </summary>
        ///<param name="accType">accType</param>
        /// <param name="pkClientOrIBID">pkClientOrIBID</param>
        /// <returns></returns>
        public string GetUserExistingAccountNumber(LoginAccountType accType, int pkClientOrIBID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientAccRepo =
                        new Client_AccountRepository(new EFRepository<Client_Account>(), unitOfWork);

                    //Creating ClientAccount Objeset to Query
                    ObjectSet<Client_Account> clientAccObjSet =
                      ((CurrentDeskClientsEntities)clientAccRepo.Repository.UnitOfWork.Context).Client_Account;

                    //Return existing acc number
                    if ((accType == LoginAccountType.LiveAccount) && clientAccObjSet.Where(acc => acc.FK_ClientID == pkClientOrIBID).FirstOrDefault() != null)
                    {
                        return clientAccObjSet.Where(acc => acc.FK_ClientID == pkClientOrIBID).FirstOrDefault().LandingAccount;
                    }
                    else if ((accType == LoginAccountType.PartnerAccount) && clientAccObjSet.Where(acc => acc.FK_IntroducingBrokerID == pkClientOrIBID).FirstOrDefault() != null)
                    {
                        return clientAccObjSet.Where(acc => acc.FK_IntroducingBrokerID == pkClientOrIBID).FirstOrDefault().LandingAccount;
                    }
                    
                    //Return empty if no acc number exists for user
                    return "";
                }
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// Get different currency accounts for the user
        /// </summary>
        /// <param name="accType">accType</param>
        /// <param name="userID">userID</param>
        /// <returns></returns>
        public string GetDifferentCurrencyAccountOfUser(LoginAccountType accType, int userID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientAccRepo =
                        new Client_AccountRepository(new EFRepository<Client_Account>(), unitOfWork);

                    //Creating ClientAccount Objset to Query
                    ObjectSet<Client_Account> clientAccObjSet =
                      ((CurrentDeskClientsEntities)clientAccRepo.Repository.UnitOfWork.Context).Client_Account;

                    string currencyIDS = string.Empty;
                    List<Client_Account> currencyAccs;
                    var currencyIDList = new List<int?>();                    

                    //Live
                    if (accType == LoginAccountType.LiveAccount)
                    {
                        currencyAccs = clientAccObjSet.Include("Client").Where(acc => acc.Client.FK_UserID == userID).Distinct().ToList();
                        currencyIDList = currencyAccs.GroupBy(act => act.FK_CurrencyID).Select(x => x.Key).ToList();

                    }
                    //Partner
                    else
                    {
                        currencyAccs = clientAccObjSet.Include("IntroducingBroker").Where(acc => acc.IntroducingBroker.FK_UserID == userID).Distinct().ToList();
                        currencyIDList = currencyAccs.GroupBy(act => act.FK_CurrencyID).Select(x => x.Key).ToList();
                    }

                    if (currencyAccs.Count() > 0)
                    {
                        //Iterate through each curr id and append to string
                        foreach (var acc in currencyIDList)
                        {
                            currencyIDS += acc + "/";
                        }
                    }
                    return currencyIDS;
                }
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method returns different currencies in which client accounts are present
        /// </summary>
        /// <param name="clientID">clientID</param>
        /// <returns></returns>
        public string GetDifferentCurrencyAccountOfClientOnClientPK(int clientID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientAccRepo =
                        new Client_AccountRepository(new EFRepository<Client_Account>(), unitOfWork);

                    //Creating ClientAccount Objset to Query
                    ObjectSet<Client_Account> clientAccObjSet =
                      ((CurrentDeskClientsEntities)clientAccRepo.Repository.UnitOfWork.Context).Client_Account;

                    string currencyIDS = string.Empty;
                    List<Client_Account> currencyAccs;
                    var currencyIDList = new List<int?>();

                        currencyAccs = clientAccObjSet.Where(acc => acc.FK_ClientID == clientID).Distinct().ToList();
                        currencyIDList = currencyAccs.GroupBy(act => act.FK_CurrencyID).Select(x => x.Key).ToList();

                    if (currencyAccs.Count() > 0)
                    {
                        //Iterate through each curr id and append to string
                        foreach (var acc in currencyIDList)
                        {
                            currencyIDS += acc + "/";
                        }
                    }
                    return currencyIDS;
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method returns all trading accounts of a particular currency for a user
        /// </summary>
        /// <param name="accType">accType</param>
        /// <param name="userID">userID</param>
        /// <param name="currencyID">currencyID</param>
        /// <returns></returns>
        public List<Client_Account> GetAllTradingAccountsForCurrency(LoginAccountType accType, int userID, int currencyID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientAccRepo =
                            new Client_AccountRepository(new EFRepository<Client_Account>(), unitOfWork);

                    //Creating ClientAccount Objset to Query
                    ObjectSet<Client_Account> clientAccObjSet =
                      ((CurrentDeskClientsEntities)clientAccRepo.Repository.UnitOfWork.Context).Client_Account;

                    //Live
                    if (accType == LoginAccountType.LiveAccount)
                    {
                        return clientAccObjSet.Include("Client").Where(acc => acc.Client.FK_UserID == userID && acc.FK_CurrencyID == currencyID && acc.IsLandingAccount == false).ToList();
                    }
                    //Partner
                    else
                    {
                        return clientAccObjSet.Include("IntroducingBroker").Where(acc => acc.IntroducingBroker.FK_UserID == userID && acc.FK_CurrencyID == currencyID && acc.IsLandingAccount == false).ToList();
                    }
                }
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method returns all accounts except landing account for a particular currency and client
        /// </summary>
        /// <param name="clientID"></param>
        /// <param name="currencyID"></param>
        /// <returns></returns>
        public List<Client_Account> GetAllTradingAccountsForCurrencyOfClient(int clientID, int currencyID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientAccRepo =
                            new Client_AccountRepository(new EFRepository<Client_Account>(), unitOfWork);

                    //Creating ClientAccount Objset to Query
                    ObjectSet<Client_Account> clientAccObjSet =
                      ((CurrentDeskClientsEntities)clientAccRepo.Repository.UnitOfWork.Context).Client_Account;

                    return clientAccObjSet.Where(acc => acc.FK_ClientID == clientID && acc.FK_CurrencyID == currencyID && acc.IsLandingAccount == false).ToList();
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method gets landing account number for a particular currency for a user
        /// </summary>
        /// <param name="accType">accType</param>
        /// <param name="userID">userID</param>
        /// <param name="currencyID">currencyID</param>
        /// <returns></returns>
        public Client_Account GetLandingAccountForCurrencyOfUser(LoginAccountType accType, int userID, int currencyID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientAccRepo =
                            new Client_AccountRepository(new EFRepository<Client_Account>(), unitOfWork);

                    //Creating ClientAccount Objset to Query
                    ObjectSet<Client_Account> clientAccObjSet =
                      ((CurrentDeskClientsEntities)clientAccRepo.Repository.UnitOfWork.Context).Client_Account;

                    //Live
                    if (accType == LoginAccountType.LiveAccount)
                    {
                        return clientAccObjSet.Include("Client").Where(acc => acc.Client.FK_UserID == userID && acc.IsLandingAccount == true && acc.FK_CurrencyID == currencyID).FirstOrDefault();
                    }
                    //Partner
                    else
                    {
                        return clientAccObjSet.Include("IntroducingBroker").Where(acc => acc.IntroducingBroker.FK_UserID == userID && acc.IsLandingAccount == true && acc.FK_CurrencyID == currencyID).FirstOrDefault();
                    }
                }
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method returns landing account of client based on currency ID and clientPK ID
        /// </summary>
        /// <param name="clientID">clientID</param>
        /// <param name="currencyID">currencyID</param>
        /// <returns></returns>
        public Client_Account GetLandingAccountForCurrencyOfClientOnClientPK(int clientID, int currencyID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientAccRepo =
                            new Client_AccountRepository(new EFRepository<Client_Account>(), unitOfWork);

                    //Creating ClientAccount Objset to Query
                    ObjectSet<Client_Account> clientAccObjSet =
                      ((CurrentDeskClientsEntities)clientAccRepo.Repository.UnitOfWork.Context).Client_Account;

                    return clientAccObjSet.Where(acc => acc.FK_ClientID == clientID && acc.IsLandingAccount == true && acc.FK_CurrencyID == currencyID).FirstOrDefault();

                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method returns list of landing accounts for a particular user
        /// </summary>
        /// <param name="accType">accType</param>
        /// <param name="userID">userID</param>
        /// <returns></returns>
        public List<Client_Account> GetAllLandingAccountForUser(LoginAccountType accType, int userID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientAccRepo =
                            new Client_AccountRepository(new EFRepository<Client_Account>(), unitOfWork);

                    //Creating ClientAccount Objeset to Query
                    ObjectSet<Client_Account> clientAccObjSet =
                      ((CurrentDeskClientsEntities)clientAccRepo.Repository.UnitOfWork.Context).Client_Account;

                    //Live
                    if (accType == LoginAccountType.LiveAccount)
                    {
                        return clientAccObjSet.Include("Client").Where(acc => acc.Client.FK_UserID == userID && acc.IsLandingAccount == true).ToList();
                    }
                    //Partner
                    else
                    {
                        return clientAccObjSet.Include("IntroducingBroker").Where(acc => acc.IntroducingBroker.FK_UserID == userID && acc.IsLandingAccount == true).ToList();
                    }
                }
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method returns all trading accounts of user
        /// </summary>
        /// <param name="accType">accType</param>
        /// <param name="userID">userID</param>
        /// <returns></returns>
        public List<Client_Account> GetAllTradingAccountsOfUser(LoginAccountType accType, int userID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientAccRepo =
                            new Client_AccountRepository(new EFRepository<Client_Account>(), unitOfWork);

                    //Creating ClientAccount Objset to Query
                    ObjectSet<Client_Account> clientAccObjSet =
                      ((CurrentDeskClientsEntities)clientAccRepo.Repository.UnitOfWork.Context).Client_Account;

                    //Live
                    if (accType == LoginAccountType.LiveAccount)
                    {
                        return clientAccObjSet.Include("Client").Where(acc => acc.Client.FK_UserID == userID).ToList();
                    }
                    //Partner
                    else
                    {
                        return clientAccObjSet.Include("IntroducingBroker").Where(acc => acc.IntroducingBroker.FK_UserID == userID).ToList();
                    }
                }
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method creates new landing account for the user
        /// </summary>
        /// <param name="accType">accType</param>
        /// <param name="userID">userID</param>
        /// <param name="currID">currID</param>
        /// <returns>bool</returns>
        public bool CreateNewLandingAccount(LoginAccountType accType, int userID, int currID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientAccRepo =
                                new Client_AccountRepository(new EFRepository<Client_Account>(), unitOfWork);

                    //Creating ClientAccount Objset to Query
                    ObjectSet<Client_Account> clientAccObjSet =
                      ((CurrentDeskClientsEntities)clientAccRepo.Repository.UnitOfWork.Context).Client_Account;

                    L_CurrencyValueBO currencyBO = new L_CurrencyValueBO();

                    //Check if same landing account is present
                    var checkIfLandingAccExists = clientAccObjSet.Include("IntroducingBroker").Where(acc => acc.IntroducingBroker.FK_UserID == userID && acc.FK_CurrencyID == currID).FirstOrDefault();
                    if (checkIfLandingAccExists != null)
                    {
                        return false;
                    }

                    //If no such landing acc exists then create new
                    var existingUserAccNumber = clientAccObjSet.Include("IntroducingBroker").Where(acc => acc.IntroducingBroker.FK_UserID == userID).FirstOrDefault();
                    if (existingUserAccNumber != null)
                    {
                        Client_Account newLandingAcc = new Client_Account();
                        newLandingAcc.FK_IntroducingBrokerID = existingUserAccNumber.FK_IntroducingBrokerID;
                        newLandingAcc.FK_OrganizationID = existingUserAccNumber.FK_OrganizationID;
                        newLandingAcc.FK_CurrencyID = currID;
                        newLandingAcc.AccountNumber = existingUserAccNumber.AccountNumber;
                        newLandingAcc.LandingAccount = currencyBO.GetCurrencyAccountCode(currID) + "-" + existingUserAccNumber.LandingAccount.Split('-')[1] + "-" + existingUserAccNumber.LandingAccount.Split('-')[2];
                        newLandingAcc.CurrentBalance = Convert.ToDecimal(0.00);
                        newLandingAcc.IsLandingAccount = true;

                        clientAccRepo.Add(newLandingAcc);
                        clientAccRepo.Save();

                        //Add managed account
                        CreateNewManagedAccount(accType, userID, currID);

                        return true;
                    }
                    return false;
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method creates trader new landing account
        /// </summary>
        /// <param name="userID">userID</param>
        /// <param name="currID">currID</param>
        /// <returns></returns>
        public int CreateNewTraderLandingAccount(int userID, int currID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientAccRepo =
                                new Client_AccountRepository(new EFRepository<Client_Account>(), unitOfWork);

                    //Creating ClientAccount Objset to Query
                    ObjectSet<Client_Account> clientAccObjSet =
                      ((CurrentDeskClientsEntities)clientAccRepo.Repository.UnitOfWork.Context).Client_Account;

                    L_CurrencyValueBO currencyBO = new L_CurrencyValueBO();

                    //Check if same landing account is present
                    var checkIfLandingAccExists = clientAccObjSet.Include("Client").Where(acc => acc.Client.FK_UserID == userID && acc.FK_CurrencyID == currID && acc.IsLandingAccount == true).FirstOrDefault();
                    if (checkIfLandingAccExists != null)
                    {
                        return 0;
                    }

                    //If no such landing acc exists then create new
                    var existingUserAccNumber = clientAccObjSet.Include("Client").Where(acc => acc.Client.FK_UserID == userID).FirstOrDefault();
                    if (existingUserAccNumber != null)
                    {
                        string accNumber = existingUserAccNumber.LandingAccount.Split('-')[2];

                        //Add landing acc
                        Client_Account newLandingAcc = new Client_Account();
                        newLandingAcc.FK_ClientID = existingUserAccNumber.FK_ClientID;
                        newLandingAcc.FK_OrganizationID = existingUserAccNumber.FK_OrganizationID;
                        newLandingAcc.FK_CurrencyID = currID;
                        newLandingAcc.AccountNumber = existingUserAccNumber.AccountNumber;
                        newLandingAcc.LandingAccount = currencyBO.GetCurrencyAccountCode(currID) + "-" + existingUserAccNumber.LandingAccount.Split('-')[1] + "-" + existingUserAccNumber.LandingAccount.Split('-')[2];
                        newLandingAcc.CurrentBalance = Convert.ToDecimal(0.00);
                        newLandingAcc.IsLandingAccount = true;

                        clientAccRepo.Add(newLandingAcc);
                        clientAccRepo.Save();

                        return newLandingAcc.PK_ClientAccountID;
                    }
                    return 0;
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method creates new trading account in database
        /// </summary>
        /// <param name="accType">accType</param>
        /// <param name="userID">userID</param>
        /// <param name="currID">currID</param>
        /// <returns></returns>
        public int CreateNewTradingAccount(LoginAccountType accType, int userID, int currID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientAccRepo =
                                new Client_AccountRepository(new EFRepository<Client_Account>(), unitOfWork);

                    //Creating ClientAccount Objeset to Query
                    ObjectSet<Client_Account> clientAccObjSet =
                      ((CurrentDeskClientsEntities)clientAccRepo.Repository.UnitOfWork.Context).Client_Account;

                    Client_Account newTradingAcc = new Client_Account();

                    //Live
                    if (accType == LoginAccountType.LiveAccount)
                    {
                        //Check if trading account is present of same currency
                        var tradingAcc = clientAccObjSet.Include("Client").Where(acc => acc.Client.FK_UserID == userID && acc.FK_CurrencyID == currID && acc.IsLandingAccount == false).ToList();
                        if (tradingAcc != null)
                        {
                            newTradingAcc.FK_ClientID = tradingAcc.FirstOrDefault().FK_ClientID;
                            newTradingAcc.FK_OrganizationID = tradingAcc.FirstOrDefault().FK_OrganizationID;
                            newTradingAcc.FK_CurrencyID = currID;
                            newTradingAcc.LandingAccount = tradingAcc.FirstOrDefault().LandingAccount;
                            newTradingAcc.AccountNumber = tradingAcc.FirstOrDefault().AccountNumber;
                            newTradingAcc.TradingAccount = tradingAcc.FirstOrDefault().TradingAccount.Split('-')[0] + "-" + (tradingAcc.Count() + 1).ToString("D3") + "-" + tradingAcc.FirstOrDefault().TradingAccount.Split('-')[2];
                            newTradingAcc.CurrentBalance = Convert.ToDecimal(0.00);
                            newTradingAcc.IsLandingAccount = false;
                            newTradingAcc.IsTradingAccount = true;

                            clientAccRepo.Add(newTradingAcc);
                            clientAccRepo.Save();
                            return newTradingAcc.PK_ClientAccountID;
                        }
                    }
                    //Partner
                    else if (accType == LoginAccountType.PartnerAccount)
                    {
                        //Check if trading account is present of same currency
                        var tradingAcc = clientAccObjSet.Include("IntroducingBroker").Where(acc => acc.IntroducingBroker.FK_UserID == userID && acc.FK_CurrencyID == currID && acc.IsLandingAccount == false).ToList();
                        if (tradingAcc != null)
                        {
                            newTradingAcc.FK_IntroducingBrokerID = tradingAcc.FirstOrDefault().FK_IntroducingBrokerID;
                            newTradingAcc.FK_OrganizationID = tradingAcc.FirstOrDefault().FK_OrganizationID;
                            newTradingAcc.FK_CurrencyID = currID;
                            newTradingAcc.LandingAccount = tradingAcc.FirstOrDefault().LandingAccount;
                            newTradingAcc.AccountNumber = tradingAcc.FirstOrDefault().AccountNumber;
                            newTradingAcc.TradingAccount = tradingAcc.FirstOrDefault().TradingAccount.Split('-')[0] + "-" + (tradingAcc.Count() + 1).ToString("D3") + "-" + tradingAcc.FirstOrDefault().TradingAccount.Split('-')[2];
                            newTradingAcc.CurrentBalance = Convert.ToDecimal(0.00);
                            newTradingAcc.IsLandingAccount = false;
                            newTradingAcc.IsTradingAccount = true;

                            clientAccRepo.Add(newTradingAcc);
                            clientAccRepo.Save();
                            return newTradingAcc.PK_ClientAccountID;
                        }
                    }
                    return newTradingAcc.PK_ClientAccountID;
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method creates new managed account in database
        /// </summary>
        /// <param name="accType">accType</param>
        /// <param name="userID">userID</param>
        /// <param name="currID">currID</param>
        /// <returns></returns>
        public int CreateNewManagedAccount(LoginAccountType accType, int userID, int currID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientAccRepo =
                                new Client_AccountRepository(new EFRepository<Client_Account>(), unitOfWork);

                    //Creating ClientAccount Objeset to Query
                    ObjectSet<Client_Account> clientAccObjSet =
                      ((CurrentDeskClientsEntities)clientAccRepo.Repository.UnitOfWork.Context).Client_Account;

                    Client_Account newManagedAcc = new Client_Account();

                    //Live
                    if (accType == LoginAccountType.LiveAccount)
                    {
                        //Check if trading account is present of same currency
                        var landingAcc = clientAccObjSet.Include("Client").Where(acc => acc.Client.FK_UserID == userID && acc.FK_CurrencyID == currID && acc.IsLandingAccount == true);
                        var tradingAcc = clientAccObjSet.Include("Client").Where(acc => acc.Client.FK_UserID == userID && acc.FK_CurrencyID == currID && acc.IsLandingAccount == false).ToList();
                        if (landingAcc != null)
                        {
                            newManagedAcc.FK_ClientID = landingAcc.FirstOrDefault().FK_ClientID;
                            newManagedAcc.FK_OrganizationID = landingAcc.FirstOrDefault().FK_OrganizationID;
                            newManagedAcc.FK_CurrencyID = currID;
                            newManagedAcc.LandingAccount = landingAcc.FirstOrDefault().LandingAccount;
                            newManagedAcc.AccountNumber = landingAcc.FirstOrDefault().AccountNumber;
                            newManagedAcc.TradingAccount = landingAcc.FirstOrDefault().LandingAccount.Split('-')[0] + "-" + (tradingAcc.Count() + 1).ToString("D3") + "-" + landingAcc.FirstOrDefault().LandingAccount.Split('-')[2];
                            newManagedAcc.CurrentBalance = Convert.ToDecimal(0.00);
                            newManagedAcc.IsLandingAccount = false;
                            newManagedAcc.IsTradingAccount = false;

                            clientAccRepo.Add(newManagedAcc);
                            clientAccRepo.Save();
                            return newManagedAcc.PK_ClientAccountID;
                        }
                    }
                    //Partner
                    else if (accType == LoginAccountType.PartnerAccount)
                    {
                        //Check if trading account is present of same currency
                        var landingAcc = clientAccObjSet.Include("IntroducingBroker").Where(acc => acc.IntroducingBroker.FK_UserID == userID && acc.FK_CurrencyID == currID && acc.IsLandingAccount == true);
                        var tradingAcc = clientAccObjSet.Include("IntroducingBroker").Where(acc => acc.IntroducingBroker.FK_UserID == userID && acc.FK_CurrencyID == currID && acc.IsLandingAccount == false).ToList();
                        if (landingAcc != null)
                        {
                            newManagedAcc.FK_IntroducingBrokerID = landingAcc.FirstOrDefault().FK_IntroducingBrokerID;
                            newManagedAcc.FK_OrganizationID = landingAcc.FirstOrDefault().FK_OrganizationID;
                            newManagedAcc.FK_CurrencyID = currID;
                            newManagedAcc.LandingAccount = landingAcc.FirstOrDefault().LandingAccount;
                            newManagedAcc.AccountNumber = landingAcc.FirstOrDefault().AccountNumber;
                            newManagedAcc.TradingAccount = landingAcc.FirstOrDefault().LandingAccount.Split('-')[0] + "-" + (tradingAcc.Count() + 1).ToString("D3") + "-" + landingAcc.FirstOrDefault().LandingAccount.Split('-')[2];
                            newManagedAcc.CurrentBalance = Convert.ToDecimal(0.00);
                            newManagedAcc.IsLandingAccount = false;
                            newManagedAcc.IsTradingAccount = false;

                            clientAccRepo.Add(newManagedAcc);
                            clientAccRepo.Save();
                            return newManagedAcc.PK_ClientAccountID;
                        }
                    }
                    return newManagedAcc.PK_ClientAccountID;
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method transfers funds between two trading accounts
        /// </summary>
        /// <param name="fromAcc">fromAcc</param>
        /// <param name="toAcc">toAcc</param>
        /// <param name="amount">amount</param>
        /// <param name="exchangeRate">exchangeRate</param>
        /// <param name="organizationID">organizationID</param>
        /// <returns></returns>
        public bool TransferFundInternal(string fromAcc, string toAcc, double amount, double exchangeRate, int organizationID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientAccRepo =
                                new Client_AccountRepository(new EFRepository<Client_Account>(), unitOfWork);

                    //Creating ClientAccount Objset to Query
                    ObjectSet<Client_Account> clientAccObjSet =
                      ((CurrentDeskClientsEntities)clientAccRepo.Repository.UnitOfWork.Context).Client_Account;

                    var fromAccount = clientAccObjSet.Where(acc => acc.TradingAccount == fromAcc && acc.FK_OrganizationID == organizationID).FirstOrDefault();
                    if (fromAccount == null)
                    {
                        fromAccount = clientAccObjSet.Where(acc => acc.LandingAccount == fromAcc && acc.IsLandingAccount == true && acc.FK_OrganizationID == organizationID).FirstOrDefault();
                    }

                    //If balance is greater than transaction amount
                    if (fromAccount.CurrentBalance >= Convert.ToDecimal(amount))
                    {
                        //Not a platform account
                        if (fromAccount.PlatformLogin == null)
                        {
                            fromAccount.CurrentBalance = Math.Round((Convert.ToDecimal(fromAccount.CurrentBalance) - Convert.ToDecimal(amount)), 2);
                        }

                        var toAccount = clientAccObjSet.Where(acc => acc.TradingAccount == toAcc && acc.FK_OrganizationID == organizationID).FirstOrDefault();
                        if (toAccount == null)
                        {
                            toAccount = clientAccObjSet.Where(acc => acc.LandingAccount == toAcc && acc.IsLandingAccount == true && acc.FK_OrganizationID == organizationID).FirstOrDefault();
                        }

                        //Not a platform account
                        if (toAccount.PlatformLogin == null)
                        {
                            toAccount.CurrentBalance = Math.Round((Convert.ToDecimal(toAccount.CurrentBalance) + (Convert.ToDecimal(amount * exchangeRate))), 2);
                        }

                        clientAccRepo.Save();

                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method transfers funds between two trading accounts
        /// </summary>
        /// <param name="fromAcc">fromAcc</param>
        /// <param name="toAcc">toAcc</param>
        /// <param name="amount">amount</param>
        /// <param name="fee">fee</param>
        /// <param name="exchangeRate">exchangeRate</param>
        /// <param name="organizationID">organizationID</param>
        /// <returns></returns>
        public bool TransferUserFund(string fromAcc, string toAcc, double amount, double fee, double exchangeRate, int organizationID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientAccRepo =
                                new Client_AccountRepository(new EFRepository<Client_Account>(), unitOfWork);

                    //Creating ClientAccount Objset to Query
                    ObjectSet<Client_Account> clientAccObjSet =
                      ((CurrentDeskClientsEntities)clientAccRepo.Repository.UnitOfWork.Context).Client_Account;

                    var fromAccount = clientAccObjSet.Where(acc => acc.TradingAccount == fromAcc && acc.FK_OrganizationID == organizationID).FirstOrDefault();
                    if (fromAccount == null)
                    {
                        fromAccount = clientAccObjSet.Where(acc => acc.LandingAccount == fromAcc && acc.IsLandingAccount == true && acc.FK_OrganizationID == organizationID).FirstOrDefault();
                    }

                    //If balance is greater than transaction amount
                    if (fromAccount.CurrentBalance >= Convert.ToDecimal(amount))
                    {
                        //Not a platform account
                        if (fromAccount.PlatformLogin == null)
                        {
                            fromAccount.CurrentBalance = Math.Round((Convert.ToDecimal(fromAccount.CurrentBalance) - Convert.ToDecimal(amount + fee)), 2);
                        }

                        var toAccount = clientAccObjSet.Where(acc => acc.TradingAccount == toAcc && acc.FK_OrganizationID == organizationID).FirstOrDefault();
                        if (toAccount == null)
                        {
                            toAccount = clientAccObjSet.Where(acc => acc.LandingAccount == toAcc && acc.IsLandingAccount == true && acc.FK_OrganizationID == organizationID).FirstOrDefault();
                        }

                        //Not a platform account
                        if (toAccount.PlatformLogin == null)
                        {
                            toAccount.CurrentBalance = Math.Round((Convert.ToDecimal(toAccount.CurrentBalance) + (Convert.ToDecimal(amount * exchangeRate))), 2);
                        }

                        clientAccRepo.Save();

                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method inserts trading platform id and login value for corresponding
        /// trading account row in Client_Account table
        /// </summary>
        /// <param name="pkClientAccID">pkClientAccID</param>
        /// <param name="fkPlatformID">fkPlatformID</param>
        /// <param name="platformPwd">platformPwd</param>
        /// <param name="platformLogin">platformLogin</param>
        public void InsertPlatformLoginForTradingAccount(int pkClientAccID, int? fkPlatformID, string platformPwd, int platformLogin)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientAccRepo =
                                new Client_AccountRepository(new EFRepository<Client_Account>(), unitOfWork);

                    //Creating ClientAccount Objeset to Query
                    ObjectSet<Client_Account> clientAccObjSet =
                      ((CurrentDeskClientsEntities)clientAccRepo.Repository.UnitOfWork.Context).Client_Account;

                    var tradingAcc = clientAccObjSet.Where(acc => acc.PK_ClientAccountID == pkClientAccID).FirstOrDefault();
                    if (tradingAcc != null)
                    {
                        tradingAcc.PlatformLogin = platformLogin;
                        tradingAcc.FK_PlatformID = fkPlatformID;
                        tradingAcc.PlatformPassword = platformPwd;
                    }

                    clientAccRepo.Save();
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method returns account details of 
        /// a particular account
        /// </summary>
        /// <param name="accountNumber">accountNumber</param>
        /// <param name="organizationID">organizationID</param>
        /// <returns></returns>
        public Client_Account GetAccountDetails(string accountNumber, int organizationID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientAccRepo =
                                new Client_AccountRepository(new EFRepository<Client_Account>(), unitOfWork);

                    //Creating ClientAccount Objeset to Query
                    ObjectSet<Client_Account> clientAccObjSet =
                      ((CurrentDeskClientsEntities)clientAccRepo.Repository.UnitOfWork.Context).Client_Account;

                    return clientAccObjSet.Where(acc => acc.TradingAccount == accountNumber && acc.FK_OrganizationID == organizationID).FirstOrDefault();
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method adds or edit account name
        /// </summary>
        /// <param name="accName">accName</param>
        /// <param name="accNumber">accNumber</param>
        /// <param name="organizationID">organizationID</param>
        /// <returns></returns>
        public bool SaveAccountName(string accName, string accNumber, int organizationID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientAccRepo =
                                new Client_AccountRepository(new EFRepository<Client_Account>(), unitOfWork);

                    //Creating ClientAccount Objeset to Query
                    ObjectSet<Client_Account> clientAccObjSet =
                      ((CurrentDeskClientsEntities)clientAccRepo.Repository.UnitOfWork.Context).Client_Account;

                    var account = clientAccObjSet.Where(acc => acc.TradingAccount == accNumber && acc.FK_OrganizationID == organizationID).FirstOrDefault();
                    if (account != null)
                    {
                        account.AccountName = accName;
                        clientAccRepo.Save();
                        return true;
                    }
                    return false;
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method returns all dashboard accounts of user
        /// </summary>
        /// <param name="accType">accType</param>
        /// <param name="userID">userID</param>
        /// <returns></returns>
        public List<Client_Account> GetDashboardAccounts(LoginAccountType accType, int userID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientAccRepo =
                                new Client_AccountRepository(new EFRepository<Client_Account>(), unitOfWork);

                    //Creating ClientAccount Objset to Query
                    ObjectSet<Client_Account> clientAccObjSet =
                      ((CurrentDeskClientsEntities)clientAccRepo.Repository.UnitOfWork.Context).Client_Account;

                    if (accType == LoginAccountType.LiveAccount)
                    {
                        return clientAccObjSet.Include("Client").Where(acc => acc.Client.FK_UserID == userID && acc.IsLandingAccount == false).ToList();
                    }
                    else
                    {
                        return clientAccObjSet.Include("IntroducingBroker").Where(acc => acc.IntroducingBroker.FK_UserID == userID && acc.IsLandingAccount == false).ToList();
                    }
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method returns any landing account of a user
        /// </summary>
        /// <param name="accType">accType</param>
        /// <param name="userID">userID</param>
        /// <returns></returns>
        public string GetAccountNumberOfUser(LoginAccountType accType, int userID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientAccRepo =
                                new Client_AccountRepository(new EFRepository<Client_Account>(), unitOfWork);

                    //Creating ClientAccount Objeset to Query
                    ObjectSet<Client_Account> clientAccObjSet =
                      ((CurrentDeskClientsEntities)clientAccRepo.Repository.UnitOfWork.Context).Client_Account;

                    if (accType == LoginAccountType.LiveAccount)
                    {
                        return clientAccObjSet.Include("Client").Where(acc => acc.Client.FK_UserID == userID).FirstOrDefault().LandingAccount;
                    }
                    else
                    {
                        return clientAccObjSet.Include("IntroducingBroker").Where(acc => acc.IntroducingBroker.FK_UserID == userID).FirstOrDefault().LandingAccount;
                    }
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method returns all accounts of client based on clientID
        /// </summary>
        /// <param name="clientID">clientID</param>
        /// <returns></returns>
        public List<Client_Account> GetAllAccountsOfClientOnClientPK(int clientID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientAccRepo =
                                new Client_AccountRepository(new EFRepository<Client_Account>(), unitOfWork);

                    //Creating ClientAccount Objeset to Query
                    ObjectSet<Client_Account> clientAccObjSet =
                      ((CurrentDeskClientsEntities)clientAccRepo.Repository.UnitOfWork.Context).Client_Account;

                    return clientAccObjSet.Where(clnt => clnt.FK_ClientID == clientID).ToList();
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method updates LastTradingDate for
        /// a list of logins
        /// </summary>
        /// <param name="logins">logins</param>
        public void UpdateClientTradeDate(List<int> logins)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientAccRepo =
                                new Client_AccountRepository(new EFRepository<Client_Account>(), unitOfWork);

                    //Creating ClientAccount Objeset to Query
                    ObjectSet<Client_Account> clientAccObjSet =
                      ((CurrentDeskClientsEntities)clientAccRepo.Repository.UnitOfWork.Context).Client_Account;

                    //Updating for each login LastTradingDate
                    foreach (var login in logins)
                    {
                        var clientAcc = clientAccObjSet.Where(lgn => lgn.PlatformLogin == login).FirstOrDefault();
                        if (clientAcc != null)
                        {
                            clientAcc.LastTradingDate = DateTime.UtcNow;
                        }
                    }

                    clientAccRepo.Save();
                }
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method returns client activity status
        /// </summary>
        /// <param name="clientID">clientID</param>
        /// <returns></returns>
        public string GetClientActivityStatus(int clientID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientAccRepo =
                               new Client_AccountRepository(new EFRepository<Client_Account>(), unitOfWork);

                    //Creating ClientAccount Objeset to Query
                    ObjectSet<Client_Account> clientAccObjSet =
                      ((CurrentDeskClientsEntities)clientAccRepo.Repository.UnitOfWork.Context).Client_Account;

                    var allAccs = clientAccObjSet.Where(acc => acc.FK_ClientID == clientID && acc.IsLandingAccount == false).ToList();
                    int priority = int.MaxValue;

                    //Iterate through each account
                    foreach (var acc in allAccs)
                    {
                        int accPriority = int.MaxValue;
                        if (acc.LastTradingDate != null)
                        {
                            TimeSpan tradeDateDiff = DateTime.UtcNow - (DateTime)acc.LastTradingDate;
                            if (acc.LastFundingDate != null && tradeDateDiff.Days <= 30)
                            {
                                accPriority = 1;
                            }
                            else if (acc.LastFundingDate != null && tradeDateDiff.Days > 30)
                            {
                                accPriority = 2;
                            }
                            else if (acc.LastFundingDate != null && acc.LastTradingDate != null && tradeDateDiff.Days > 30 && acc.CurrentBalance < 1000)
                            {
                                accPriority = 3;
                            }
                            else if (acc.LastFundingDate == null)
                            {
                                accPriority = 4;
                            }
                        }
                        else if (acc.LastFundingDate != null && acc.LastTradingDate == null)
                        {
                            accPriority = 2;
                        }
                        else if (acc.LastFundingDate == null)
                        {
                            accPriority = 4;
                        }

                        priority = accPriority < priority ? accPriority : priority;
                    }

                    if (priority == 1)
                    {
                        return "active";
                    }
                    else if (priority == 2)
                    {
                        return "inactive";
                    }
                    else if (priority == 3)
                    {
                        return "dormant";
                    }
                    else if (priority == 4)
                    {
                        return "new";
                    }

                    return String.Empty;
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method returns FK_IntroducingBrokerID based on accountNumber
        /// </summary>
        /// <param name="accNumber">accNumber</param>
        /// <param name="organizationID">organizationID</param>
        /// <returns></returns>
        public int GetIntroducingBrokerIDFromAccNumber(string accNumber, int organizationID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientAccRepo =
                          new Client_AccountRepository(new EFRepository<Client_Account>(), unitOfWork);


                    ObjectSet<Client_Account> clientAccObjSet =
                      ((CurrentDeskClientsEntities)clientAccRepo.Repository.UnitOfWork.Context).Client_Account;

                    //Get all IB accounts
                    var brokerAccs = clientAccObjSet.Where(acc => acc.FK_IntroducingBrokerID != null && acc.FK_OrganizationID == organizationID).ToList();

                    //Filter required acc number and return FK_IntroducingBrokerID
                    return (int)brokerAccs.Where(acc => acc.LandingAccount.Split('-')[2] == accNumber).FirstOrDefault().FK_IntroducingBrokerID;
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// Synch client account
        /// </summary>
        public void SynchClientAccount()
        {

            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientAccRepo =
                               new Client_AccountRepository(new EFRepository<Client_Account>(), unitOfWork);

                    //Creating ClientAccount Objeset to Query
                    ObjectSet<Client_Account> clientAccObjSet =
                      ((CurrentDeskClientsEntities)clientAccRepo.Repository.UnitOfWork.Context).Client_Account;

                    var context = (CurrentDeskClientsEntities)unitOfWork.Context;




                    var lstDataToBeSynched = (from m in context.Margins
                                              join ca in context.Client_Account
                                                  on m.Login equals ca.PlatformLogin
                                              where (m.Equity != ca.Equity || ca.Equity == null)
                                              select new
                                              {
                                                  PlatformLogin = ca.PlatformLogin ?? 0,
                                                  Equity = m.Equity ?? 0,
                                                  CurrentBalance = m.Balance ?? 0
                                              }).ToList();

                    var lstLoginId = lstDataToBeSynched.Select(l => l.PlatformLogin).ToList();
                    var lstRecordToBeSynch = (from ca in context.Client_Account
                                              where lstLoginId.Contains(ca.PlatformLogin ?? 0)
                                              select ca).ToList();

                    foreach (var clientac in lstRecordToBeSynch)
                    {
                        var synchData = lstDataToBeSynched.Where(s => s.PlatformLogin == clientac.PlatformLogin).FirstOrDefault();

                        clientac.Equity = Convert.ToDecimal(synchData.Equity);
                        clientac.CurrentBalance = Convert.ToDecimal(synchData.CurrentBalance) - Convert.ToDecimal(clientac.Credit);
                    }

                    context.SaveChanges();

                }
            }
            catch (Exception exception)
            {
                CommonErrorLogger.CommonErrorLog(exception, System.Reflection.MethodBase.GetCurrentMethod().Name);
            }

        }

        /// <summary>
        /// This method updates fee structure of client account
        /// </summary>
        /// <param name="feeValue">feeValue</param>
        /// <param name="pkClientAccID">pkClientAccID</param>
        /// <returns></returns>
        public bool UpdateClientAccFeeStructure(int feeValue, int pkClientAccID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientAccRepo =
                          new Client_AccountRepository(new EFRepository<Client_Account>(), unitOfWork);


                    ObjectSet<Client_Account> clientAccObjSet =
                      ((CurrentDeskClientsEntities)clientAccRepo.Repository.UnitOfWork.Context).Client_Account;

                    //Get client acc
                    var clientAcc = clientAccObjSet.Where(acc => acc.PK_ClientAccountID == pkClientAccID).FirstOrDefault();
                    
                    //Update fee structure of client acc if not null
                    if (clientAcc != null)
                    {
                        clientAcc.FK_FeeStructureID = feeValue;

                        clientAccRepo.Save();
                        return true;
                    }
                    return false;
                }
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                return false;
            }
        }

        /// <summary>
        /// This Function Will Update Slave Equity For Open Trades
        /// </summary>
        /// </summary>
        /// <param name="clientAcctID">clientAcctID</param>
        public void UpdateSlaveOpenEquity(List<int> clientAcctIDList)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientAccRepo =
                            new Client_AccountRepository(new EFRepository<Client_Account>(), unitOfWork);

                    var boMAMTradeBO = new BOMAMTradeBO();


                    ObjectSet<Client_Account> clientAccObjSet =
                      ((CurrentDeskClientsEntities)clientAccRepo.Repository.UnitOfWork.Context).Client_Account;

                    //For Each Item Update the equity
                    foreach (var item in clientAcctIDList)
                    {
                        var selectedClient = clientAccObjSet.Where(cid => cid.PK_ClientAccountID == item).FirstOrDefault();
                        selectedClient.Equity = selectedClient.CurrentBalance + (decimal)boMAMTradeBO.GetProfitSummation(item);
                    }

                    clientAccRepo.Save();
                }

            }
            catch (Exception exceptionMessage)
            {
                CommonErrorLogger.CommonErrorLog(exceptionMessage, System.Reflection.MethodBase.GetCurrentMethod().Name);
               
            }
        }

        /// <summary>
        /// This methods credits balance in client landing account
        /// </summary>
        /// <param name="lAccountNumber">lAccountNumber</param>
        /// <param name="amount">amount</param>
        /// <param name="organizationID">organizationID</param>
        /// <returns></returns>
        public bool CreditLandingAccount(string lAccountNumber, decimal amount, int organizationID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientAccRepo =
                                new Client_AccountRepository(new EFRepository<Client_Account>(), unitOfWork);

                    //Creating ClientAccount Objeset to Query
                    ObjectSet<Client_Account> clientAccObjSet =
                      ((CurrentDeskClientsEntities)clientAccRepo.Repository.UnitOfWork.Context).Client_Account;

                    //Get landing acc
                    var account = clientAccObjSet.Where(acc => acc.LandingAccount == lAccountNumber && acc.IsLandingAccount == true && acc.FK_OrganizationID == organizationID).FirstOrDefault();

                    //Update balance
                    if (account != null)
                    {
                        account.CurrentBalance += amount;
                        clientAccRepo.Save();
                        return true;
                    }

                    return false;
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                return false;
            }
        }

        /// <summary>
        /// This methods debits balance of landing account
        /// </summary>
        /// <param name="lAccountNumber">lAccountNumber</param>
        /// <param name="amount">amount</param>
        /// <param name="organizationID">organizationID</param>
        /// <returns></returns>
        public bool DebitLandingAccount(string lAccountNumber, decimal amount, int organizationID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientAccRepo =
                                new Client_AccountRepository(new EFRepository<Client_Account>(), unitOfWork);

                    //Creating ClientAccount Objeset to Query
                    ObjectSet<Client_Account> clientAccObjSet =
                      ((CurrentDeskClientsEntities)clientAccRepo.Repository.UnitOfWork.Context).Client_Account;

                    //Get landing acc
                    var account = clientAccObjSet.Where(acc => acc.LandingAccount == lAccountNumber && acc.IsLandingAccount == true && acc.FK_OrganizationID == organizationID).FirstOrDefault();

                    //Update balance
                    if (account != null)
                    {
                        if (account.CurrentBalance >= amount)
                        {
                            account.CurrentBalance -= amount;
                            clientAccRepo.Save();
                            return true;
                        }
                    }

                    return false;
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                return false;
            }
        }

        /// <summary>
        /// This methods returns current balance of an account
        /// </summary>
        /// <param name="accNumber">accNumber</param>
        /// <param name="organizationID">organizationID</param>
        /// <returns></returns>
        public decimal GetAccountBalance(string accNumber, int organizationID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientAccRepo =
                                new Client_AccountRepository(new EFRepository<Client_Account>(), unitOfWork);

                    //Creating ClientAccount Objset to Query
                    ObjectSet<Client_Account> clientAccObjSet =
                      ((CurrentDeskClientsEntities)clientAccRepo.Repository.UnitOfWork.Context).Client_Account;

                    Client_Account acc;

                    //If landing account
                    if (accNumber.Split('-')[1] == "000")
                    {
                        acc = clientAccObjSet.Where(ac => ac.LandingAccount == accNumber && ac.IsLandingAccount == true && ac.FK_OrganizationID == organizationID).FirstOrDefault();
                    }
                    else
                    {
                        acc = clientAccObjSet.Where(ac => ac.TradingAccount == accNumber && ac.FK_OrganizationID == organizationID).FirstOrDefault();
                    }

                    return acc != null ? (decimal)acc.CurrentBalance : 0;
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method returns account details of 
        /// a particular account
        /// </summary>
        /// <param name="accountNumber">accountNumber</param>
        /// <param name="organizationID">organizationID</param>
        /// <returns></returns>
        public Client_Account GetAnyAccountDetails(string accountNumber, int organizationID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientAccRepo =
                                new Client_AccountRepository(new EFRepository<Client_Account>(), unitOfWork);

                    //Creating ClientAccount Objeset to Query
                    ObjectSet<Client_Account> clientAccObjSet =
                      ((CurrentDeskClientsEntities)clientAccRepo.Repository.UnitOfWork.Context).Client_Account;

                    var accDetails = clientAccObjSet.Where(acc => acc.TradingAccount == accountNumber && acc.FK_OrganizationID == organizationID).FirstOrDefault();

                    //If  landing acc
                    if (accDetails == null)
                    {
                        accDetails = clientAccObjSet.Where(acc => acc.LandingAccount == accountNumber && acc.IsLandingAccount == true && acc.FK_OrganizationID == organizationID).FirstOrDefault();
                    }

                    return accDetails;
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        #region "Spread Markup Revenue"

        /// <summary>
        /// 
        /// </summary>
        public void CalculateCommission(long startDate, long endDate)
        {

            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {

                    var context = (CurrentDeskClientsEntities)unitOfWork.Context;


                    var lstClientId = (from ca in context.Client_Account
                                       join c in context.Clients
                                           on ca.FK_ClientID equals c.PK_ClientID
                                       where ca.FK_PlatformID == 3 && ca.PlatformLogin != null
                                       select new
                                       {

                                           ClientAccountId = ca.PK_ClientAccountID,
                                           PlatformLogin = ca.PlatformLogin

                                       }
                                           ).ToList();


                    foreach (var client in lstClientId)
                    {

                        Broker broker = new Broker();

                        double? revenue = 0; //context.GetCommissionByLogin(client.PlatformLogin, startDate, endDate).FirstOrDefault();


                        broker.ClientId = client.ClientAccountId;
                        broker.CommissionRevenue = Convert.ToDecimal(revenue);
                        broker.Date = DateTime.Now;

                        context.Brokers.AddObject(broker);

                    }

                    context.SaveChanges();

                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
            }

        }

        /// <summary>
        /// Update SpreadDiff for ClientAccount
        /// </summary>
        /// <param name="lstGroup"></param>
        public void UpdateGroupSpread(List<GroupSpread> lstGroup)
        {

            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {

                    var context = (CurrentDeskClientsEntities)unitOfWork.Context;

                    var lstLoginGroups = (from ca in context.Client_Account
                                          join m in context.Margins
                                              on ca.PlatformLogin equals m.Login
                                          select new
                                          {

                                              ca.PK_ClientAccountID,
                                              ca.PlatformLogin,
                                              m.Group

                                          }).ToList();


                    var lstGroupSpreads = (from g in lstGroup
                                           join ls in lstLoginGroups
                                           on g.GroupName equals ls.Group
                                           select new
                                           {

                                               ls.PlatformLogin,
                                               g.SpreadDiff
                                           }
                                                   ).ToList();

                    var lstLoginIds = lstGroupSpreads.Select(s => s.PlatformLogin).ToList();

                    //Get All ClientAccount
                    var lstClientAccount = (from ca in context.Client_Account
                                            where lstLoginIds.Contains(ca.PlatformLogin ?? 0)
                                            select ca).ToList();


                    foreach (var ca in lstClientAccount)
                    {
                        var getSpread = lstGroupSpreads.Find(s => s.PlatformLogin == ca.PlatformLogin);
                        if (getSpread != null)
                        {
                            ca.SpreadDiff = getSpread.SpreadDiff;
                        }
                    }

                    context.SaveChanges();

                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
            }

        }

        /// <summary>
        /// Calculate spreadmark up revenue
        /// </summary>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        public void UpdateSpreadMarkupRevenue(long startDate, long endDate)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var context = (CurrentDeskClientsEntities)unitOfWork.Context;

                    //Get all client with SpreadDiff              
                    var lstClientAccount = (from ca in context.Client_Account
                                            where ca.SpreadDiff != null
                                            select new
                                            {

                                                ClientAccountID = ca.PK_ClientAccountID,
                                                SpreadDiff = ca.SpreadDiff,
                                                CurrencyId = ca.FK_CurrencyID,
                                                PlatFormLogin = ca.PlatformLogin
                                            }).ToList();


                    foreach (var client in lstClientAccount)
                    {

                        //Get Trades for clientid
                        var lstTrades = (from th in context.TradesHistories
                                         where th.Login == client.PlatFormLogin && th.CloseTime >= startDate && th.CloseTime <= endDate

                                         select new
                                         {
                                             Symbol = th.Symbol,
                                             Volume = th.ActualVol,
                                             MarginRate = th.MarginRate,
                                             OpenRates = th.OpenPrice,
                                             Commission = th.Commission
                                         }).ToList();

                        double? revenue = 0;
                        foreach (var trades in lstTrades)
                        {

                            if (trades.MarginRate == trades.OpenRates)
                            {
                                double? tradeRevenue = trades.Volume * client.SpreadDiff;
                                revenue = revenue + tradeRevenue;
                            }
                            else
                            {

                                double? comInQuotedCur = trades.Volume * client.SpreadDiff;
                                double? marginPerOpenRatets = trades.OpenRates / trades.MarginRate;

                                double? revenueInBaseRates = comInQuotedCur / marginPerOpenRatets;

                                revenue = revenue + revenueInBaseRates;
                            }
                        }



                        double? commission = lstTrades.Sum(c => c.Commission).Value / 2;

                        Broker broker = new Broker();
                        broker.ClientId = client.ClientAccountID;
                        broker.Date = DateTime.Now;
                        broker.CommissionRevenue = commission.DecimalTryParse();
                        broker.SpreadMarkupRevenue = revenue.DecimalTryParse();

                        context.Brokers.AddObject(broker);
                    }

                    context.SaveChanges();

                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
            }
        }

        #endregion

    }
}