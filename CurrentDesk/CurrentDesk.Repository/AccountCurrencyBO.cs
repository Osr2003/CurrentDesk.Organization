/* **************************************************************
* File Name     :- AccountCurrencyBO.cs
* Author        :- Mukesh Nayak
* Copyright     :- Mindfire Solutions 
* Date          :- 25thd Dec 2012
* Modified Date :- 2nd Jan 2013
* Description   :- This file with all the buisness logic Related to AccountCurrency.
****************************************************************/

#region Namespace
using System.Collections.Generic;
using System.Data.Objects;
using System.Linq;
using CurrentDesk.DAL;
using CurrentDesk.Models;
using System;
#endregion

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template at 12/25/2012 2:56:22 PM
//	   and this file should not get overridden 
//
//     Add your own data access methods.
// </auto-generated>
//------------------------------------------------------------------------------ 
	
namespace CurrentDesk.Repository.CurrentDesk
{   
    /// <summary>
    /// Buisness Object For AccountCurrency
    /// </summary>
	public class AccountCurrencyBO
	{

        /// <summary>
        /// This Function Will return all the selected Currency
        /// </summary>
        /// <returns></returns>
        public List<AccountCurrency> GetSelectedCurrency(int formID)
        {
            try
            {

                using (var unitOfWork = new EFUnitOfWork())
                {
                    var accountCurrencyRepo =
                        new AccountCurrencyRepository(new EFRepository<AccountCurrency>(), unitOfWork);

                    ObjectSet<AccountCurrency> currencyObjSet =
                       ((CurrentDeskClientsEntities)accountCurrencyRepo.Repository.UnitOfWork.Context).AccountCurrencies;


                    return currencyObjSet.Where(accur => accur.FK_AccountFormTypeID == formID).Include("L_CurrencyValue").ToList();

                }
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        public List<AccountCurrency> GetSelectedCurrency(int formID, int organizationID)
        {
            try
            {

                using (var unitOfWork = new EFUnitOfWork())
                {
                    var accountCurrencyRepo =
                        new AccountCurrencyRepository(new EFRepository<AccountCurrency>(), unitOfWork);

                    ObjectSet<AccountCurrency> currencyObjSet =
                       ((CurrentDeskClientsEntities)accountCurrencyRepo.Repository.UnitOfWork.Context).AccountCurrencies;


                    return currencyObjSet.Where(accur => accur.FK_AccountFormTypeID == formID && accur.FK_OrganizationID == organizationID).Include         ("L_CurrencyValue").ToList();

                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method gets currency look up table pk id based on account currency id
        /// </summary>
        /// <param name="accCurrencyID">accCurrencyID</param>
        /// <returns>int</returns>
        public int GetCurrencyLookUpID(int? accCurrencyID)
        {
            try
            {

                using (var unitOfWork = new EFUnitOfWork())
                {
                    var accountCurrencyRepo =
                        new AccountCurrencyRepository(new EFRepository<AccountCurrency>(), unitOfWork);

                    ObjectSet<AccountCurrency> currencyObjSet =
                       ((CurrentDeskClientsEntities)accountCurrencyRepo.Repository.UnitOfWork.Context).AccountCurrencies;


                    return currencyObjSet.Where(curr => curr.PK_AccountCurrencyID == accCurrencyID).FirstOrDefault().FK_CurrencyValueID;

                }
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method returns currency look up value from AccountCurrencyID
        /// </summary>
        /// <param name="accCurrID">accCurrID</param>
        /// <returns></returns>
        public string GetCurrencyLookUpValue(int accCurrID)
        {
            try
            {

                using (var unitOfWork = new EFUnitOfWork())
                {
                    var accountCurrencyRepo =
                        new AccountCurrencyRepository(new EFRepository<AccountCurrency>(), unitOfWork);

                    ObjectSet<AccountCurrency> currencyObjSet =
                       ((CurrentDeskClientsEntities)accountCurrencyRepo.Repository.UnitOfWork.Context).AccountCurrencies;


                    return currencyObjSet.Include("L_CurrencyValue").Where(curr => curr.PK_AccountCurrencyID == accCurrID).FirstOrDefault().L_CurrencyValue.CurrencyValue;

                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }
		
	}
}