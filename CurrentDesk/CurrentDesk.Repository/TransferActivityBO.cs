using System;
using System.Linq;
using System.Collections.Generic;
using CurrentDesk.DAL;
using CurrentDesk.Models;

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template at 14/5/2013 12:32:02 PM
//	   and this file should not get overridden 
//
//     Add your own data access methods.
// </auto-generated>
//------------------------------------------------------------------------------ 
	
namespace CurrentDesk.Repository.CurrentDesk
{   
	public class TransferActivityBO
	{
		// Add your own data access methods here.  If you wish to
		// expose your public method to a WCF service, marked them with
		// the attribute [NCPublish], and another T4 template will generate your service contract

        /// <summary>
        /// This method inserts transfer activity details in db
        /// </summary>
        /// <param name="pkUsrActivityID">pkUsrActivityID</param>
        /// <param name="currID">currID</param>
        /// <param name="amount">amount</param>
        /// <param name="fromAcc">fromAcc</param>
        /// <param name="toAcc">toAcc</param>
        /// <param name="status">status</param>
        public void InsertTransferActivityDetails(int pkUsrActivityID, int currID, double amount, string fromAcc, string toAcc, string status)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var transferActRepo =
                        new TransferActivityRepository(new EFRepository<TransferActivity>(), unitOfWork);

                    TransferActivity newTransferAct = new TransferActivity();
                    newTransferAct.FK_UserActivityID = pkUsrActivityID;
                    newTransferAct.FK_CurrencyID = currID;
                    newTransferAct.TransferAmount = Convert.ToDecimal(amount);
                    newTransferAct.FromAccount = fromAcc;
                    newTransferAct.ToAccount = toAcc;
                    newTransferAct.TransferStatus = status;

                    transferActRepo.Add(newTransferAct);
                    transferActRepo.Save();
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method inserts inter client transfer activity details in db
        /// </summary>
        /// <param name="pkUsrActivityId">pkUsrActivityId</param>
        /// <param name="fromUserId">fromUserId</param>
        /// <param name="toUserId">toUserId</param>
        /// <param name="currId">currId</param>
        /// <param name="amount">amount</param>
        /// <param name="fromAcc">fromAcc</param>
        /// <param name="toAcc">toAcc</param>
        /// <param name="status">status</param>
        public void InsertInterClientTransferActivityDetails(int pkUsrActivityId, int? fromUserId, int? toUserId, int currId, double amount, string fromAcc, string toAcc, string status)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var transferActRepo =
                        new TransferActivityRepository(new EFRepository<TransferActivity>(), unitOfWork);

                    var newTransferAct = new TransferActivity();
                    newTransferAct.FK_UserActivityID = pkUsrActivityId;
                    newTransferAct.FK_CurrencyID = currId;
                    newTransferAct.TransferAmount = Convert.ToDecimal(amount);
                    newTransferAct.FromAccount = fromAcc;
                    newTransferAct.ToAccount = toAcc;
                    newTransferAct.FK_ToUserID = toUserId;
                    newTransferAct.FK_FromUserID = fromUserId;
                    newTransferAct.TransferStatus = status;

                    transferActRepo.Add(newTransferAct);
                    transferActRepo.Save();
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }
	}
}