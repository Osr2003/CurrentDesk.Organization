/* **************************************************************
* File Name     :- L_CountryBO.cs
* Author        :- Mukesh Nayak
* Copyright     :- Mindfire Solutions 
* Date          :- 25thd Dec 2012
* Modified Date :- 2nd Jan 2013
* Description   :- This file with all the buisness logic Related to L_Country
****************************************************************/


#region Namespace Defined
using System;
using System.Linq;
using System.Collections.Generic;
using CurrentDesk.Models;
using System.Data.Objects;
using CurrentDesk.DAL;
using CurrentDesk.Repository.Utility;
#endregion

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template at 12/25/2012 2:56:23 PM
//	   and this file should not get overridden 
//
//     Add your own data access methods.
// </auto-generated>
//------------------------------------------------------------------------------ 
	
namespace CurrentDesk.Repository.CurrentDesk
{   
    /// <summary>
    /// Buisness Object For Look Up Table Country
    /// </summary>
	public class L_CountryBO
	{
        /// <summary>
        /// This Function Will return all the Countries
        /// </summary>
        /// <returns></returns>
        public List<L_Country> GetCountries()
        {
            try
            {
                var countryKey = CacheKey.CDS_COUNTRIES;
                var countryList = new List<L_Country>();

                if (StaticCache.Exist(countryKey))
                {
                    countryList = (List<L_Country>)StaticCache.Get(countryKey);                    
                }
                else
                {
                    using (var unitOfWork = new EFUnitOfWork())
                    {
                        var lCountryRepo =
                            new L_CountryRepository(new EFRepository<L_Country>(), unitOfWork);

                        //Returning List Of Demo Lead
                        countryList = lCountryRepo.All().ToList();

                        //Store it into the cache
                        StaticCache.Max(countryKey, countryList);
                    }
                }

                return countryList;
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This Function Will Return Country Name 
        /// depending upon the selected Country ID
        /// </summary>
        /// <param name="countryID">Country ID</param>
        /// <returns>String Country Name</returns>
        public string GetSelectedCountry(int countryID)
        {
            try
            {
                var selectedCountry =  GetCountries().Where(cntry => cntry.PK_CountryID == countryID).Select(cntry=>cntry.CountryName).FirstOrDefault();
                return selectedCountry;

                //var countryDict = new Dictionary<int, string>();
                //var countryKey = CacheKey.CDS_COUNTRY;

                ////Check Whether Data Exists in Cache Or Not.
                //if (StaticCache.Exist(countryKey))
                //{
                //    countryDict = (Dictionary<int, string>)StaticCache.Get(countryKey);
                //}
                //else
                //{
                //    //Loop through the data in the table and add it to list.
                //    foreach (L_Country cntry in GetCountries())
                //    {
                //        countryDict[cntry.PK_CountryID] = cntry.CountryName;
                //    }

                //    //Add Data To The Cache.
                //    if (countryDict.Count > 0)
                //    {
                //        StaticCache.Max(countryKey, countryDict);
                //    }
                //}

                ////This Will return key depending Upon Description
                //if (countryDict.ContainsKey(countryID))
                //{
                //    return countryDict[countryID];
                //}
                //else
                //{
                //    return null;
                //}
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

		
	}
}