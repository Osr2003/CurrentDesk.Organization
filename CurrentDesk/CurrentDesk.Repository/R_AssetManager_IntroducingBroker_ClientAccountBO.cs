using System;
using System.Linq;
using System.Collections.Generic;
using CurrentDesk.Models;
using CurrentDesk.DAL;
using CurrentDesk.Common;
using System.Data.Objects;

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template at 1/2/2013 5:37:12 PM
//	   and this file should not get overridden 
//
//     Add your own data access methods.
// </auto-generated>
//------------------------------------------------------------------------------ 

namespace CurrentDesk.Repository.CurrentDesk
{
    public class R_AssetManager_IntroducingBroker_ClientAccountBO
    {
        // Add your own data access methods here.  If you wish to
        // expose your public method to a WCF service, marked them with
        // the attribute [NCPublish], and another T4 template will generate your service contract

        /// <summary>
        /// Get List of AssetManager
        /// </summary>
        /// <returns></returns>
        public List<R_AssetManager_IntroducingBroker_ClientAccount> GetAllAssetManager()
        {
            List<R_AssetManager_IntroducingBroker_ClientAccount> lstAm = new List<R_AssetManager_IntroducingBroker_ClientAccount>();

            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var assetRepo = new R_AssetManager_IntroducingBroker_ClientAccountRepository(new EFRepository<R_AssetManager_IntroducingBroker_ClientAccount>(), unitOfWork);

                    ObjectSet<R_AssetManager_IntroducingBroker_ClientAccount> amObj =
          ((CurrentDeskClientsEntities)assetRepo.Repository.UnitOfWork.Context).R_AssetManager_IntroducingBroker_ClientAccount;

                    lstAm = amObj.Where(s => s.IsIntroducingBrokerAssetManger == true).ToList();

                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
            }

            return lstAm;
        }

        /// <summary>
        /// Calculate Asset Manager Fee and Update
        /// </summary>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        public void UpdateAMFee(long? startTime, long? endTime)
        {
            try
            {

                TransactionBO transactionBO = new TransactionBO();
                TransferLogBO transferLogBO = new TransferLogBO();

                using (var unitOfWork = new EFUnitOfWork())
                {

                    var context = (CurrentDeskClientsEntities)unitOfWork.Context;

                    //Get List of asset manager
                    var lstAM = context.R_AssetManager_IntroducingBroker_ClientAccount.Where(s => s.IsIntroducingBrokerAssetManger == true).ToList();


                    //Get all slave of asset managers
                    var lstSlaveAccounts = context.R_AssetManager_IntroducingBroker_ClientAccount.Where(s => s.IsIntroducingBrokerAssetManger == null || s.IsIntroducingBrokerAssetManger == false).ToList();


                    //Get equity of Slave
                    var lstSlaveEquity = (from c in context.Client_Account
                                          join ram in context.R_AssetManager_IntroducingBroker_ClientAccount
                                          on c.PK_ClientAccountID equals ram.FK_ClientAccountID
                                          select new { ClientAccountID = c.PK_ClientAccountID, Equity = c.Equity }).ToList();


                    //Get All managed programs for asset mangers
                    var lstManagedPrograms = (from mp in context.ManagedAccountPrograms
                                              where mp.IsEnabled == true
                                              select new
                                              {

                                                  mp.FK_UserID,

                                                  mp.ManagementFee,
                                                  mp.ManagementFeePeriod,

                                                  mp.PerformanceFee,
                                                  mp.PerformanceFeePeriod

                                              }).ToList();

                    foreach (var aManager in lstAM)
                    {
                        var userID = aManager.IntroducingBroker.FK_UserID;
                        double commiosionValue = GetCommisionValue(userID);

                        //Get RebateAccount
                        string rebateAccount;
                        int currencyId;
                        GetRebateAccount(aManager.FK_IBID, out rebateAccount, out currencyId);

                        //Get all slave up a asset manager and calculate ManagementFee
                        var lstSlave = lstSlaveAccounts.Where(u => u.FK_IBID == aManager.FK_IBID).ToList();
                        foreach (var slave in lstSlaveAccounts)
                        {
                            string slaveTradingAccount;
                            int slaveCurrencyId;
                            GetTradingAccount(slave.FK_ClientAccountID, out slaveTradingAccount, out slaveCurrencyId);


                            int transactionId = transactionBO.InternalFundTransfer(slaveTradingAccount, rebateAccount, slaveCurrencyId, currencyId, commiosionValue, 0, "#from" + slaveTradingAccount);

                            transferLogBO.AddTransferLogForTransaction(transactionId, slaveTradingAccount, rebateAccount, slaveCurrencyId, currencyId, commiosionValue, 0);

                            decimal hmw = slave.HMW ?? 0;

                            //No Of Period slave connected to AM
                            int partPeriodConnected = 0;
                            int partPeriodDisconnected = 0;
                            if (slave.JoinDate != null)
                            {

                                //If slave is disconnected from Slave
                                if (slave.LeaveDate != null)
                                {
                                    partPeriodDisconnected = (12 * (slave.LeaveDate.Value.Year - slave.JoinDate.Value.Year)) + (slave.LeaveDate.Value.Month - slave.JoinDate.Value.Month);
                                }

                                if (partPeriodDisconnected <= 0)
                                {
                                    partPeriodConnected = (12 * (DateTime.Now.Year - slave.JoinDate.Value.Year)) + (DateTime.Now.Month - slave.JoinDate.Value.Month);
                                }
                            }

                            //Comission
                            var tradedVolume = context.GetTradeVolumeForAM(aManager.FK_IBID, startTime, endTime).FirstOrDefault();
                            aManager.Comission = commiosionValue * tradedVolume;
                            decimal commision = Convert.ToDecimal(commiosionValue) * Convert.ToDecimal(tradedVolume);


                            /***************************************************************************************************
                              Since ManagedAccountPrograms is not connected to Slave, we are taking first ManagedProgram for NOW
                             ***************************************************************************************************/
                            var getConnectedManagedProgram = lstManagedPrograms.Where(u => u.FK_UserID == userID).FirstOrDefault();

                            decimal fee = 0.0m;
                            #region "Managed Fee Rate Calculation"
                            if (getConnectedManagedProgram.ManagementFeePeriod == (int)Periods.Annualy)
                            {
                                fee = getConnectedManagedProgram.ManagementFee.DecimalTryParse();
                            }
                            if (getConnectedManagedProgram.ManagementFeePeriod == (int)Periods.Quaterly)
                            {
                                fee = getConnectedManagedProgram.ManagementFee.DecimalTryParse() / 4;
                            }
                            if (getConnectedManagedProgram.ManagementFeePeriod == (int)Periods.Monthly)
                            {
                                fee = getConnectedManagedProgram.ManagementFee.DecimalTryParse() / 12;
                            }
                            #endregion

                            decimal performanceFee = 0.0m;
                            #region "Performance fee"

                            if (getConnectedManagedProgram.PerformanceFeePeriod == (int)Periods.Annualy)
                            {
                                performanceFee = getConnectedManagedProgram.PerformanceFee.DecimalTryParse();
                            }
                            if (getConnectedManagedProgram.PerformanceFeePeriod == (int)Periods.Quaterly)
                            {
                                performanceFee = getConnectedManagedProgram.PerformanceFee.DecimalTryParse() / 4;
                            }
                            if (getConnectedManagedProgram.PerformanceFeePeriod == (int)Periods.Monthly)
                            {
                                performanceFee = getConnectedManagedProgram.PerformanceFee.DecimalTryParse() / 12;
                            }

                            #endregion


                            decimal equityOfSlave = lstSlaveEquity.Where(s => s.ClientAccountID == slave.FK_ClientAccountID).Select(s => s.Equity ?? 0.0m).FirstOrDefault();

                            var mgrFee = fee * (equityOfSlave * partPeriodConnected);

                            slave.ManagementFee = mgrFee.DoubleTryParse();

                            //EOP_equity_slave_i_month_k = EOP_equity_slave_i_month_k – MGMT_fee - commissions
                            decimal eopEquityOfSlave = equityOfSlave - mgrFee - commision;

                            //If EOP_equity <= HMW then there is no performance fee earned
                            decimal performanceFeeForSlave = 0;
                            if (eopEquityOfSlave > hmw)
                            {
                                performanceFeeForSlave = (eopEquityOfSlave - hmw) * performanceFee;
                                slave.PerformanceFee = Convert.ToDouble(performanceFeeForSlave);
                            }

                            if (equityOfSlave > hmw)
                            {
                                slave.HMW = equityOfSlave;
                            }


                        }


                    }

                    context.SaveChanges();
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
            }

        }

        /// <summary>
        /// Get Commission value for user id
        /// </summary>
        /// <param name="userId"></param>
        /// <returns></returns>
        public double GetCommisionValue(int? userId)
        {

            var commision = 0.0D;

            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {

                    var context = (CurrentDeskClientsEntities)unitOfWork.Context;

                    var commsionInc = (from pc in context.PartnerCommissions
                                       join lc in context.L_CommissionIncrementValue
                                           on pc.FK_CommissionID equals lc.PK_CommissionIncrementID
                                       where pc.FK_UserID == userId && pc.IsDefault == true
                                       select new
                                       {
                                           Commision = pc.CommissionValue,
                                           CommissionIncrementValue = lc.CommissionIncrementValue
                                       }).FirstOrDefault();

                    if (commsionInc != null)
                    {

                        commision = commsionInc.Commision ?? commsionInc.CommissionIncrementValue.DoubleTryParse();

                    }

                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
            }

            return commision;
        }

        /// <summary>
        /// Get List of management fee for connected slaves of a Asset Manager
        /// </summary>
        /// <param name="userId"></param>
        /// <param name="feeGroupId"></param>
        /// <param name="period"></param>
        /// <param name="rate"></param>
        public void GetManagementFeeDetails()
        {
            try
            {
                //using (var unitOfWork = new EFUnitOfWork())
                //{
                //    var context = (CurrentDeskClientsEntities)unitOfWork.Context;

                //    var manageFee = (from mp in context.ManagedAccountPrograms
                //                     where mp.FK_UserID == userId && mp.FK_FeeGroupID == feeGroupId && mp.IsEnabled == true
                //                     select new { mp.ManagementFee, mp.ManagementFeePeriod }).ToList();


                //}
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
            }
        }

        /// <summary>
        /// Get Rebate AccountID
        /// </summary>
        /// <param name="ibId"></param>
        /// <param name="rebateAccount"></param>
        /// <param name="currencyId"></param>
        public void GetRebateAccount(int? ibId, out string rebateAccount, out int currencyId)
        {

            string tAccount = string.Empty;
            int cId = 0;

            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var context = (CurrentDeskClientsEntities)unitOfWork.Context;

                    var clientAccount = (from ca in context.Client_Account
                                         where ca.FK_IntroducingBrokerID == ibId && ca.IsLandingAccount == false && ca.IsTradingAccount == false
                                         select new { ca.TradingAccount, FK_CurrencyID = ca.FK_CurrencyID ?? 0 }
                          ).FirstOrDefault();

                    tAccount = clientAccount.TradingAccount;
                    cId = clientAccount.FK_CurrencyID;
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
            }

            rebateAccount = tAccount;
            currencyId = cId;

        }

        /// <summary>
        /// Get Trading Account
        /// </summary>
        /// <param name="clientAccountId"></param>
        /// <param name="tradingAccount"></param>
        /// <param name="currencyId"></param>
        public void GetTradingAccount(int? clientAccountId, out string tradingAccount, out int currencyId)
        {

            string tAccount = string.Empty;
            int cid = 0;

            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var context = (CurrentDeskClientsEntities)unitOfWork.Context;

                    var clientAccount = (from ca in context.Client_Account
                                         where ca.PK_ClientAccountID == clientAccountId
                                         select new { ca.TradingAccount, ca.FK_CurrencyID }
                        ).FirstOrDefault();

                    tAccount = clientAccount.TradingAccount;
                    cid = clientAccount.FK_CurrencyID ?? 0;
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
            }

            tradingAccount = tAccount;
            currencyId = cid;
        }

        /// <summary>
        /// Get List of AssetManager
        /// With Client Detail
        /// </summary>
        /// <returns>List of R_AssetManager_IntroducingBroker_ClientAccount </returns>
        public List<R_AssetManager_IntroducingBroker_ClientAccount> GetAllBOAssetManager()
        {
            List<R_AssetManager_IntroducingBroker_ClientAccount> assetManagerList = new List<R_AssetManager_IntroducingBroker_ClientAccount>();

            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var assetRepo = new R_AssetManager_IntroducingBroker_ClientAccountRepository(new EFRepository<R_AssetManager_IntroducingBroker_ClientAccount>(), unitOfWork);

                    ObjectSet<R_AssetManager_IntroducingBroker_ClientAccount> assetManagerObj =
                    ((CurrentDeskClientsEntities)assetRepo.Repository.UnitOfWork.Context).R_AssetManager_IntroducingBroker_ClientAccount;
                    var res = assetManagerList = assetManagerObj.Include("IntroducingBroker").
                                       Include("IntroducingBroker.Client_Account").
                                       Where(x => x.IntroducingBroker.IsBOMAM == true).ToList();

                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
            }

            return assetManagerList;
        }
    }
}