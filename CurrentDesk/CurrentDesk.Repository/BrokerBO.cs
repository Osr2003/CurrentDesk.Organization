using System;
using System.Linq;
using System.Collections.Generic;
using CurrentDesk.DAL;
using CurrentDesk.Models;

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template at 7/9/2013 6:31:43 PM
//	   and this file should not get overridden 
//
//     Add your own data access methods.
// </auto-generated>
//------------------------------------------------------------------------------ 
	
namespace CurrentDesk.Repository.CurrentDesk
{   
	public class BrokerBO
	{
		// Add your own data access methods here.  If you wish to
		// expose your public method to a WCF service, marked them with
		// the attribute [NCPublish], and another T4 template will generate your service contract

        /// <summary>
        /// BBook Revenue for BBook client
        /// </summary>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        public void BBookRevenue(long startDate, long endDate)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var context = (CurrentDeskClientsEntities)unitOfWork.Context;

                    //Get AllBBook Account
                    var lstClinetAc = (from ca in context.Client_Account
                                       //where ca.IsBBook == true
                                       select new
                                       {
                                           ClientId = ca.FK_ClientID,
                                           CurrencyId = ca.FK_CurrencyID,
                                           PlatFormLogin = ca.PlatformLogin
                                       }).ToList();




                    foreach (var client in lstClinetAc)
                    {


                        var pnlOpenTrades = (from t in context.Trades
                                             where t.Login == client.PlatFormLogin && t.OpenTime >= startDate && t.OpenTime < endDate
                                             group t by t.Login into pnl
                                             select new
                                             {
                                                 Sum = pnl.Sum(t => t.Profit)
                                             }).FirstOrDefault();

                        var pnlCloseTrades = (from t in context.TradesHistories
                                              where t.Login == client.PlatFormLogin && t.OpenTime >= startDate && t.OpenTime < endDate
                                              group t by t.Login into pnl
                                              select new
                                              {
                                                  Sum = pnl.Sum(t => t.Profit)
                                              }).FirstOrDefault();


                        Broker broker = new Broker();

                        broker.ClientId = client.ClientId;
                        broker.BBookOpenTradePnl = Convert.ToDecimal(pnlOpenTrades.Sum.GetValueOrDefault());
                        broker.BBookCloseTradePnl = Convert.ToDecimal(pnlCloseTrades.Sum.GetValueOrDefault());
                        broker.CurrencyType = client.CurrencyId;
                        broker.Date = DateTime.Now;

                        context.Brokers.AddObject(broker);
                    }

                    context.SaveChanges();
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
            }
        }
	}
}