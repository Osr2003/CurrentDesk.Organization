using System;
using System.Linq;
using System.Collections.Generic;
using CurrentDesk.DAL;
using CurrentDesk.Models;
using CurrentDesk.Common;
using System.Data.Objects;

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template at 13/2/2013 12:00:18 PM
//	   and this file should not get overridden 
//
//     Add your own data access methods.
// </auto-generated>
//------------------------------------------------------------------------------ 
	
namespace CurrentDesk.Repository.CurrentDesk
{   
	public class UserBO
	{
		// Add your own data access methods here.  If you wish to
		// expose your public method to a WCF service, marked them with
		// the attribute [NCPublish], and another T4 template will generate your service contract

        /// <summary>
        /// This function will insert new user into Users table
        /// </summary>
        /// <returns></returns>
        public void AddNewUser(User newUser)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var userRepo =
                        new UserRepository(new EFRepository<User>(), unitOfWork);

                    userRepo.Add(newUser);
                    userRepo.Save();
                }
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method validates user during login
        /// </summary>
        /// <param name="userName">userName</param>
        /// <param name="password">password</param>
        /// <param name="userID">userID</param>
        /// <param name="userType">userType</param>
        /// <param name="accountType">accountType</param>
        /// <param name="userDisplayName">userDisplayName</param>
        /// <returns></returns>
        public bool ValidateUser(string userName, string password, ref int userID, ref int userType, ref int accountType, ref int accountCode, ref string userDisplayName, ref int organizationID)
        {
             var currentDeskSecurity = new CurrentDeskSecurity();
             try
             {
                 using (var unitOfWork = new EFUnitOfWork())
                 {
                     var userRepo =
                      new UserRepository(new EFRepository<User>(), unitOfWork);

                     ObjectSet<User> userObjSet =
                     ((CurrentDeskClientsEntities)userRepo.Repository.UnitOfWork.Context).Users;

                     //Get The Selected client and assign its Properties.
                     var selectedUsers =
                         userObjSet.Where(usr => usr.UserEmailID == userName).FirstOrDefault();

                     if (selectedUsers != null)
                     {                        
                         if (currentDeskSecurity.GetPassDecrypted(selectedUsers.Password) == password)
                         {
                             userID = selectedUsers.PK_UserID;
                             userType = (int)selectedUsers.FK_UserTypeID;   
                          
                             if (selectedUsers.FK_UserTypeID == Constants.K_BROKER_LIVE)
                             {                                 
                                 var clientBO = new ClientBO();
                                 return clientBO.GetClientAccountInformation(selectedUsers.PK_UserID, ref accountType, ref accountCode, ref userDisplayName, ref organizationID);                                 
                             }
                             else if(selectedUsers.FK_UserTypeID == Constants.K_BROKER_PARTNER)
                             {
                                 var introducingBrokerBO = new IntroducingBrokerBO();
                                 return introducingBrokerBO.GetClientAccountInformation(selectedUsers.PK_UserID, ref accountType, ref accountCode, ref userDisplayName, ref organizationID);
                             }
                             else if (selectedUsers.FK_UserTypeID == Constants.K_BROKER_ADMIN)
                             {
                                 accountCode = Constants.K_ACCTCODE_SUPERADMIN;
                                 organizationID = selectedUsers.FK_OrganizationID;
                                 return true;
                             }
                         }
                     }

                     return false;
                 }
             }
             catch(Exception ex)
             {
                 CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                 throw;
             }
        }

        /// <summary>
        /// This method returns true if passed emailID exists in Users table
        /// </summary>
        /// <param name="emailID">emailID</param>
        /// <returns>bool</returns>
        public bool CheckIfEmailExistsInUser(string emailID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var userRepo =
                          new UserRepository(new EFRepository<User>(), unitOfWork);


                    ObjectSet<User> userObjSet =
                      ((CurrentDeskClientsEntities)userRepo.Repository.UnitOfWork.Context).Users;

                    //Return true if email id exists else false                   
                    return userObjSet.Where(usr => usr.UserEmailID == emailID).FirstOrDefault() != null ? true : false;
                }
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                return true;
            }
        }

        /// <summary>
        /// This method returns true if passed emailID exists in Users table
        /// </summary>
        /// <param name="emailID">emailID</param>
        /// <param name="organizationID">organizationID</param>
        /// <returns>bool</returns>
        public bool CheckIfEmailExistsInUser(string emailID, int organizationID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var userRepo =
                          new UserRepository(new EFRepository<User>(), unitOfWork);


                    ObjectSet<User> userObjSet =
                      ((CurrentDeskClientsEntities)userRepo.Repository.UnitOfWork.Context).Users;

                    //Return true if email id exists else false                   
                    return userObjSet.Where(usr => usr.UserEmailID == emailID && usr.FK_OrganizationID == organizationID).FirstOrDefault() != null ? true : false;
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                return true;
            }
        }

        /// <summary>
        /// This method returns all clients of broker with name and account number
        /// </summary>
        /// <returns></returns>
        public List<BrokerClients> GetAllClientsOfBroker()
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    List<BrokerClients> lstAllClients = new List<BrokerClients>();
                    ClientBO clientBO = new ClientBO();
                    IntroducingBrokerBO introducingBrokerBO = new IntroducingBrokerBO();
                    
                    var userRepo =
                          new UserRepository(new EFRepository<User>(), unitOfWork);

                    ObjectSet<User> userObjSet =
                      ((CurrentDeskClientsEntities)userRepo.Repository.UnitOfWork.Context).Users;

                    //Get all live and partner clients
                    var allClients = userObjSet.Where(usr => usr.FK_UserTypeID == Constants.K_BROKER_LIVE || usr.FK_UserTypeID == Constants.K_BROKER_PARTNER).ToList();

                    //Get live and partner clients names with a/c numbers
                    var liveClients = clientBO.GetClientNames(allClients);
                    var partnerClients = introducingBrokerBO.GetPartnerNames(allClients);
                    
                    //Merger both and add to list
                    lstAllClients.AddRange(liveClients);
                    lstAllClients.AddRange(partnerClients);

                    //Return list of clients
                    return lstAllClients;
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method returns all clients of broker with name and account number
        /// </summary>
        /// <param name="organizationID">organizationID</param>
        /// <returns></returns>
        public List<BrokerClients> GetAllClientsOfBroker(int organizationID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    List<BrokerClients> lstAllClients = new List<BrokerClients>();
                    ClientBO clientBO = new ClientBO();
                    IntroducingBrokerBO introducingBrokerBO = new IntroducingBrokerBO();

                    var userRepo =
                          new UserRepository(new EFRepository<User>(), unitOfWork);

                    ObjectSet<User> userObjSet =
                      ((CurrentDeskClientsEntities)userRepo.Repository.UnitOfWork.Context).Users;

                    //Get all live and partner clients
                    var allClients = userObjSet.Where(usr => usr.FK_OrganizationID == organizationID && (usr.FK_UserTypeID == Constants.K_BROKER_LIVE || usr.FK_UserTypeID == Constants.K_BROKER_PARTNER)).ToList();

                    //Get live and partner clients names with a/c numbers
                    var liveClients = clientBO.GetClientNames(allClients);
                    var partnerClients = introducingBrokerBO.GetPartnerNames(allClients);

                    //Merger both and add to list
                    lstAllClients.AddRange(liveClients);
                    lstAllClients.AddRange(partnerClients);

                    //Return list of clients
                    return lstAllClients;
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method returns user details based on userID
        /// </summary>
        /// <param name="userID">userID</param>
        /// <returns></returns>
        public User GetUserDetails(int userID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var userRepo =
                          new UserRepository(new EFRepository<User>(), unitOfWork);

                    ObjectSet<User> userObjSet =
                      ((CurrentDeskClientsEntities)userRepo.Repository.UnitOfWork.Context).Users;

                    return userObjSet.Include("Clients").Where(usr => usr.PK_UserID == userID).FirstOrDefault();
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }
	}

    public class BrokerClients
    {
        public int UserID { get; set; }
        public string DisplayName { get; set; }
    }
}