/* **************************************************************
* File Name     :- DemoLeadBO.cs
* Author        :- Mukesh Nayak
* Copyright     :- Mindfire Solutions 
* Date          :- 25thd Dec 2012
* Modified Date :- 2nd Jan 2013
* Description   :- This file with all the buisness logic Related to DemoLead.
****************************************************************/

#region Namespace
using System.Collections.Generic;
using System.Data.Objects;
using System.Linq;
using CurrentDesk.DAL;
using CurrentDesk.Models;
using System;
#endregion

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template at 12/25/2012 2:56:23 PM
//	   and this file should not get overridden 
//
//     Add your own data access methods.
// </auto-generated>
//------------------------------------------------------------------------------ 
	
namespace CurrentDesk.Repository.CurrentDesk
{   
    /// <summary>
    /// Buisness Object For Demo Lead
    /// </summary>
	public class DemoLeadBO
    {
        #region Method
        /// <summary>
        /// This Function Will add new demolead to database
        /// </summary>
        /// <param name="demoLead">demoLead</param>
        /// <returns>bool depending upon result</returns>
        public bool AddNewDemoLead(DemoLead demoLead)
        {            
            try
            {                
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var  demoLeadRepo =
                        new DemoLeadRepository(new EFRepository<DemoLead>(), unitOfWork);

                    demoLeadRepo.Add(demoLead);
                    demoLeadRepo.Save();

                    return true;
                }
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This function will edit Demo Lead 
        /// </summary>
        /// <param name="demoLead">demoLead</param>
        /// <returns>bool depending upon result</returns>
        public bool EditDemoLead(DemoLead demoLead)
        {
            try
            {                
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var demoLeadRepo =
                        new DemoLeadRepository(new EFRepository<DemoLead>(), unitOfWork);

                    ObjectSet<DemoLead> demoLeadObjSet =
                        ((CurrentDeskClientsEntities)demoLeadRepo.Repository.UnitOfWork.Context).DemoLeads;

                    //Get The Selected tunning and assign its Properties.
                    var selectedDemoLead =
                        demoLeadObjSet.Where(demol => demol.PK_LeadID.Equals(demoLead.PK_LeadID)).FirstOrDefault();

                    //Will Add All The Attributes
                    selectedDemoLead.Password = demoLead.Password;
                    selectedDemoLead.PhoneNo = demoLead.PhoneNo;

                    demoLeadRepo.Save();

                    return true;
                }
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This Function Will return all the demo Leads
        /// </summary>
        /// <returns></returns>
        public List<DemoLead> GetDemoLeads()
        {
            try
            {
               
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var demoLeadRepo =
                        new DemoLeadRepository(new EFRepository<DemoLead>(), unitOfWork);

                    //Returning List Of Demo Lead
                    return demoLeadRepo.All().ToList();
                    
                }
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This Function will get the selected demolead
        /// </summary>
        /// <param name="demoLeadID"></param>
        /// <returns></returns>
        public DemoLead GetSelectedDemoLead(int demoLeadID)
        {
            try
            {                
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var demoLeadRepo =
                        new DemoLeadRepository(new EFRepository<DemoLead>(), unitOfWork);

                    ObjectSet<DemoLead> demoLeadObjSet =
                        ((CurrentDeskClientsEntities)demoLeadRepo.Repository.UnitOfWork.Context).DemoLeads;

                    return demoLeadObjSet.Where(dl => dl.PK_LeadID.Equals(demoLeadID)).FirstOrDefault();
                }
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This Function Will delete DemoLead
        /// </summary>
        /// <param name="demoLeadID">demoLeadID</param>
        /// <returns>return boolean</returns>
        public bool DeleteDemoLead( int demoLeadID)
        {
            try
            {                
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var demoLeadRepo =
                        new DemoLeadRepository(new EFRepository<DemoLead>(), unitOfWork);

                    ObjectSet<DemoLead> demoLeadObjSet =
                       ((CurrentDeskClientsEntities)demoLeadRepo.Repository.UnitOfWork.Context).DemoLeads;

                    //Get The Selected tunning and assign its Properties.
                    var selectedDemoLead =
                        demoLeadObjSet.Where(demol => demol.PK_LeadID.Equals(demoLeadID)).FirstOrDefault();

                    demoLeadRepo.Delete(selectedDemoLead);
                    demoLeadRepo.Save();

                    return true;
                }
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method returns true if passed emailID exists in DemoLead table
        /// </summary>
        /// <param name="emailID">emailID</param>
        /// <returns>bool</returns>
        public bool CheckIfEmailExistsInDemoLead(string emailID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var demoLeadRepo =
                          new DemoLeadRepository(new EFRepository<DemoLead>(), unitOfWork);


                    ObjectSet<DemoLead> demoLeadObjSet =
                      ((CurrentDeskClientsEntities)demoLeadRepo.Repository.UnitOfWork.Context).DemoLeads;

                    //Return true if email id exists else false                   
                    return demoLeadObjSet.Where(lead => lead.EmailAddress == emailID).FirstOrDefault() != null ? true : false;
                }
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                return true;
            }
        }

        #endregion

    }
}