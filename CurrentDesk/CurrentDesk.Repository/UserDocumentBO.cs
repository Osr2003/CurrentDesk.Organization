using System;
using System.Linq;
using System.Collections.Generic;
using CurrentDesk.DAL;
using CurrentDesk.Models;
using System.Data.Objects;

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template at 5/4/2013 3:40:41 PM
//	   and this file should not get overridden 
//
//     Add your own data access methods.
// </auto-generated>
//------------------------------------------------------------------------------ 
	
namespace CurrentDesk.Repository.CurrentDesk
{   
	public class UserDocumentBO
	{
		// Add your own data access methods here.  If you wish to
		// expose your public method to a WCF service, marked them with
		// the attribute [NCPublish], and another T4 template will generate your service contract

        /// <summary>
        /// This method returns user document details
        /// </summary>
        /// <param name="userID">userID</param>
        /// <param name="docID">docID</param>
        /// <returns></returns>
        public UserDocument GetUserDocumentDetails(int userID, int docID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var userDocRepo =
                        new UserDocumentRepository(new EFRepository<UserDocument>(), unitOfWork);

                    ObjectSet<UserDocument> userDocObjSet =
                     ((CurrentDeskClientsEntities)userDocRepo.Repository.UnitOfWork.Context).UserDocuments;

                    return userDocObjSet.Include("Document").Where(doc => doc.FK_UserID == userID && doc.FK_DocumentID == docID && doc.IsDeleted == false).FirstOrDefault();
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// Function to make entry in database for uploaded document
        /// </summary>
        /// <param name="userID">userID</param>
        /// <param name="docID">docID</param>
        /// <param name="docName">docName</param>
        /// <returns></returns>
        public bool UploadDocument(int userID, int docID, string docName)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var userDocRepo =
                        new UserDocumentRepository(new EFRepository<UserDocument>(), unitOfWork);

                    UserDocument doc = new UserDocument();
                    doc.UserDocumentName = docName;
                    doc.FK_DocumentID = docID;
                    doc.Status = "Pending";
                    doc.FK_UserID = userID;
                    doc.IsDeleted = false;

                    userDocRepo.Add(doc);
                    userDocRepo.Save();

                    return true;
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                return false;
            }
        }

        /// <summary>
        /// This method returns name of document file to be downloaded
        /// </summary>
        /// <param name="userID">userID</param>
        /// <param name="docID">docID</param>
        /// <returns></returns>
        public string GetUploadedDocumentName(int userID, int docID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var userDocRepo =
                        new UserDocumentRepository(new EFRepository<UserDocument>(), unitOfWork);

                    ObjectSet<UserDocument> userDocObjSet =
                     ((CurrentDeskClientsEntities)userDocRepo.Repository.UnitOfWork.Context).UserDocuments;

                    var userDoc = userDocObjSet.Where(doc => doc.FK_UserID == userID && doc.FK_DocumentID == docID && doc.IsDeleted == false).FirstOrDefault();

                    return userDoc != null ? userDoc.UserDocumentName : String.Empty;
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method deletes user document by setting IsDeleted column to true
        /// </summary>
        /// <param name="userID">userID</param>
        /// <param name="docID">docID</param>
        /// <returns></returns>
        public string ClearUserDocument(int userID, int docID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var userDocRepo =
                        new UserDocumentRepository(new EFRepository<UserDocument>(), unitOfWork);

                    ObjectSet<UserDocument> userDocObjSet =
                     ((CurrentDeskClientsEntities)userDocRepo.Repository.UnitOfWork.Context).UserDocuments;

                    var userDoc = userDocObjSet.Where(doc => doc.FK_UserID == userID && doc.FK_DocumentID == docID && doc.IsDeleted == false).FirstOrDefault();

                    if (userDoc != null)
                    {
                        userDoc.IsDeleted = true;
                        userDocRepo.Save();
                        return userDoc.UserDocumentName;
                    }

                    return String.Empty;
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method returns all documents entry of user
        /// </summary>
        /// <param name="userID">userID</param>
        /// <returns></returns>
        public List<UserDocument> GetAllUserDocuments(int userID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var userDocRepo =
                        new UserDocumentRepository(new EFRepository<UserDocument>(), unitOfWork);

                    ObjectSet<UserDocument> userDocObjSet =
                     ((CurrentDeskClientsEntities)userDocRepo.Repository.UnitOfWork.Context).UserDocuments;

                    return userDocObjSet.Where(doc => doc.FK_UserID == userID && doc.IsDeleted == false).ToList();
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }
	}
}