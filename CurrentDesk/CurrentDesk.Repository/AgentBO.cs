using System;
using System.Linq;
using System.Collections.Generic;
using CurrentDesk.Models;
using System.Data.Objects;
using CurrentDesk.DAL;

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template at 1/2/2013 5:37:12 PM
//	   and this file should not get overridden 
//
//     Add your own data access methods.
// </auto-generated>
//------------------------------------------------------------------------------ 
	
namespace CurrentDesk.Repository.CurrentDesk
{   
	public class AgentBO
	{
		// Add your own data access methods here.  If you wish to
		// expose your public method to a WCF service, marked them with
		// the attribute [NCPublish], and another T4 template will generate your service contract

        /// <summary>
        /// This method adds new agent information
        /// </summary>
        /// <param name="newAgent">newAgent</param>
        /// <param name="introducingBrokerUserID">introducingBrokerUserID</param>
        /// <returns></returns>
        public bool AddNewAgent(Agent newAgent, int introducingBrokerUserID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var agentRepo =
                        new AgentRepository(new EFRepository<Agent>(), unitOfWork);

                    ObjectSet<Agent> agentObjSet =
                        ((CurrentDeskClientsEntities)agentRepo.Repository.UnitOfWork.Context).Agents;

                    //Get number of agents under this IB
                    var highestAgent = agentObjSet.Where(agnt => agnt.FK_IntroducingBrokerUserID == introducingBrokerUserID).OrderByDescending(agnt => agnt.AgentIntroducingBrokerCode).FirstOrDefault();
                    
                    //If IB has agents
                    if (highestAgent != null)
                    {
                        newAgent.AgentIntroducingBrokerCode = highestAgent.AgentIntroducingBrokerCode + 1;
                    }
                    //If no agents under this IB
                    else
                    {
                        newAgent.AgentIntroducingBrokerCode = 1;
                    }

                    newAgent.FK_IntroducingBrokerUserID = introducingBrokerUserID;
                    newAgent.IsActive = true;
                    
                    agentRepo.Add(newAgent);
                    agentRepo.Save();

                    return true;
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                return false;
            }
        }

        /// <summary>
        /// This method returns all agents under a particular IB
        /// </summary>
        /// <param name="introducingBrokerUserID">introducingBrokerUserID</param>
        /// <returns></returns>
        public List<Agent> GetAllAgentsOfIB(int introducingBrokerUserID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var agentRepo =
                        new AgentRepository(new EFRepository<Agent>(), unitOfWork);

                    ObjectSet<Agent> agentObjSet =
                        ((CurrentDeskClientsEntities)agentRepo.Repository.UnitOfWork.Context).Agents;

                    return agentObjSet.Where(agnt => agnt.FK_IntroducingBrokerUserID == introducingBrokerUserID).ToList();
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method returns agent details
        /// </summary>
        /// <param name="agentID">agentID</param>
        /// <param name="introducingBrokerUserID">introducingBrokerUserID</param>
        /// <returns></returns>
        public Agent GetAgentDetails(int agentID, int introducingBrokerUserID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var agentRepo =
                        new AgentRepository(new EFRepository<Agent>(), unitOfWork);

                    ObjectSet<Agent> agentObjSet =
                        ((CurrentDeskClientsEntities)agentRepo.Repository.UnitOfWork.Context).Agents;

                    return agentObjSet.Where(agnt => agnt.AgentIntroducingBrokerCode == agentID && agnt.FK_IntroducingBrokerUserID == introducingBrokerUserID).FirstOrDefault();
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method updates agent referral fees in database
        /// </summary>
        /// <param name="agentID">agentID</param>
        /// <param name="introducingBrokerUserID">introducingBrokerUserID</param>
        /// <param name="performanceFee">performanceFee</param>
        /// <param name="managementFee">managementFee</param>
        /// <param name="rebatePercentage">rebatePercentage</param>
        /// <returns></returns>
        public bool UpdateAgentReferralFees(int agentID, int introducingBrokerUserID, int performanceFee, int managementFee, int rebatePercentage)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var agentRepo =
                        new AgentRepository(new EFRepository<Agent>(), unitOfWork);

                    ObjectSet<Agent> agentObjSet =
                        ((CurrentDeskClientsEntities)agentRepo.Repository.UnitOfWork.Context).Agents;

                    //Get particular agent
                    var agent = agentObjSet.Where(agnt => agnt.FK_IntroducingBrokerUserID == introducingBrokerUserID && agnt.AgentIntroducingBrokerCode == agentID).FirstOrDefault();
                    
                    //Update agent fees
                    if (agent != null)
                    {
                        agent.PerformanceFee = performanceFee;
                        agent.ManagementFee = managementFee;
                        agent.RebatePercentage = rebatePercentage;

                        agentRepo.Save();
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                return false;
            }
        }

        /// <summary>
        /// This method enables an agent of IB
        /// </summary>
        /// <param name="agentID">agentID</param>
        /// <param name="introducingBrokerUserID">introducingBrokerUserID</param>
        /// <returns></returns>
        public bool EnableAgent(int agentID, int introducingBrokerUserID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var agentRepo =
                        new AgentRepository(new EFRepository<Agent>(), unitOfWork);

                    ObjectSet<Agent> agentObjSet =
                        ((CurrentDeskClientsEntities)agentRepo.Repository.UnitOfWork.Context).Agents;

                    //Get the agent
                    var agent = agentObjSet.Where(agnt => agnt.FK_IntroducingBrokerUserID == introducingBrokerUserID && agnt.AgentIntroducingBrokerCode == agentID).FirstOrDefault();

                    //Change active status
                    if (agent != null)
                    {
                        agent.IsActive = true;

                        agentRepo.Save();
                        return true;
                    }
                    return false;
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                return false;
            }
        }

        /// <summary>
        /// This method disables an agent of IB
        /// </summary>
        /// <param name="agentID">agentID</param>
        /// <param name="introducingBrokerUserID">introducingBrokerUserID</param>
        /// <returns></returns>
        public bool DisableAgent(int agentID, int introducingBrokerUserID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var agentRepo =
                        new AgentRepository(new EFRepository<Agent>(), unitOfWork);

                    ObjectSet<Agent> agentObjSet =
                        ((CurrentDeskClientsEntities)agentRepo.Repository.UnitOfWork.Context).Agents;

                    //Get the agent
                    var agent = agentObjSet.Where(agnt => agnt.FK_IntroducingBrokerUserID == introducingBrokerUserID && agnt.AgentIntroducingBrokerCode == agentID).FirstOrDefault();

                    //Change active status
                    if (agent != null)
                    {
                        agent.IsActive = false;

                        agentRepo.Save();
                        return true;
                    }
                    return false;
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                return false;
            }
        }

        /// <summary>
        /// This method returns agentID based on agent code and brokerID
        /// </summary>
        /// <param name="agentID">agentID</param>
        /// <param name="introducingBrokerUserID">introducingBrokerUserID</param>
        /// <returns></returns>
        public int GetAgentIDFromAgentCodeAndIBID(int agentID, int introducingBrokerUserID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var agentRepo =
                        new AgentRepository(new EFRepository<Agent>(), unitOfWork);

                    ObjectSet<Agent> agentObjSet =
                        ((CurrentDeskClientsEntities)agentRepo.Repository.UnitOfWork.Context).Agents;

                    return agentObjSet.Where(agnt => agnt.AgentIntroducingBrokerCode == agentID && agnt.FK_IntroducingBrokerUserID == introducingBrokerUserID).FirstOrDefault().PK_AgentID;
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }
	}
}