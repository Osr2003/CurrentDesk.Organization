using System;
using CurrentDesk.Models;
using System.Collections.Generic;
using System.Data.Objects;
using CurrentDesk.DAL;
using System.Linq;
using CurrentDesk.Common;

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template at 14/6/2013 2:33:47 PM
//	   and this file should not get overridden 
//
//     Add your own data access methods.
// </auto-generated>
//------------------------------------------------------------------------------ 
	
namespace CurrentDesk.Repository.CurrentDesk
{   
	public class AdminTransactionBO
	{
		// Add your own data access methods here.  If you wish to
		// expose your public method to a WCF service, marked them with
		// the attribute [NCPublish], and another T4 template will generate your service contract

        /// <summary>
        /// This method adds new fund account request in AdminTransaction table
        /// </summary>
        /// <param name="newFundRequest">newFundRequest</param>
        /// <returns></returns>
        public bool AddNewAdminTransactionRequest(AdminTransaction newRequest)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var adminTransactionRepo =
                        new AdminTransactionRepository(new EFRepository<AdminTransaction>(), unitOfWork);

                    adminTransactionRepo.Add(newRequest);
                    adminTransactionRepo.Save();
                    return true;
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                return false;
            }
        }

        /// <summary>
        /// This method returns list of all incoming fund transfer request
        /// </summary>
        /// <returns></returns>
        public List<AdminTransaction> GetAllIncomingFundRequests(int organizationID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var adminTransactionRepo =
                        new AdminTransactionRepository(new EFRepository<AdminTransaction>(), unitOfWork);

                    ObjectSet<AdminTransaction> transactionObjSet =
                        ((CurrentDeskClientsEntities)adminTransactionRepo.Repository.UnitOfWork.Context).AdminTransactions;

                    return transactionObjSet.Include("FundingSource").Where(transaction => transaction.FK_AdminTransactionTypeID == (int)AdminTransactionType.IncomingFunds && transaction.FK_OrganizationID == organizationID && transaction.IsApproved == false && transaction.IsDeleted == false).ToList();
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method delete a transaction
        /// </summary>
        /// <param name="transactionID">transactionID</param>
        /// <returns></returns>
        public bool DeleteTransaction(int transactionID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var adminTransactionRepo =
                        new AdminTransactionRepository(new EFRepository<AdminTransaction>(), unitOfWork);

                    ObjectSet<AdminTransaction> transactionObjSet =
                        ((CurrentDeskClientsEntities)adminTransactionRepo.Repository.UnitOfWork.Context).AdminTransactions;

                    //Get particular transaction
                    var transaction = transactionObjSet.Where(tran => tran.PK_TransactionID == transactionID).FirstOrDefault();

                    //Set IsDeleted true and save
                    if (transaction != null)
                    {
                        transaction.IsDeleted = true;
                        adminTransactionRepo.Save();
                        return true;
                    }

                    return false;
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// Return details of a particular transaction
        /// </summary>
        /// <param name="pkTransactionID">pkTransactionID</param>
        /// <returns></returns>
        public AdminTransaction GetTransactionDetails(int pkTransactionID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var adminTransactionRepo =
                        new AdminTransactionRepository(new EFRepository<AdminTransaction>(), unitOfWork);

                    ObjectSet<AdminTransaction> transactionObjSet =
                        ((CurrentDeskClientsEntities)adminTransactionRepo.Repository.UnitOfWork.Context).AdminTransactions;

                    //Return particular transaction
                    return transactionObjSet.Include("FundingSource").Include("BankAccountInformation").Where(tran => tran.PK_TransactionID == pkTransactionID).FirstOrDefault();
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method approves a particular incoming transaction
        /// </summary>
        /// <param name="approveTransaction">approveTransaction</param>
        /// <returns></returns>
        public bool ApproveIncomingTransaction(AdminTransaction approveTransaction)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var adminTransactionRepo =
                        new AdminTransactionRepository(new EFRepository<AdminTransaction>(), unitOfWork);

                    ObjectSet<AdminTransaction> transactionObjSet =
                        ((CurrentDeskClientsEntities)adminTransactionRepo.Repository.UnitOfWork.Context).AdminTransactions;

                    //Get particular transaction
                    var transaction = transactionObjSet.Where(tran => tran.PK_TransactionID == approveTransaction.PK_TransactionID).FirstOrDefault();

                    //Update its fields
                    if (transaction != null)
                    {
                        transaction.TransactionAmount = approveTransaction.TransactionAmount;
                        transaction.FeeAmount = approveTransaction.FeeAmount;
                        transaction.ApprovedDate = DateTime.UtcNow;
                        transaction.Notes = approveTransaction.Notes;
                        transaction.IsApproved = true;

                        adminTransactionRepo.Save();
                        return true;
                    }

                    return false;
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method returns list of all outgoing fund transfer request
        /// </summary>
        /// <returns></returns>
        public List<AdminTransaction> GetAllOutgoingFundRequests(int organizationID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var adminTransactionRepo =
                        new AdminTransactionRepository(new EFRepository<AdminTransaction>(), unitOfWork);

                    ObjectSet<AdminTransaction> transactionObjSet =
                        ((CurrentDeskClientsEntities)adminTransactionRepo.Repository.UnitOfWork.Context).AdminTransactions;

                    return transactionObjSet.Include("BankAccountInformation").Where(transaction => transaction.FK_AdminTransactionTypeID == (int)AdminTransactionType.OutgoingFunds && transaction.FK_OrganizationID == organizationID && transaction.IsApproved == false && transaction.IsDeleted == false).ToList();
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method approves a particular outgoing transaction
        /// </summary>
        /// <param name="approveTransaction">approveTransaction</param>
        /// <returns></returns>
        public bool ApproveOutgoingTransaction(AdminTransaction approveTransaction)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var adminTransactionRepo =
                        new AdminTransactionRepository(new EFRepository<AdminTransaction>(), unitOfWork);

                    ObjectSet<AdminTransaction> transactionObjSet =
                        ((CurrentDeskClientsEntities)adminTransactionRepo.Repository.UnitOfWork.Context).AdminTransactions;

                    //Get particular transaction
                    var transaction = transactionObjSet.Where(tran => tran.PK_TransactionID == approveTransaction.PK_TransactionID).FirstOrDefault();

                    //Update its fields
                    if (transaction != null)
                    {
                        transaction.TransactionAmount = approveTransaction.TransactionAmount;
                        transaction.FeeAmount = approveTransaction.FeeAmount;
                        transaction.ApprovedDate = DateTime.UtcNow;
                        transaction.Notes = approveTransaction.Notes;
                        transaction.FK_FundingSourceID = approveTransaction.FK_FundingSourceID;
                        transaction.IsApproved = true;

                        adminTransactionRepo.Save();
                        return true;
                    }

                    return false;
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method returns sum of pending withdrawal request amount for an account
        /// </summary>
        /// <param name="accountNumber">accountNumber</param>
        /// <returns></returns>
        public decimal GetPendingWithdrawalAmount(string accountNumber)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var adminTransactionRepo =
                        new AdminTransactionRepository(new EFRepository<AdminTransaction>(), unitOfWork);

                    ObjectSet<AdminTransaction> transactionObjSet =
                        ((CurrentDeskClientsEntities)adminTransactionRepo.Repository.UnitOfWork.Context).AdminTransactions;

                    return (decimal)transactionObjSet.Where(tran => tran.AccountNumber == accountNumber && tran.FK_AdminTransactionTypeID == (int)AdminTransactionType.OutgoingFunds && tran.IsApproved == false && tran.IsDeleted == false).ToList().Sum(tran => tran.TransactionAmount);
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method returns sum of pending withdrawal request amount for an account
        /// </summary>
        /// <param name="accountNumber">accountNumber</param>
        /// <param name="organizationID">organizationID</param>
        /// <returns></returns>
        public decimal GetPendingWithdrawalAmount(string accountNumber, int organizationID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var adminTransactionRepo =
                        new AdminTransactionRepository(new EFRepository<AdminTransaction>(), unitOfWork);

                    ObjectSet<AdminTransaction> transactionObjSet =
                        ((CurrentDeskClientsEntities)adminTransactionRepo.Repository.UnitOfWork.Context).AdminTransactions;

                    return (decimal)transactionObjSet.Where(tran => tran.AccountNumber == accountNumber && tran.FK_OrganizationID == organizationID && tran.FK_AdminTransactionTypeID == (int)AdminTransactionType.OutgoingFunds && tran.IsApproved == false && tran.IsDeleted == false).ToList().Sum(tran => tran.TransactionAmount);
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method returns sum of pending transfer request amount for an account
        /// </summary>
        /// <param name="accountNumber">accountNumber</param>
        /// <returns></returns>
        public decimal GetPendingTransferAmount(string accountNumber)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var adminTransactionRepo =
                        new AdminTransactionRepository(new EFRepository<AdminTransaction>(), unitOfWork);

                    ObjectSet<AdminTransaction> transactionObjSet =
                        ((CurrentDeskClientsEntities)adminTransactionRepo.Repository.UnitOfWork.Context).AdminTransactions;

                    return (decimal)transactionObjSet.Where(tran => tran.AccountNumber == accountNumber && (tran.FK_AdminTransactionTypeID == (int)AdminTransactionType.InternalTransfers || tran.FK_AdminTransactionTypeID == (int)AdminTransactionType.ConversionsRequests) && tran.IsApproved == false && tran.IsDeleted == false).ToList().Sum(tran => tran.TransactionAmount);
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method returns sum of pending transfer request amount for an account
        /// </summary>
        /// <param name="accountNumber">accountNumber</param>
        /// <param name="organizationID">organizationID</param>
        /// <returns></returns>
        public decimal GetPendingTransferAmount(string accountNumber, int organizationID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var adminTransactionRepo =
                        new AdminTransactionRepository(new EFRepository<AdminTransaction>(), unitOfWork);

                    ObjectSet<AdminTransaction> transactionObjSet =
                        ((CurrentDeskClientsEntities)adminTransactionRepo.Repository.UnitOfWork.Context).AdminTransactions;

                    return (decimal)transactionObjSet.Where(tran => tran.AccountNumber == accountNumber && tran.FK_OrganizationID == organizationID &&  (tran.FK_AdminTransactionTypeID == (int)AdminTransactionType.InternalTransfers || tran.FK_AdminTransactionTypeID == (int)AdminTransactionType.ConversionsRequests) && tran.IsApproved == false && tran.IsDeleted == false).ToList().Sum(tran => tran.TransactionAmount);
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method returns list of all internal transfer fund transfer request
        /// </summary>
        /// <returns></returns>
        public List<AdminTransaction> GetAllInternalTransferRequests(int organizationID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var adminTransactionRepo =
                        new AdminTransactionRepository(new EFRepository<AdminTransaction>(), unitOfWork);

                    ObjectSet<AdminTransaction> transactionObjSet =
                        ((CurrentDeskClientsEntities)adminTransactionRepo.Repository.UnitOfWork.Context).AdminTransactions;

                    return transactionObjSet.Where(transaction => transaction.FK_AdminTransactionTypeID == (int)AdminTransactionType.InternalTransfers && transaction.FK_OrganizationID == organizationID && transaction.IsApproved == false && transaction.IsDeleted == false).ToList();
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method returns list of all conversion fund transfer request
        /// </summary>
        /// <param name="organizationID">organizationID</param>
        /// <returns></returns>
        public List<AdminTransaction> GetAllConversionRequests(int organizationID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var adminTransactionRepo =
                        new AdminTransactionRepository(new EFRepository<AdminTransaction>(), unitOfWork);

                    ObjectSet<AdminTransaction> transactionObjSet =
                        ((CurrentDeskClientsEntities)adminTransactionRepo.Repository.UnitOfWork.Context).AdminTransactions;

                    return transactionObjSet.Where(transaction => transaction.FK_AdminTransactionTypeID == (int)AdminTransactionType.ConversionsRequests && transaction.FK_OrganizationID == organizationID && transaction.IsApproved == false && transaction.IsDeleted == false).ToList();
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method returns list of transactions of particular type
        /// passed as parameter
        /// </summary>
        /// <returns></returns>
        public List<AdminTransaction> GetAllTransactionsOfParticularType(int transactionType, int organizationID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var adminTransactionRepo =
                        new AdminTransactionRepository(new EFRepository<AdminTransaction>(), unitOfWork);

                    ObjectSet<AdminTransaction> transactionObjSet =
                        ((CurrentDeskClientsEntities) adminTransactionRepo.Repository.UnitOfWork.Context)
                            .AdminTransactions;

                    //All pending transactions
                    var allPendingTransactions =
                        transactionObjSet.Where(
                            transaction =>
                            transaction.FK_AdminTransactionTypeID == transactionType &&
                            transaction.FK_OrganizationID == organizationID && transaction.IsDeleted == false &&
                            transaction.IsApproved == false)
                                         .OrderByDescending(tran => tran.TransactionDate)
                                         .ToList();

                    //Latest 5 approved transactions
                    var latestApprovedTransactions =
                        transactionObjSet.Where(
                            tran =>
                            tran.FK_AdminTransactionTypeID == transactionType &&
                            tran.FK_OrganizationID == organizationID && tran.IsDeleted == false &&
                            tran.IsApproved == true).OrderByDescending(odr => odr.ApprovedDate).Take(5).ToList();

                    allPendingTransactions.AddRange(latestApprovedTransactions);

                    return allPendingTransactions.OrderByDescending(odr => odr.TransactionDate).ToList();
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

	    /// <summary>
	    /// This method returns list of clients transactions of particular type
	    /// </summary>
        /// <param name="clientIds">clientIds</param>
        /// <param name="transactionType">transactionType</param>
	    /// <returns></returns>
        public List<AdminTransaction> GetAllClientsTransactionOfParticulaType(string clientIds, int transactionType, int organizationID)
	    {
	        try
	        {
	            using (var unitOfWork = new EFUnitOfWork())
	            {
	                var adminTransactionRepo =
	                    new AdminTransactionRepository(new EFRepository<AdminTransaction>(), unitOfWork);

	                ObjectSet<AdminTransaction> transactionObjSet =
	                    ((CurrentDeskClientsEntities) adminTransactionRepo.Repository.UnitOfWork.Context)
	                        .AdminTransactions;

	                var allTransactions = transactionObjSet.Where(tran => tran.IsDeleted == false && tran.FK_OrganizationID == organizationID).ToList();

	                //All pending transactions
	                var allPendingTransactions =
	                    allTransactions.Where(
	                        transaction => clientIds.Contains(transaction.FK_UserID.ToString()) &&
	                                       transaction.FK_AdminTransactionTypeID == transactionType &&
	                                       transaction.IsApproved == false)
	                                   .OrderByDescending(tran => tran.TransactionDate)
	                                   .ToList();

	                //Latest 5 approved transactions
	                var latestApprovedTransactions =
	                    allTransactions.Where(
	                        tran => clientIds.Contains(tran.FK_UserID.ToString()) &&
	                                tran.FK_AdminTransactionTypeID == transactionType &&
	                                tran.IsApproved == true).OrderByDescending(odr => odr.ApprovedDate).Take(5).ToList();

	                allPendingTransactions.AddRange(latestApprovedTransactions);

	                return allPendingTransactions.OrderByDescending(odr => odr.TransactionDate).ToList();
	            }
	        }
	        catch (Exception ex)
	        {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
	        }
	    }

	}
}