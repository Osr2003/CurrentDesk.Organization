using System;
using System.Linq;
using System.Collections.Generic;
using CurrentDesk.Models;
using System.Data.Objects;
using CurrentDesk.DAL;
using CurrentDesk.Repository.Utility;

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template at 12/25/2012 2:56:23 PM
//	   and this file should not get overridden 
//
//     Add your own data access methods.
// </auto-generated>
//------------------------------------------------------------------------------ 
	
namespace CurrentDesk.Repository.CurrentDesk
{   
	public class L_TrusteeTypeValueBO
	{
        /// <summary>
        /// This Function will Return All Trustee Type
        /// </summary>
        /// <returns></returns>
        public List<L_TrusteeTypeValue> GetTrusteeType()
        {
            try
            {
                var trusteeTypeKey = CacheKey.CDS_TRUSTEETYPEVALUES;
                var trusteeTypeList = new List<L_TrusteeTypeValue>();

                if (StaticCache.Exist(trusteeTypeKey))
                {
                    trusteeTypeList = (List<L_TrusteeTypeValue>)StaticCache.Get(trusteeTypeKey);
                }
                else
                {
                    using (var unitOfWork = new EFUnitOfWork())
                    {
                        var lTrusteeTypeRepo =
                            new L_TrusteeTypeValueRepository(new EFRepository<L_TrusteeTypeValue>(), unitOfWork);

                        //Returning List Of Demo Lead
                        trusteeTypeList =  lTrusteeTypeRepo.All().ToList();

                        StaticCache.Max(trusteeTypeKey, trusteeTypeList);

                    }
                }

                return trusteeTypeList;
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This function will get selected Trustee Type
        /// </summary>
        /// <param name="trusteeTypeID"></param>
        /// <returns></returns>
        public string GetSelectedTrusteeType(int trusteeTypeID)
        {
            try
            {
                return GetTrusteeType().Where(trst => trst.PK_TrusteeTypeID == trusteeTypeID).
                        Select(trst => trst.TrusteeTypeName).SingleOrDefault();

                //using (var unitOfWork = new EFUnitOfWork())
                //{
                //    var lTrusteeTypeRepo =
                //        new L_TrusteeTypeValueRepository(new EFRepository<L_TrusteeTypeValue>(), unitOfWork);

                //    //Creating Country Objeset to Query
                //    ObjectSet<L_TrusteeTypeValue> trusteeTypeObjSet =
                //      ((CurrentDeskClientsEntities)lTrusteeTypeRepo.Repository.UnitOfWork.Context).L_TrusteeTypeValue;

                //    //Return the selected string
                //    return trusteeTypeObjSet.Where(trst => trst.PK_TrusteeTypeID == trusteeTypeID).
                //        Select(trst => trst.TrusteeTypeName).SingleOrDefault();
                //}
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }
	}
}