using System;
using System.Linq;
using System.Collections.Generic;
using CurrentDesk.Models;
using System.Data.Objects;
using CurrentDesk.DAL;
using CurrentDesk.Common;

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template at 12/25/2012 2:56:22 PM
//	   and this file should not get overridden 
//
//     Add your own data access methods.
// </auto-generated>
//------------------------------------------------------------------------------ 
	
namespace CurrentDesk.Repository.CurrentDesk
{   
	public class ClientBO
	{
        /// <summary>
        /// This function will insert new client
        /// </summary>
        /// <returns></returns>
        public void AddNewClient(Client newClient)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientRepo =
                        new ClientRepository(new EFRepository<Client>(), unitOfWork);

                    clientRepo.Add(newClient);
                    clientRepo.Save();
                }
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This Function will Validate User in Client table
        /// </summary>
        /// <param name="userName">UserName</param>
        /// <param name="password">Password</param>
        /// <returns>bool(true or false depending upon result)</returns>
        public bool ValidateUser(string userName, string password, ref int accountType, ref string userDisplayName)
        {
            var currentDeskSecurity = new CurrentDeskSecurity();
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientRepo =
                          new ClientRepository(new EFRepository<Client>(), unitOfWork);

                    ObjectSet<Client> clientObjSet =
                      ((CurrentDeskClientsEntities)clientRepo.Repository.UnitOfWork.Context).Clients;

                    //Get The Selected client and assign its Properties.
                    var selectedClient =
                        clientObjSet.Where(clnt => clnt.UserEmail == userName).FirstOrDefault();

                    //Check for Nullability
                    if (selectedClient != null)
                    {
                        if (currentDeskSecurity.GetPassDecrypted(selectedClient.Password) == password)
                        {
                            accountType = (int)selectedClient.FK_AccountTypeID;

                            if (accountType == Constants.K_LIVE_INDIVIDUAL)
                            {
                                var individualAccountBO = new IndividualAccountInformationBO();
                                userDisplayName = individualAccountBO.GetLiveIndividualName(selectedClient.PK_ClientID, LoginAccountType.LiveAccount);
                            }
                            else if (accountType == Constants.K_LIVE_JOINT)
                            {
                                var jointAccountBO = new JointAccountInformationBO();
                                userDisplayName = jointAccountBO.GetLiveIndividualName(selectedClient.PK_ClientID, LoginAccountType.LiveAccount);
                            }
                            else if (accountType == Constants.K_LIVE_CORPORATE)
                            {
                                var corporateAccountBO = new CorporateAccountInformationBO();
                                userDisplayName = corporateAccountBO.GetLiveIndividualName(selectedClient.PK_ClientID, LoginAccountType.LiveAccount);
                            }
                            else if (accountType == Constants.K_LIVE_TRUST)
                            {
                                var trustAccountBO = new TrustAccountInformationBO();
                                userDisplayName = trustAccountBO.GetLiveIndividualName(selectedClient.PK_ClientID, LoginAccountType.LiveAccount);
                            }

                            return true;
                        }
                    }

                    return false;
                }
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This function will Provide client information
        /// depending Upon FK_UserID
        /// </summary>
        /// <param name="userID">userID</param>
        /// <returns></returns>
        public Client GetClientInformation(int userID)
        {
            var currentDeskSecurity = new CurrentDeskSecurity();
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientRepo =
                          new ClientRepository(new EFRepository<Client>(), unitOfWork);


                    ObjectSet<Client> clientObjSet =
                      ((CurrentDeskClientsEntities)clientRepo.Repository.UnitOfWork.Context).Clients;

                    //Get The Selected tunning and assign its Properties.                    
                    return clientObjSet.Where(clnt => clnt.FK_UserID == userID).FirstOrDefault();

                }
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }
	
	    public Client GetIndividualAccountDetails(int userID)
        {
            try
            {
                using(var unitOfWork = new EFUnitOfWork())
                {
                    var clientRepo = new ClientRepository(new EFRepository<Client>(), unitOfWork);
                    ObjectSet<Client> clientObjSet =
                        ((CurrentDeskClientsEntities)clientRepo.Repository.UnitOfWork.Context).Clients;

                    var selectedClient = clientObjSet.Where(x => x.FK_UserID == userID).Include("IndividualAccountInformations").Include("BankAccountInformations").Include("User").Include("Client_Account").FirstOrDefault();

                    return selectedClient;
                }
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This Function Will return Joint Account Deatil
        /// </summary>
        /// <param name="userID">userID</param>
        /// <returns></returns>
        public Client GetCorporateAccountDetails(int userID)
        {
            try
            {
                using(var unitOfWork = new EFUnitOfWork())
                {
                    var clientRepo = new ClientRepository(new EFRepository<Client>(), unitOfWork);

                    ObjectSet<Client> clientObjSet =
                        ((CurrentDeskClientsEntities)clientRepo.Repository.UnitOfWork.Context).Clients;

                    return clientObjSet.Where(x => x.FK_UserID == userID).
                        Include("CorporateAccountInformations").Include("BankAccountInformations").Include("User").Include("Client_Account").FirstOrDefault();                   
                }
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This Function Will return Joint Account Deatil
        /// </summary>
        /// <param name="userID">userID</param>
        /// <returns></returns>
        public Client GetTrustAccountDetails(int userID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientRepo = new ClientRepository(new EFRepository<Client>(), unitOfWork);

                    ObjectSet<Client> clientObjSet =
                        ((CurrentDeskClientsEntities)clientRepo.Repository.UnitOfWork.Context).Clients;

                    return clientObjSet.Where(x => x.FK_UserID == userID).
                        Include("TrustAccountInformations").Include("BankAccountInformations").Include("User").Include("Client_Account").FirstOrDefault();
                }
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This function gets joint account details for a particular user
        /// </summary>
        /// <param name="userID">userID</param>
        /// <returns></returns>
        public Client GetJointAccountDetails(int userID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientRepo = new ClientRepository(new EFRepository<Client>(), unitOfWork);
                    ObjectSet<Client> clientObjSet =
                        ((CurrentDeskClientsEntities)clientRepo.Repository.UnitOfWork.Context).Clients;

                    var selectedClient = clientObjSet.Where(x => x.FK_UserID == userID).Include("JointAccountInformations").Include("BankAccountInformations").Include("User").Include("Client_Account").FirstOrDefault();

                    return selectedClient;
                }
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        
        public bool UpdateIndividualPersonalInformation(int userID, string phoneID)
        {
            try
            {

                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientRepo = new ClientRepository(new EFRepository<Client>(), unitOfWork);

                    ObjectSet<Client> clientObjSet =
                        ((CurrentDeskClientsEntities)clientRepo.Repository.UnitOfWork.Context).Clients;

                    var updateRow = clientObjSet.Where(x => x.FK_UserID == userID).
                        Include("IndividualAccountInformations").FirstOrDefault();
                    
                    //Update particular column value
                    updateRow.IndividualAccountInformations.FirstOrDefault().PhoneID = phoneID;

                    //Save changes
                    clientRepo.Save();
                }
                return true;
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                return false;
            }
        }

        public bool UpdateIndividualContactInforamation(int userID, IndividualAccountInformation individualAccountInformation)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientRepo = new ClientRepository(new EFRepository<Client>(), unitOfWork);

                    ObjectSet<Client> clientObjSet =
                        ((CurrentDeskClientsEntities)clientRepo.Repository.UnitOfWork.Context).Clients;

                    var updateRow = clientObjSet.Where(x => x.FK_UserID == userID).
                        Include("IndividualAccountInformations").Include("User").FirstOrDefault();

                    //Update particular column values
                    updateRow.IndividualAccountInformations.FirstOrDefault().TelephoneNumber = individualAccountInformation.TelephoneNumber;
                    updateRow.IndividualAccountInformations.FirstOrDefault().MobileNumber = individualAccountInformation.MobileNumber;
                    updateRow.User.UserEmailID = individualAccountInformation.EmailAddress;

                    //Save changes
                    clientRepo.Save();
                }
                return true;
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                return true;
            }
        }

        /// <summary>
        /// This method updates Trust Information based on FK_UserID from Clients table
        /// </summary>
        /// <param name="userID">userID</param>
        /// <param name="phoneID">phoneID</param>
        /// <returns>bool</returns>
        public bool UpdateTrustInformation(int userID, string phoneID)
        {
            try
            {

                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientRepo = new ClientRepository(new EFRepository<Client>(), unitOfWork);

                    ObjectSet<Client> clientObjSet =
                        ((CurrentDeskClientsEntities)clientRepo.Repository.UnitOfWork.Context).Clients;

                    var updateRow = clientObjSet.Where(x => x.FK_UserID == userID).
                        Include("TrustAccountInformations").FirstOrDefault();

                    if (updateRow != null)
                    {
                        //Update particular column value
                        updateRow.TrustAccountInformations.FirstOrDefault().PhoneID = phoneID;

                        //Save changes
                        clientRepo.Save();
                        return true;
                    }
                }
                return false;
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                return false;
            }
        }

        /// <summary>
        /// This method updates Trustee Cmpy Auth Officer Contact Info based on FK_UserID from Clients table
        /// </summary>
        /// <param name="userID">userID</param>
        /// <param name="telCountryCode">telCountryCode</param>
        /// <param name="telNumber">telNumber</param>
        /// <param name="mobileCountryCode">mobileCountryCode</param>
        /// <param name="mobileNumber">mobileNumber</param>
        /// <param name="secEmailID">secEmailID</param>
        /// <returns>bool</returns>
        public bool UpdateTrusteeCmpyAuthOfficerContactInfo(int userID, string telCountryCode, string telNumber, string mobileCountryCode, string mobileNumber, string secEmailID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientRepo = new ClientRepository(new EFRepository<Client>(), unitOfWork);

                    ObjectSet<Client> clientObjSet =
                        ((CurrentDeskClientsEntities)clientRepo.Repository.UnitOfWork.Context).Clients;

                    var updateRow = clientObjSet.Where(x => x.FK_UserID == userID).
                        Include("TrustAccountInformations").Include("User").FirstOrDefault();

                    if (updateRow != null)
                    {
                        //Update particular column values
                        updateRow.TrustAccountInformations.FirstOrDefault().TrusteeAuthOfficerTelephoneNumber = telCountryCode + "-" + telNumber;
                        updateRow.TrustAccountInformations.FirstOrDefault().TrusteeAuthOfficerMobileNumber = mobileCountryCode + "-" + mobileNumber;
                        updateRow.User.UserEmailID = secEmailID;

                        //Save changes
                        clientRepo.Save();
                        return true;
                    }
                }
                return false;
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                return true;
            }
        }

        /// <summary>
        /// This method updates Trustee Individual Auth Officer Contact Info based on FK_UserID from Clients table
        /// </summary>
        ///<param name="userID">userID</param>
        /// <param name="telCountryCode">telCountryCode</param>
        /// <param name="telNumber">telNumber</param>
        /// <param name="mobileCountryCode">mobileCountryCode</param>
        /// <param name="mobileNumber">mobileNumber</param>
        /// <param name="secEmailID">secEmailID</param>
        /// <returns>bool</returns>
        public bool UpdateTrusteeIndividualAuthOfficerContactInfo(int userID, string telCountryCode, string telNumber, string mobileCountryCode, string mobileNumber, string secEmailID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientRepo = new ClientRepository(new EFRepository<Client>(), unitOfWork);

                    ObjectSet<Client> clientObjSet =
                        ((CurrentDeskClientsEntities)clientRepo.Repository.UnitOfWork.Context).Clients;

                    var updateRow = clientObjSet.Where(x => x.FK_UserID == userID).
                        Include("TrustAccountInformations").Include("User").FirstOrDefault();

                    if (updateRow != null)
                    {
                        //Update particular column values
                        updateRow.TrustAccountInformations.FirstOrDefault().TrusteeIndividualTelephoneNumber = telCountryCode + "-" + telNumber;
                        updateRow.TrustAccountInformations.FirstOrDefault().TrusteeIndividualMobileNumber = mobileCountryCode + "-" + mobileNumber;
                        updateRow.User.UserEmailID = secEmailID;

                        //Save changes
                        clientRepo.Save();
                        return true;
                    }
                }

                return false;
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                return false;
            }
        }

        /// <summary>
        /// This method updates Company Information based on FK_UserID from Clients table
        /// </summary>
        /// <param name="userID">userID</param>
        /// <param name="phoneID">phoneID</param>
        /// <returns>bool</returns>
        public bool UpdateCompanyInformation(int userID, string phoneID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientRepo = new ClientRepository(new EFRepository<Client>(), unitOfWork);

                    ObjectSet<Client> clientObjSet =
                        ((CurrentDeskClientsEntities)clientRepo.Repository.UnitOfWork.Context).Clients;

                    var updateRow = clientObjSet.Where(x => x.FK_UserID == userID).
                        Include("CorporateAccountInformations").FirstOrDefault();

                    if (updateRow != null)
                    {
                        //Update particular column value
                        updateRow.CorporateAccountInformations.FirstOrDefault().PhoneID = phoneID;

                        //Save changes
                        clientRepo.Save();
                        return true;
                    }
                }
                return false;
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                return false;
            }
        }

        /// <summary>
        /// This method updates Company Auth Officer Contact Info based on FK_UserID from Clients table
        /// </summary>
        /// <param name="userID">userID</param>
        /// <param name="telCountryCode">telCountryCode</param>
        /// <param name="telNumber">telNumber</param>
        /// <param name="mobileCountryCode">mobileCountryCode</param>
        /// <param name="mobileNumber">mobileNumber</param>
        /// <param name="secEmailID">secEmailID</param>
        /// <returns>bool</returns>
        public bool UpdateCompanyAuthOfficerContactInfo(int userID, string telCountryCode, string telNumber, string mobileCountryCode, string mobileNumber, string secEmailID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientRepo = new ClientRepository(new EFRepository<Client>(), unitOfWork);

                    ObjectSet<Client> clientObjSet =
                        ((CurrentDeskClientsEntities)clientRepo.Repository.UnitOfWork.Context).Clients;

                    var updateRow = clientObjSet.Where(x => x.FK_UserID == userID).
                        Include("CorporateAccountInformations").Include("User").FirstOrDefault();

                    if (updateRow != null)
                    {
                        //Update particular column values
                        updateRow.CorporateAccountInformations.FirstOrDefault().AuthOfficerTelephoneNumber = telCountryCode + "-" + telNumber;
                        updateRow.CorporateAccountInformations.FirstOrDefault().AuthOfficerMobileNumber = mobileCountryCode + "-" + mobileNumber;
                        updateRow.User.UserEmailID = secEmailID;

                        //Save changes
                        clientRepo.Save();
                        return true;
                    }
                }
                return false;
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                return false;
            }
        }

        /// <summary>
        /// This Function Will Update The Joint-Account Personal Information of Client
        /// </summary>
        /// <param name="userID">userID</param>
        /// <param name="phoneID">PhoneID</param>
        /// <returns>result</returns>
        public bool UpdateJointPersonalInformation(int userID, string phoneID)
        {
            try
            {

                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientRepo = new ClientRepository(new EFRepository<Client>(), unitOfWork);

                    ObjectSet<Client> clientObjSet =
                        ((CurrentDeskClientsEntities)clientRepo.Repository.UnitOfWork.Context).Clients;

                    var updateRow = clientObjSet.Where(x => x.FK_UserID == userID).
                        Include("JointAccountInformations").FirstOrDefault();

                    //Update particular column value
                    updateRow.JointAccountInformations.FirstOrDefault().PhoneID = phoneID;

                    //Save changes
                    clientRepo.Save();
                }
                return true;
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                return false;
            }
        }

        /// <summary>
        /// This Function Will Update Joint Account Contact Information Of Client
        /// </summary>
        /// <param name="userID">userID</param>
        /// <param name="jointAccountInformation">jointAccountInformation</param>
        /// <returns>result</returns>
        public bool UpdateJointContactInforamation(int userID, JointAccountInformation jointAccountInformation)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientRepo = new ClientRepository(new EFRepository<Client>(), unitOfWork);

                    ObjectSet<Client> clientObjSet =
                        ((CurrentDeskClientsEntities)clientRepo.Repository.UnitOfWork.Context).Clients;

                    var updateRow = clientObjSet.Where(x => x.FK_UserID == userID).
                        Include("JointAccountInformations").Include("User").FirstOrDefault();

                    //Update particular column values
                    updateRow.JointAccountInformations.FirstOrDefault().TelephoneNumber = jointAccountInformation.TelephoneNumber;
                    updateRow.JointAccountInformations.FirstOrDefault().MobileNumber = jointAccountInformation.MobileNumber;
                    updateRow.User.UserEmailID = jointAccountInformation.EmailAddress;

                    //Save changes
                    clientRepo.Save();
                }
                return true;
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                return true;
            }
        }

        /// <summary>
        /// This method fetches Client information for different account types
        /// </summary>
        /// <param name="userID">userID</param>
        /// <param name="accountType">accountType</param>
        /// <param name="userDisplayName">userDisplayName</param>
        /// <returns></returns>
        public bool GetClientAccountInformation(int userID, ref int accountType, ref int accountCode, ref string userDisplayName, ref int organizationID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientRepo =
                              new ClientRepository(new EFRepository<Client>(), unitOfWork);

                    ObjectSet<Client> clientObjSet =
                      ((CurrentDeskClientsEntities)clientRepo.Repository.UnitOfWork.Context).Clients;

                    var selectedClient = clientObjSet.Where(usr => usr.FK_UserID == userID).FirstOrDefault();

                    if (selectedClient != null)
                    {
                        accountType = (int)selectedClient.FK_AccountTypeID ;
                        accountCode = (int)selectedClient.FK_AccountID;
                        organizationID = selectedClient.FK_OrganizationID;

                        if (accountType  == Constants.K_LIVE_INDIVIDUAL)
                        {
                            var individualAccountBO = new IndividualAccountInformationBO();
                            userDisplayName = individualAccountBO.GetLiveIndividualName(selectedClient.PK_ClientID, LoginAccountType.LiveAccount);
                        }
                        else if (accountType == Constants.K_LIVE_JOINT)
                        {
                            var jointAccountBO = new JointAccountInformationBO();
                            userDisplayName = jointAccountBO.GetLiveIndividualName(selectedClient.PK_ClientID, LoginAccountType.LiveAccount);
                        }
                        else if (accountType == Constants.K_LIVE_CORPORATE)
                        {
                            var corporateAccountBO = new CorporateAccountInformationBO();
                            userDisplayName = corporateAccountBO.GetLiveIndividualName(selectedClient.PK_ClientID, LoginAccountType.LiveAccount);
                        }
                        else if (accountType == Constants.K_LIVE_TRUST)
                        {
                            var trustAccountBO = new TrustAccountInformationBO();
                            userDisplayName = trustAccountBO.GetLiveIndividualName(selectedClient.PK_ClientID, LoginAccountType.LiveAccount);
                        }
                        return true;
                    }
                    return false;
                }
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method fetches Client information for different account types
        /// </summary>
        /// <param name="userID">userID</param>
        /// <param name="accountType">accountType</param>
        /// <param name="userDisplayName">userDisplayName</param>
        /// <returns></returns>
        public bool GetClientAccountInformation(int userID, ref int accountType, ref int accountCode, ref string userDisplayName)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientRepo =
                              new ClientRepository(new EFRepository<Client>(), unitOfWork);

                    ObjectSet<Client> clientObjSet =
                      ((CurrentDeskClientsEntities)clientRepo.Repository.UnitOfWork.Context).Clients;

                    var selectedClient = clientObjSet.Where(usr => usr.FK_UserID == userID).FirstOrDefault();

                    if (selectedClient != null)
                    {
                        accountType = (int)selectedClient.FK_AccountTypeID;
                        accountCode = (int)selectedClient.FK_AccountID;

                        if (accountType == Constants.K_LIVE_INDIVIDUAL)
                        {
                            var individualAccountBO = new IndividualAccountInformationBO();
                            userDisplayName = individualAccountBO.GetLiveIndividualName(selectedClient.PK_ClientID, LoginAccountType.LiveAccount);
                        }
                        else if (accountType == Constants.K_LIVE_JOINT)
                        {
                            var jointAccountBO = new JointAccountInformationBO();
                            userDisplayName = jointAccountBO.GetLiveIndividualName(selectedClient.PK_ClientID, LoginAccountType.LiveAccount);
                        }
                        else if (accountType == Constants.K_LIVE_CORPORATE)
                        {
                            var corporateAccountBO = new CorporateAccountInformationBO();
                            userDisplayName = corporateAccountBO.GetLiveIndividualName(selectedClient.PK_ClientID, LoginAccountType.LiveAccount);
                        }
                        else if (accountType == Constants.K_LIVE_TRUST)
                        {
                            var trustAccountBO = new TrustAccountInformationBO();
                            userDisplayName = trustAccountBO.GetLiveIndividualName(selectedClient.PK_ClientID, LoginAccountType.LiveAccount);
                        }
                        return true;
                    }
                    return false;
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method returns all clients that are under an IB
        /// </summary>
        /// <param name="userID">userID</param>
        /// <returns></returns>
        public List<Client> GetAllClientsOfIB(int userID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientRepo =
                              new ClientRepository(new EFRepository<Client>(), unitOfWork);

                    ObjectSet<Client> clientObjSet =
                      ((CurrentDeskClientsEntities)clientRepo.Repository.UnitOfWork.Context).Clients;

                    return clientObjSet.Include("IntroducingBroker").Include("Client_Account").Where(clnt => clnt.IntroducingBroker.FK_UserID == userID).ToList();
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This function will Provide client information
        /// depending Upon PK_ClientID
        /// </summary>
        /// <param name="clientID">clientID</param>
        /// <returns></returns>
        public Client GetClientInformationOnClientPK(int clientID)
        {
            var currentDeskSecurity = new CurrentDeskSecurity();
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientRepo =
                          new ClientRepository(new EFRepository<Client>(), unitOfWork);


                    ObjectSet<Client> clientObjSet =
                      ((CurrentDeskClientsEntities)clientRepo.Repository.UnitOfWork.Context).Clients;

                    //Get The Selected tunning and assign its Properties.                    
                    return clientObjSet.Include("BankAccountInformations").Include("User").Include("Client_Account").Where(clnt => clnt.PK_ClientID == clientID).FirstOrDefault();

                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method sets/updates client status
        /// </summary>
        /// <param name="userID">userID</param>
        /// <param name="status">status</param>
        public void UpdateClientStatus(int userID, string status)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientRepo =
                          new ClientRepository(new EFRepository<Client>(), unitOfWork);


                    ObjectSet<Client> clientObjSet =
                      ((CurrentDeskClientsEntities)clientRepo.Repository.UnitOfWork.Context).Clients;

                    //Select the client
                    var client = clientObjSet.Where(clnt => clnt.FK_UserID == userID).FirstOrDefault();
                    
                    //Set client status
                    if (client != null)
                    {
                        //If status changes then update IsSeen and IsDismiss to false
                        if (client.Status != status)
                        {
                            client.IsSeen = false;
                            client.IsDismissed = false;
                        }

                        client.Status = status;

                        clientRepo.Save();
                    }
                }
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method returns IB UserID based on client UserID
        /// </summary>
        /// <param name="userID">userID</param>
        /// <returns></returns>
        public int GetIntroducingBrokerIDOfClient(int userID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientRepo =
                          new ClientRepository(new EFRepository<Client>(), unitOfWork);


                    ObjectSet<Client> clientObjSet =
                      ((CurrentDeskClientsEntities)clientRepo.Repository.UnitOfWork.Context).Clients;

                    var client = clientObjSet.Where(clnt => clnt.FK_UserID == userID).FirstOrDefault();
                    if (client != null && client.FK_IntroducingBrokerID != null)
                    {
                        return client.IntroducingBroker.FK_UserID != null ? (int)client.IntroducingBroker.FK_UserID : 0;
                    }
                    return 0;
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method returns dictionary value with key =
        /// number of records and value = if any new record
        /// </summary>
        /// <param name="status">status</param>
        /// <param name="introducingBrokerUserID">introducingBrokerUserID</param>
        /// <returns></returns>
        public List<Dictionary<int, bool>> GetStatusReport(int introducingBrokerUserID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientRepo =
                          new ClientRepository(new EFRepository<Client>(), unitOfWork);


                    ObjectSet<Client> clientObjSet =
                      ((CurrentDeskClientsEntities)clientRepo.Repository.UnitOfWork.Context).Clients;
                    List<Dictionary<int, bool>> lstStatusList = new List<Dictionary<int, bool>>();

                    //Get all clients of particular status where IsDismissed = false
                    var clientList = clientObjSet.Where(clnt => clnt.IntroducingBroker.FK_UserID == introducingBrokerUserID && clnt.IsDismissed == false).ToList();

                    //Get all clients grouped by status
                    var approvedClients = clientList.Where(clnt => clnt.Status == "Approved");
                    var pendingClients = clientList.Where(clnt => clnt.Status == "Pending");
                    var missingClients = clientList.Where(clnt => clnt.Status == "Missing Documents");
                    var deniedClients = clientList.Where(clnt => clnt.Status == "Denied");

                    //Check if any new client with particular status not seen by IB
                    var anyNewApproved = approvedClients.Any(clnt => clnt.IsSeen == false);
                    var anyNewPending = pendingClients.Any(clnt => clnt.IsSeen == false);
                    var anyNewMissing = missingClients.Any(clnt => clnt.IsSeen == false);
                    var anyNewDenied = deniedClients.Any(clnt => clnt.IsSeen == false);

                    lstStatusList.Add(new Dictionary<int, bool>() { { approvedClients.Count(), anyNewApproved } });
                    lstStatusList.Add(new Dictionary<int, bool>() { { pendingClients.Count(), anyNewPending } });
                    lstStatusList.Add(new Dictionary<int, bool>() { { missingClients.Count(), anyNewMissing } });
                    lstStatusList.Add(new Dictionary<int, bool>() { { deniedClients.Count(), anyNewDenied } });

                    return lstStatusList;
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method returns all clients that are under an IB with a particular status
        /// </summary>
        /// /// <param name="status">status</param>
        /// <param name="userID">userID</param>
        /// <returns></returns>
        public List<Client> GetAllClientsOfIBOnStatus(string status, int userID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientRepo =
                              new ClientRepository(new EFRepository<Client>(), unitOfWork);

                    ObjectSet<Client> clientObjSet =
                      ((CurrentDeskClientsEntities)clientRepo.Repository.UnitOfWork.Context).Clients;

                    return clientObjSet.Include("IntroducingBroker").Include("Client_Account").Where(clnt => clnt.IntroducingBroker.FK_UserID == userID && clnt.Status == status && clnt.IsDismissed == false).ToList();
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method sets IsSeen true for each client of particular status
        /// </summary>
        /// <param name="status">status</param>
        /// <param name="userID">userID</param>
        public void SetIsSeenForClientsAfterReportShow(string status, int userID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientRepo =
                              new ClientRepository(new EFRepository<Client>(), unitOfWork);

                    ObjectSet<Client> clientObjSet =
                      ((CurrentDeskClientsEntities)clientRepo.Repository.UnitOfWork.Context).Clients;

                    //Get all clients of particular status
                    var clientList = clientObjSet.Include("IntroducingBroker").Where(clnt => clnt.IntroducingBroker.FK_UserID == userID && clnt.Status == status && clnt.IsDismissed == false).ToList();

                    //Set IsSeen true for each client
                    foreach (var client in clientList)
                    {
                        client.IsSeen = true;
                    }

                    //Save changes
                    clientRepo.Save();
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method sets IsDismiss to true for each selected client in clientID array
        /// </summary>
        /// <param name="clientIDs">clientIDs</param>
        /// <param name="status">status</param>
        /// <param name="userID">userID</param>
        /// <returns></returns>
        public bool DismissSelectedClients(string clientIDs, string status, int userID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientRepo =
                              new ClientRepository(new EFRepository<Client>(), unitOfWork);

                    ObjectSet<Client> clientObjSet =
                      ((CurrentDeskClientsEntities)clientRepo.Repository.UnitOfWork.Context).Clients;

                    //Get array of client IDs
                    var arrClientIDs = clientIDs.TrimEnd(',').Split(',');
                    
                    //Change IsDismiss to true for each client
                    foreach (var client in arrClientIDs)
                    {
                        int clientID = Convert.ToInt32(client);
                        var dismissClient = clientObjSet.Where(clnt => clnt.PK_ClientID == clientID).FirstOrDefault();
                        if (dismissClient != null)
                        {
                            dismissClient.IsDismissed = true;
                        }
                    }

                    clientRepo.Save();
                    return true;
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                return false;
            }
        }

        /// <summary>
        /// This method returns activity status of clients under particular IB
        /// </summary>
        /// <param name="introducingBrokerUserID">introducingBrokerUserID</param>
        /// <returns></returns>
        public List<Dictionary<int, bool>> GetActivityStatusReport(int introducingBrokerUserID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientRepo =
                          new ClientRepository(new EFRepository<Client>(), unitOfWork);


                    ObjectSet<Client> clientObjSet =
                      ((CurrentDeskClientsEntities)clientRepo.Repository.UnitOfWork.Context).Clients;

                    List<Dictionary<int, bool>> lstDicList = new List<Dictionary<int, bool>>();
                    //Dictionary<int, bool> dic = new Dictionary<int, bool>();
                    Client_AccountBO clientAccBO = new Client_AccountBO();

                    var allClients = clientObjSet.Where(clnt => clnt.IntroducingBroker.FK_UserID == introducingBrokerUserID && clnt.IsActivityDismissed == false).ToList();

                    foreach (var client in allClients)
                    {
                        var activity = clientAccBO.GetClientActivityStatus(client.PK_ClientID);
                        if (client.Activity != activity)
                        {
                            client.IsActivitySeen = false;
                            client.IsActivityDismissed = false;
                        }
                        client.Activity = activity;
                    }

                    //Get all clients as per activity
                    var newClients = allClients.Where(clnt => clnt.Activity == "new");
                    var activeClients = allClients.Where(clnt => clnt.Activity == "active");
                    var inactiveClients = allClients.Where(clnt => clnt.Activity == "inactive");
                    var dormantClients = allClients.Where(clnt => clnt.Activity == "dormant");

                    //Check if any unseen clients is there
                    var anyNewClients = newClients.Any(clnt => clnt.IsActivitySeen == false);
                    var anyNewActiveClients = activeClients.Any(clnt => clnt.IsActivitySeen == false);
                    var anyNewInactiveClients = inactiveClients.Any(clnt => clnt.IsActivitySeen == false);
                    var anyNewDormantClients = dormantClients.Any(clnt => clnt.IsActivitySeen == false);

                    //Add to dictionary collection
                    lstDicList.Add(new Dictionary<int, bool>() { { newClients.Count(), anyNewClients } });
                    lstDicList.Add(new Dictionary<int, bool>() { { activeClients.Count(), anyNewActiveClients } });
                    lstDicList.Add(new Dictionary<int, bool>() { { inactiveClients.Count(), anyNewInactiveClients } });
                    lstDicList.Add(new Dictionary<int, bool>() { { dormantClients.Count(), anyNewDormantClients } });

                    clientRepo.Save();

                    return lstDicList;
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method returns all clients that are under an IB with a particular activity
        /// </summary>
        /// /// <param name="activity">activity</param>
        /// <param name="userID">userID</param>
        /// <returns></returns>
        public List<Client> GetAllClientsOfIBOnActivityStatus(string activity, int userID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientRepo =
                              new ClientRepository(new EFRepository<Client>(), unitOfWork);

                    ObjectSet<Client> clientObjSet =
                      ((CurrentDeskClientsEntities)clientRepo.Repository.UnitOfWork.Context).Clients;

                    return clientObjSet.Include("IntroducingBroker").Include("Client_Account").Where(clnt => clnt.IntroducingBroker.FK_UserID == userID && clnt.Activity == activity && clnt.IsActivityDismissed == false).ToList();
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method sets IsActivitySeen true for each client of particular activity
        /// </summary>
        /// <param name="activity">activity</param>
        /// <param name="userID">userID</param>
        public void SetIsActivitySeenForClientsAfterReportShow(string activity, int userID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientRepo =
                              new ClientRepository(new EFRepository<Client>(), unitOfWork);

                    ObjectSet<Client> clientObjSet =
                      ((CurrentDeskClientsEntities)clientRepo.Repository.UnitOfWork.Context).Clients;

                    //Get all clients of particular status
                    var clientList = clientObjSet.Include("IntroducingBroker").Where(clnt => clnt.IntroducingBroker.FK_UserID == userID && clnt.Activity == activity && clnt.IsActivityDismissed == false).ToList();

                    //Set IsSeen true for each client
                    foreach (var client in clientList)
                    {
                        client.IsActivitySeen = true;
                    }

                    //Save changes
                    clientRepo.Save();
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method sets IsActivityDismiss to true for each selected client in clientID array
        /// </summary>
        /// <param name="clientIDs">clientIDs</param>
        /// <param name="userID">userID</param>
        /// <returns></returns>
        public bool DismissSelectedClientsOnActivity(string clientIDs, int userID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientRepo =
                              new ClientRepository(new EFRepository<Client>(), unitOfWork);

                    ObjectSet<Client> clientObjSet =
                      ((CurrentDeskClientsEntities)clientRepo.Repository.UnitOfWork.Context).Clients;

                    //Get array of client IDs
                    var arrClientIDs = clientIDs.TrimEnd(',').Split(',');

                    //Change IsDismiss to true for each client
                    foreach (var client in arrClientIDs)
                    {
                        int clientID = Convert.ToInt32(client);
                        var dismissClient = clientObjSet.Where(clnt => clnt.PK_ClientID == clientID).FirstOrDefault();
                        if (dismissClient != null)
                        {
                            dismissClient.IsActivityDismissed = true;
                        }
                    }

                    clientRepo.Save();
                    return true;
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                return false;
            }
        }

        /// <summary>
        /// This method change/assign agent to client
        /// </summary>
        /// <param name="clientID">clientID</param>
        /// <param name="agentID">agentID</param>
        /// <returns></returns>
        public bool ChangeClientAgent(int clientID, int agentID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientRepo =
                              new ClientRepository(new EFRepository<Client>(), unitOfWork);

                    ObjectSet<Client> clientObjSet =
                      ((CurrentDeskClientsEntities)clientRepo.Repository.UnitOfWork.Context).Clients;

                    //Get particular client
                    var client = clientObjSet.Where(clnt => clnt.PK_ClientID == clientID).FirstOrDefault();
                    
                    //Change/assign agentID
                    if (client != null)
                    {
                        client.FK_AgentID = agentID;

                        clientRepo.Save();
                        return true;
                    }
                    return false;
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                return false;
            }
        }

        /// <summary>
        /// This method returns client name based on userID
        /// </summary>
        /// <param name="userID">userID</param>
        /// <returns></returns>
        public string GetClientName(int userID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientRepo =
                              new ClientRepository(new EFRepository<Client>(), unitOfWork);

                    ObjectSet<Client> clientObjSet =
                      ((CurrentDeskClientsEntities)clientRepo.Repository.UnitOfWork.Context).Clients;

                    //Get The Selected client and assign its Properties.
                    var selectedClient =
                        clientObjSet.Where(clnt => clnt.FK_UserID == userID).FirstOrDefault();

                    //Check for Nullability
                    if (selectedClient != null)
                    {
                        var accountType = (int)selectedClient.FK_AccountTypeID;

                        if (accountType == Constants.K_LIVE_INDIVIDUAL)
                        {
                            var individualAccountBO = new IndividualAccountInformationBO();
                            return individualAccountBO.GetLiveIndividualName(selectedClient.PK_ClientID, LoginAccountType.LiveAccount);
                        }
                        else if (accountType == Constants.K_LIVE_JOINT)
                        {
                            var jointAccountBO = new JointAccountInformationBO();
                            return jointAccountBO.GetLiveIndividualName(selectedClient.PK_ClientID, LoginAccountType.LiveAccount);
                        }
                        else if (accountType == Constants.K_LIVE_CORPORATE)
                        {
                            var corporateAccountBO = new CorporateAccountInformationBO();
                            return corporateAccountBO.GetLiveIndividualName(selectedClient.PK_ClientID, LoginAccountType.LiveAccount);
                        }
                        else if (accountType == Constants.K_LIVE_TRUST)
                        {
                            var trustAccountBO = new TrustAccountInformationBO();
                            return trustAccountBO.GetLiveIndividualName(selectedClient.PK_ClientID, LoginAccountType.LiveAccount);
                        }
                    }

                    return String.Empty;
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                return String.Empty;
            }
        }


        /// <summary>
        /// This method returns list of client names and userID
        /// </summary>
        /// <param name="userID">users</param>
        /// <returns></returns>
        public List<BrokerClients> GetClientNames(List<User> users)
        {
            try
            {
                //Get all user ids
                var listOfUsersID = users.Select(x => x.PK_UserID).ToList();

                using (var unitOfWork = new EFUnitOfWork())
                {
                    var clientRepo =
                              new ClientRepository(new EFRepository<Client>(), unitOfWork);

                    var context =
                      ((CurrentDeskClientsEntities)clientRepo.Repository.UnitOfWork.Context);

                    //Get the selected client and assign its Properties.
                    var selectedClient =
                        context.Clients.Where(clnt => listOfUsersID.Contains((int)clnt.FK_UserID))
                        .Include("IndividualAccountInformations")
                        .Include("JointAccountInformations")
                        .Include("CorporateAccountInformations")
                        .Include("TrustAccountInformations")
                        .Include("Client_Account")
                        .ToList();


                    List<BrokerClients> lstBrokerClients = new List<BrokerClients>();
                    
                    //Check for Nullability
                    if (selectedClient != null)
                    {
                        foreach (var item in selectedClient)
                        {
                            var brokerClient = new BrokerClients();
                            string brokerName = string.Empty;
                            var accountType = (int)item.FK_AccountTypeID;

                            if (accountType == Constants.K_LIVE_INDIVIDUAL)
                            {
                                var liveInfo = item.IndividualAccountInformations.FirstOrDefault();
                                brokerName = (liveInfo != null ? liveInfo.FirstName + " " + liveInfo.LastName : null) + " - " + (item.Client_Account.FirstOrDefault() != null ? item.Client_Account.FirstOrDefault().LandingAccount.Split('-')[2] : "");
                            }
                            else if (accountType == Constants.K_LIVE_JOINT)
                            {
                                var jointInfo = item.JointAccountInformations.FirstOrDefault();
                                brokerName = (jointInfo != null ? jointInfo.PrimaryAccountHolderFirstName + " " + jointInfo.PrimaryAccountHolderLastName : null) + " - " + (item.Client_Account.FirstOrDefault() != null ? item.Client_Account.FirstOrDefault().LandingAccount.Split('-')[2] : "");
                            }
                            else if (accountType == Constants.K_LIVE_CORPORATE)
                            {
                                var corInfo = item.CorporateAccountInformations.FirstOrDefault();
                                brokerName = (corInfo != null ? corInfo.CompanyName : null) + " - " + (item.Client_Account.FirstOrDefault() != null ? item.Client_Account.FirstOrDefault().LandingAccount.Split('-')[2] : "");
                            }
                            else if (accountType == Constants.K_LIVE_TRUST)
                            {
                                var trustInfo = item.TrustAccountInformations.FirstOrDefault();
                                brokerName = (trustInfo != null ? trustInfo.TrustName : null) + " - " + (item.Client_Account.FirstOrDefault() != null ? item.Client_Account.FirstOrDefault().LandingAccount.Split('-')[2] : "");
                            }

                            brokerClient.UserID = (int)item.FK_UserID;
                            brokerClient.DisplayName = brokerName;

                            //Add to list
                            lstBrokerClients.Add(brokerClient);

                        }
                    }

                    return lstBrokerClients;
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }
	}
}