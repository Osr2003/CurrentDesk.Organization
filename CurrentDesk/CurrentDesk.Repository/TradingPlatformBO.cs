/* **************************************************************
* File Name     :- TradingPlatformBO.cs
* Author        :- Mukesh Nayak
* Copyright     :- Mindfire Solutions 
* Date          :- 25thd Dec 2012
* Modified Date :- 2nd Jan 2013
* Description   :- This file with all the business logic Related to TradingPlatformBO
****************************************************************/

#region Namespace
using System.Collections.Generic;
using System.Data.Objects;
using System.Linq;
using CurrentDesk.DAL;
using CurrentDesk.Models;
using System;
#endregion

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template at 12/25/2012 2:56:23 PM
//	   and this file should not get overridden 
//
//     Add your own data access methods.
// </auto-generated>
//------------------------------------------------------------------------------ 
	
namespace CurrentDesk.Repository.CurrentDesk
{   
    /// <summary>
    /// Business Object For TradingPlatform 
    /// </summary>
	public class TradingPlatformBO
	{
        /// <summary>
        /// This Function Will return all the selected Currency
        /// </summary>
        /// <returns></returns>
        public List<TradingPlatform> GetSelectedPlatform(int formID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var tradingPlatformRepo =
                        new TradingPlatformRepository(new EFRepository<TradingPlatform>(), unitOfWork);

                    ObjectSet<TradingPlatform> tradingPlatformObjSet =
                       ((CurrentDeskClientsEntities)tradingPlatformRepo.Repository.UnitOfWork.Context).TradingPlatforms;

                    return  tradingPlatformObjSet.Where(tradPf => tradPf.FK_AccountFormTypeID == formID).Include("L_TradingPlatformValues").ToList();
                }
            }
            catch(Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This Function Will return all the selected Currency
        /// </summary>
        /// <returns></returns>
        public List<TradingPlatform> GetSelectedPlatform(int formID, int organizationID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var tradingPlatformRepo =
                        new TradingPlatformRepository(new EFRepository<TradingPlatform>(), unitOfWork);

                    ObjectSet<TradingPlatform> tradingPlatformObjSet =
                       ((CurrentDeskClientsEntities)tradingPlatformRepo.Repository.UnitOfWork.Context).TradingPlatforms;

                    return tradingPlatformObjSet.Where(tradPf => tradPf.FK_AccountFormTypeID == formID && tradPf.FK_OrganizationID == organizationID).Include("L_TradingPlatformValues").ToList();
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method returns trading platform lookup value from platformID
        /// </summary>
        /// <param name="formID">formID</param>
        /// <param name="platformID">platformID</param>
        /// <returns></returns>
        public string GetTradingPlatformLookUpValue(int formID, int platformID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var tradingPlatformRepo =
                        new TradingPlatformRepository(new EFRepository<TradingPlatform>(), unitOfWork);

                    ObjectSet<TradingPlatform> tradingPlatformObjSet =
                       ((CurrentDeskClientsEntities)tradingPlatformRepo.Repository.UnitOfWork.Context).TradingPlatforms;

                    return tradingPlatformObjSet.Where(tradPf => tradPf.FK_AccountFormTypeID == formID && tradPf.PK_TradingPlatformID == platformID).Include("L_TradingPlatformValues").FirstOrDefault().L_TradingPlatformValues.TradingValue;
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }

        /// <summary>
        /// This method returns trading platform lookup ID from platformID
        /// </summary>
        /// <param name="platformID">platformID</param>
        /// <returns></returns>
        public int GetTradingPlatformLookUpID(int platformID)
        {
            try
            {
                using (var unitOfWork = new EFUnitOfWork())
                {
                    var tradingPlatformRepo =
                        new TradingPlatformRepository(new EFRepository<TradingPlatform>(), unitOfWork);

                    ObjectSet<TradingPlatform> tradingPlatformObjSet =
                       ((CurrentDeskClientsEntities)tradingPlatformRepo.Repository.UnitOfWork.Context).TradingPlatforms;

                    return
                        (int)tradingPlatformObjSet.Where(tradPf => tradPf.PK_TradingPlatformID == platformID).FirstOrDefault().FK_TradingValueID;
                }
            }
            catch (Exception ex)
            {
                CommonErrorLogger.CommonErrorLog(ex, System.Reflection.MethodBase.GetCurrentMethod().Name);
                throw;
            }
        }
	}
}